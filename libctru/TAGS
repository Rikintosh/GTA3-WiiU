
include/netdb.h,1475
#define HOST_NOT_FOUND	HOST_NOT_FOUND5,39
#define NO_DATA	NO_DATA6,64
#define NO_ADDRESS	NO_ADDRESS7,83
#define NO_RECOVERY	NO_RECOVERY8,110
#define TRY_AGAIN	TRY_AGAIN9,132
struct hostent {hostent11,153
	char	*h_name;h_name12,170
	char	**h_aliases;h_aliases13,185
	int	h_addrtype;h_addrtype14,204
	int	h_length;h_length15,221
	char	**h_addr_list;h_addr_list16,236
	char	*h_addr;h_addr17,257
#define AI_PASSIVE AI_PASSIVE21,277
#define AI_CANONNAME AI_CANONNAME22,305
#define AI_NUMERICHOST AI_NUMERICHOST23,333
#define AI_NUMERICSERV AI_NUMERICSERV24,361
#define AI_ADDRCONFIG AI_ADDRCONFIG27,472
#define NI_MAXHOST NI_MAXHOST30,502
#define NI_MAXSERV NI_MAXSERV31,530
#define NI_NOFQDN NI_NOFQDN33,559
#define NI_NUMERICHOST NI_NUMERICHOST34,587
#define NI_NAMEREQD NI_NAMEREQD35,615
#define NI_NUMERICSERV NI_NUMERICSERV36,643
#define NI_DGRAM NI_DGRAM37,729
#define EAI_FAMILY EAI_FAMILY39,816
#define EAI_MEMORY EAI_MEMORY40,844
#define EAI_NONAME EAI_NONAME41,872
#define EAI_SOCKTYPE EAI_SOCKTYPE42,900
struct addrinfo {addrinfo44,929
	int             ai_flags;ai_flags45,947
	int             ai_family;ai_family46,974
	int             ai_socktype;ai_socktype47,1002
	int             ai_protocol;ai_protocol48,1032
	socklen_t       ai_addrlen;ai_addrlen49,1062
	char            *ai_canonname;ai_canonname50,1091
	struct sockaddr *ai_addr;ai_addr51,1123
	struct addrinfo *ai_next;ai_next52,1150

include/netinet/in.h,1194
#define INADDR_LOOPBACK INADDR_LOOPBACK6,59
#define INADDR_ANY INADDR_ANY7,95
#define INADDR_BROADCAST INADDR_BROADCAST8,131
#define INADDR_NONE INADDR_NONE9,167
#define INET_ADDRSTRLEN INET_ADDRSTRLEN11,204
#define IPPROTO_IP IPPROTO_IP16,281
#define IPPROTO_UDP IPPROTO_UDP17,344
#define IPPROTO_TCP IPPROTO_TCP18,417
#define IP_TOS IP_TOS20,472
#define IP_TTL IP_TTL21,502
#define IP_MULTICAST_LOOP IP_MULTICAST_LOOP22,532
#define IP_MULTICAST_TTL IP_MULTICAST_TTL23,562
#define IP_ADD_MEMBERSHIP IP_ADD_MEMBERSHIP24,592
#define IP_DROP_MEMBERSHIP IP_DROP_MEMBERSHIP25,622
typedef uint16_t in_port_t;in_port_t27,653
typedef uint32_t in_addr_t;in_addr_t28,681
struct in_addr {in_addr30,710
	in_addr_t       s_addr;s_addr31,727
struct sockaddr_in {sockaddr_in34,756
	sa_family_t     sin_family;sin_family35,777
	in_port_t       sin_port;sin_port36,806
	struct in_addr  sin_addr;sin_addr37,833
	unsigned char   sin_zero[8];sin_zero38,860
struct ip_mreq  {ip_mreq42,940
	struct in_addr imr_multiaddr;	/* IP multicast address of group */imr_multiaddr43,958
	struct in_addr imr_interface;	/* local IP address of interface */imr_interface44,1025

include/netinet/tcp.h,299
#define SOL_TCP SOL_TCP3,14
enum{__anon76d5a37b01035,56
	 _CTRU_TCP_OPT = 0x2000,            /* Flag for tcp opt values */_CTRU_TCP_OPT6,62
	 TCP_NODELAY   = 1 | _CTRU_TCP_OPT, /* Don't delay send to coalesce packets  */TCP_NODELAY7,129
	 TCP_MAXSEG    = 2 | _CTRU_TCP_OPT,TCP_MAXSEG8,210

include/poll.h,321
#define POLLIN	POLLIN5,38
#define POLLPRI	POLLPRI6,59
#define POLLHUP	POLLHUP7,81
#define POLLERR	POLLERR8,118
#define POLLOUT	POLLOUT9,152
#define POLLNVAL	POLLNVAL10,174
typedef u32 nfds_t;nfds_t12,197
struct pollfdpollfd14,218
	int	fd;fd16,234
	int	events;events17,243
	int	revents;revents18,256

include/3ds/srv.h,0

include/3ds/font.h,5850
{__anon23cd7ade010813,177
	s8 left;       ///< Horizontal offset to draw the glyph with.left14,179
	u8 glyphWidth; ///< Width of the glyph.glyphWidth15,242
	u8 charWidth;  ///< Width of the character, that is, horizontal distance to advance.charWidth16,283
} charWidthInfo_s;charWidthInfo_s17,369
{__anon23cd7ade020821,440
	u8 cellWidth;    ///< Width of a glyph cell.cellWidth22,442
	u8 cellHeight;   ///< Height of a glyph cell.cellHeight23,488
	u8 baselinePos;  ///< Vertical position of the baseline.baselinePos24,535
	u8 maxCharWidth; ///< Maximum character width.maxCharWidth25,593
	u32 sheetSize; ///< Size in bytes of a texture sheet.sheetSize27,642
	u16 nSheets;   ///< Number of texture sheets.nSheets28,697
	u16 sheetFmt;  ///< GPU texture format (GPU_TEXCOLOR).sheetFmt29,744
	u16 nRows;  ///< Number of glyphs per row per sheet.nRows31,801
	u16 nLines; ///< Number of glyph rows per sheet.nLines32,855
	u16 sheetWidth;  ///< Texture sheet width.sheetWidth34,906
	u16 sheetHeight; ///< Texture sheet height.sheetHeight35,950
	u8* sheetData;   ///< Pointer to texture sheet data.sheetData36,995
} TGLP_s;TGLP_s37,1049
typedef struct tag_CWDH_s CWDH_s;CWDH_s40,1109
struct tag_CWDH_stag_CWDH_s43,1198
	u16 startIndex; ///< First Unicode codepoint the block applies to.startIndex45,1218
	u16 endIndex;   ///< Last Unicode codepoint the block applies to.endIndex46,1286
	CWDH_s* next;   ///< Pointer to the next block.next47,1353
	charWidthInfo_s widths[0]; ///< Table of character width information structures.widths49,1403
{__anon23cd7ade030354,1526
	CMAP_TYPE_DIRECT = 0, ///< Identity mapping.CMAP_TYPE_DIRECT55,1528
	CMAP_TYPE_TABLE = 1,  ///< Mapping using a table.CMAP_TYPE_TABLE56,1574
	CMAP_TYPE_SCAN = 2,   ///< Mapping using a list of mapped characters.CMAP_TYPE_SCAN57,1625
typedef struct tag_CMAP_s CMAP_s;CMAP_s61,1729
struct tag_CMAP_stag_CMAP_s64,1798
	u16 codeBegin;     ///< First Unicode codepoint the block applies to.codeBegin66,1818
	u16 codeEnd;       ///< Last Unicode codepoint the block applies to.codeEnd67,1889
	u16 mappingMethod; ///< Mapping method.mappingMethod68,1959
	u16 reserved;reserved69,2000
	CMAP_s* next;      ///< Pointer to the next map.next70,2015
	{__anon23cd7ade040a73,2073
		u16 indexOffset;   ///< For CMAP_TYPE_DIRECT: index of the first glyph.indexOffset74,2076
		u16 indexTable[0]; ///< For CMAP_TYPE_TABLE: table of glyph indices.indexTable75,2150
		{__anon23cd7ade050878,2270
			u16 nScanEntries; ///< Number of pairs.nScanEntries79,2274
			{__anon23cd7ade060882,2349
				u16 code;       ///< Unicode codepoint.code83,2354
				u16 glyphIndex; ///< Mapped glyph index.glyphIndex84,2398
			} scanEntries[0];scanEntries85,2443
{__anon23cd7ade070892,2524
	u32 signature;   ///< Signature (FINF).signature93,2526
	u32 sectionSize; ///< Section size.sectionSize94,2567
	u8 fontType;                  ///< Font typefontType96,2605
	u8 lineFeed;                  ///< Line feed vertical distance.lineFeed97,2651
	u16 alterCharIndex;           ///< Glyph index of the replacement character.alterCharIndex98,2716
	charWidthInfo_s defaultWidth; ///< Default character width information.defaultWidth99,2794
	u8 encoding;                  ///< Font encoding (?)encoding100,2867
	TGLP_s* tglp; ///< Pointer to texture sheet information.tglp102,2922
	CWDH_s* cwdh; ///< Pointer to the first character width information block.cwdh103,2980
	CMAP_s* cmap; ///< Pointer to the first character map.cmap104,3056
	u8 height;  ///< Font height.height106,3113
	u8 width;   ///< Font width.width107,3144
	u8 ascent;  ///< Font ascent.ascent108,3174
	u8 padding;padding109,3205
} FINF_s;FINF_s110,3218
{__anon23cd7ade0808114,3264
	u32 signature;  ///< Signature (CFNU).signature115,3266
	u16 endianness; ///< Endianness constant (0xFEFF).endianness116,3306
	u16 headerSize; ///< Header size.headerSize117,3358
	u32 version;    ///< Format version.version118,3393
	u32 fileSize;   ///< File size.fileSize119,3431
	u32 nBlocks;    ///< Number of blocks.nBlocks120,3464
	FINF_s finf; ///< Font information.finf122,3505
} CFNT_s;CFNT_s123,3542
{__anon23cd7ade0908127,3603
	int sheetIndex; ///< Texture sheet index to use to render the glyph.sheetIndex128,3605
	float xOffset;  ///< Horizontal offset to draw the glyph width.xOffset129,3675
	float xAdvance; ///< Horizontal distance to advance after drawing the glyph.xAdvance130,3740
	float width;    ///< Glyph width.width131,3818
	{__anon23cd7ade0a08134,3914
		float left, top, right, bottom;left135,3917
		float left, top, right, bottom;top135,3917
		float left, top, right, bottom;right135,3917
		float left, top, right, bottom;bottom135,3917
	} texcoord;texcoord136,3951
	{__anon23cd7ade0b08139,4024
		float left, top, right, bottom;left140,4027
		float left, top, right, bottom;top140,4027
		float left, top, right, bottom;right140,4027
		float left, top, right, bottom;bottom140,4027
	} vtxcoord;vtxcoord141,4061
} fontGlyphPos_s;fontGlyphPos_s142,4074
{__anon23cd7ade0c03146,4139
	GLYPH_POS_CALC_VTXCOORD = BIT(0), ///< Calculates vertex coordinates in addition to texture cooGLYPH_POS_CALC_VTXCOORD147,4141
	GLYPH_POS_AT_BASELINE   = BIT(1), ///< Position the glyph at the baseline instead of at the topGLYPH_POS_AT_BASELINE148,4247
	GLYPH_POS_Y_POINTS_UP   = BIT(2), ///< Indicates that the Y axis points up instead of down.GLYPH_POS_Y_POINTS_UP149,4357
static inline CFNT_s* fontGetSystemFont(void)fontGetSystemFont168,4849
static inline FINF_s* fontGetInfo(CFNT_s* font)fontGetInfo180,5147
static inline TGLP_s* fontGetGlyphInfo(CFNT_s* font)fontGetGlyphInfo191,5415
static inline void* fontGetGlyphSheetTex(CFNT_s* font, int sheetIndex)fontGetGlyphSheetTex203,5769

include/3ds/archive.h,503
#define ARCHIVE_DIRITER_MAGIC ARCHIVE_DIRITER_MAGIC12,146
{__anon07dac2e9010816,245
  u32               magic;          /*! "arch" */magic17,247
  Handle            fd;             /*! CTRU handle */fd18,297
  ssize_t           index;          /*! Current entry index */index19,352
  size_t            size;           /*! Current batch size */size20,415
  FS_DirectoryEntry entry_data[32]; /*! Temporary storage for reading entries */entry_data21,477
} archive_dir_t;archive_dir_t22,558

include/3ds/mii.h,4418
{__anon5ea846e6010813,181
	u8 magic;     ///< Always 3?magic14,183
	{__anon5ea846e6020818,239
		bool allow_copying : 1;   ///< True if copying is allowedallow_copying19,242
		bool is_private_name : 1; ///< Private name?is_private_name20,302
		u8 region_lock : 2;       ///< Region lock (0=no lock, 1=JPN, 2=USA, 3=EUR)region_lock21,349
		u8 char_set : 2;          ///< Character set (0=JPN+USA+EUR, 1=CHN, 2=KOR, 3=TWN)char_set22,427
	} mii_options;mii_options23,511
	{__anon5ea846e6030827,583
		u8 page_index : 4;   ///< Page index of Miipage_index28,586
		u8 slot_index : 4;   ///< Slot offset of Mii on its Pageslot_index29,632
	} mii_pos;mii_pos30,691
	{__anon5ea846e6040834,734
		u8 unknown0 : 4;        ///< Mabye padding (always seems to be 0)?unknown035,737
		u8 origin_console : 3;  ///< Console that the Mii was created on (1=WII, 2=DSI, 3=3DS)origin_console36,806
	} console_identity;console_identity37,895
	u64 system_id;   ///< Identifies the system that the Mii was created on (Determines pants)system_id39,917
	u32 mii_id;      ///< ID of Miimii_id40,1009
	u8 mac[6];       ///< Creator's system's full MAC addressmac41,1042
	u8 pad[2];       ///< Paddingpad42,1101
	struct {__anon5ea846e6050845,1150
		bool sex : 1;         ///< Sex of Mii (False=Male, True=Female)sex46,1160
		u16 bday_month : 4;   ///< Month of Mii's birthdaybday_month47,1226
		u16 bday_day : 5;     ///< Day of Mii's birthdaybday_day48,1279
		u16 shirt_color : 4;  ///< Color of Mii's shirtshirt_color49,1330
		bool favorite : 1;    ///< Whether the Mii is one of your 10 favorite Mii'sfavorite50,1380
	} mii_details;mii_details51,1458
	u16 mii_name[10];  ///< Name of Mii (Encoded using UTF16)mii_name53,1475
	u8 height;         ///< How tall the Mii isheight54,1534
	u8 width;          ///< How wide the Mii iswidth55,1579
	{__anon5ea846e6060859,1649
		bool disable_sharing : 1; ///< Whether or not Sharing of the Mii is alloweddisable_sharing60,1652
		u8 shape : 4;             ///< Face shapeshape61,1730
		u8 skinColor : 3;         ///< Color of skinskinColor62,1774
	} face_style;face_style63,1821
	{__anon5ea846e6070867,1863
		u8 wrinkles : 4;wrinkles68,1866
		u8 makeup : 4;makeup69,1885
	} face_details;face_details70,1902
	u8 hair_style;hair_style72,1920
	{__anon5ea846e6080876,1963
		u8 color : 3;color77,1966
		bool flip : 1;flip78,1982
	} hair_details;hair_details79,1999
	{__anon5ea846e6090883,2042
		u32 style : 6;style84,2045
		u32 color : 3;color85,2062
		u32 scale : 4;scale86,2079
		u32 yscale : 3;yscale87,2096
		u32 rotation : 5;rotation88,2114
		u32 xspacing : 4;xspacing89,2134
		u32 yposition : 5;yposition90,2154
	} eye_details;eye_details91,2175
	{__anon5ea846e60a0895,2221
		u32 style : 5;style96,2224
		u32 color : 3;color97,2241
		u32 scale : 4;scale98,2258
		u32 yscale : 3;yscale99,2275
		u32 pad : 1;pad100,2293
		u32 rotation : 5;rotation101,2308
		u32 xspacing : 4;xspacing102,2328
		u32 yposition : 5;yposition103,2348
	} eyebrow_details;eyebrow_details104,2369
	{__anon5ea846e60b08108,2416
		u16 style : 5;style109,2419
		u16 scale : 4;scale110,2436
		u16 yposition : 5;yposition111,2453
	} nose_details;nose_details112,2474
	{__anon5ea846e60c08116,2519
		u16 style : 6;style117,2522
		u16 color : 3;color118,2539
		u16 scale : 4;scale119,2556
		u16 yscale : 3;yscale120,2573
	} mouth_details;mouth_details121,2591
	{__anon5ea846e60d08125,2640
		u16 mouth_yposition : 5;mouth_yposition126,2643
		u16 mustach_style : 3;mustach_style127,2670
		u16 pad : 2;pad128,2695
	} mustache_details;mustache_details129,2710
	{__anon5ea846e60e08133,2759
		u16 style : 3;style134,2762
		u16 color : 3;color135,2779
		u16 scale : 4;scale136,2796
		u16 ypos : 5;ypos137,2813
	} beard_details;beard_details138,2829
	{__anon5ea846e60f08142,2877
		u16 style : 4;style143,2880
		u16 color : 3;color144,2897
		u16 scale : 4;scale145,2914
		u16 ypos : 5;ypos146,2931
	} glasses_details;glasses_details147,2947
	{__anon5ea846e61008151,2995
		bool enable : 1;enable152,2998
		u16 scale : 5;scale153,3017
		u16 xpos : 5;xpos154,3034
		u16 ypos : 5;ypos155,3050
	} mole_details;mole_details156,3066
	u16 author_name[10];    ///< Name of Mii's author (Encoded using UTF16)author_name158,3084
} PACKED MiiData;MiiData159,3157

include/3ds/types.h,2267
#define U64_MAX	U64_MAX12,165
#define SSIZE_MAX SSIZE_MAX17,272
typedef uint8_t u8;   ///<  8-bit unsigned integeru821,323
typedef uint16_t u16; ///< 16-bit unsigned integeru1622,374
typedef uint32_t u32; ///< 32-bit unsigned integeru3223,425
typedef uint64_t u64; ///< 64-bit unsigned integeru6424,476
typedef int8_t s8;   ///<  8-bit signed integers826,528
typedef int16_t s16; ///< 16-bit signed integers1627,576
typedef int32_t s32; ///< 32-bit signed integers3228,624
typedef int64_t s64; ///< 64-bit signed integers6429,672
typedef volatile u8 vu8;   ///<  8-bit volatile unsigned integer.vu831,721
typedef volatile u16 vu16; ///< 16-bit volatile unsigned integer.vu1632,787
typedef volatile u32 vu32; ///< 32-bit volatile unsigned integer.vu3233,853
typedef volatile u64 vu64; ///< 64-bit volatile unsigned integer.vu6434,919
typedef volatile s8 vs8;   ///<  8-bit volatile signed integer.vs836,986
typedef volatile s16 vs16; ///< 16-bit volatile signed integer.vs1637,1050
typedef volatile s32 vs32; ///< 32-bit volatile signed integer.vs3238,1114
typedef volatile s64 vs64; ///< 64-bit volatile signed integer.vs6439,1178
typedef u32 Handle;                 ///< Resource handle.Handle41,1243
typedef s32 Result;                 ///< Function result.Result42,1301
typedef void (*ThreadFunc)(void *); ///< Thread entrypoint function.ThreadFunc43,1359
typedef void (*voidfn)(void);voidfn44,1428
#define BIT(BIT47,1500
#define ALIGN(ALIGN50,1631
#define PACKED PACKED52,1751
#define DEPRECATED DEPRECATED56,1862
#define DEPRECATEDDEPRECATED59,1952
typedef struct {__anonea9cd53c010863,2020
	u32 r[13]; ///< r0-r12.r64,2037
	u32 sp;    ///< sp.sp65,2062
	u32 lr;    ///< lr.lr66,2083
	u32 pc;    ///< pc. May need to be adjusted.pc67,2104
	u32 cpsr;  ///< cpsr.cpsr68,2150
} CpuRegisters;CpuRegisters69,2173
typedef struct {__anonea9cd53c020872,2231
	union {__anonea9cd53c030a73,2248
		struct PACKED { double d[16]; }; ///< d0-d15.PACKED74,2257
		struct PACKED { double d[16]; }; ///< d0-d15.d74,2257
		float  s[32];                    ///< s0-s31.s75,2305
	u32 fpscr;        ///< fpscr.fpscr77,2357
	u32 fpexc;        ///< fpexc.fpexc78,2388
} FpuRegisters;FpuRegisters79,2419

include/3ds/gdbhio.h,172
#define GDBHIO_STDIN_FILENO GDBHIO_STDIN_FILENO12,181
#define GDBHIO_STDOUT_FILENO GDBHIO_STDOUT_FILENO13,214
#define GDBHIO_STDERR_FILENO GDBHIO_STDERR_FILENO14,247

include/3ds/util/utf.h,0

include/3ds/util/rbtree.h,838
#define rbtree_item(rbtree_item11,138
typedef struct rbtree      rbtree_t;      ///< rbtree type.rbtree_t14,231
typedef struct rbtree_node rbtree_node_t; ///< rbtree node type.rbtree_node_t15,291
typedef void (*rbtree_node_destructor_t)(rbtree_node_t *Node);      ///< rbtree node destructor.rbtree_node_destructor_t17,357
typedef int  (*rbtree_node_comparator_t)(const rbtree_node_t *lhs,rbtree_node_comparator_t18,454
struct rbtree_noderbtree_node22,639
  uintptr_t      parent_color; ///< Parent color.parent_color24,660
  rbtree_node_t  *child[2];    ///< Node children.child25,710
struct rbtreerbtree29,780
  rbtree_node_t            *root;      ///< Root node.root31,796
  rbtree_node_comparator_t comparator; ///< Node comparator.comparator32,851
  size_t                   size;       ///< Size.size33,912

include/3ds/util/decompress.h,1998
{__anond6a26d89010313,189
  DECOMPRESS_DUMMY = 0x00, ///< Dummy compressionDECOMPRESS_DUMMY14,191
  DECOMPRESS_LZSS  = 0x10, ///< LZSS/LZ10 compressionDECOMPRESS_LZSS15,241
  DECOMPRESS_LZ10  = 0x10, ///< LZSS/LZ10 compressionDECOMPRESS_LZ1016,295
  DECOMPRESS_LZ11  = 0x11, ///< LZ11 compressionDECOMPRESS_LZ1117,349
  DECOMPRESS_HUFF1 = 0x21, ///< Huffman compression with 1-bit dataDECOMPRESS_HUFF118,398
  DECOMPRESS_HUFF2 = 0x22, ///< Huffman compression with 2-bit dataDECOMPRESS_HUFF219,466
  DECOMPRESS_HUFF3 = 0x23, ///< Huffman compression with 3-bit dataDECOMPRESS_HUFF320,534
  DECOMPRESS_HUFF4 = 0x24, ///< Huffman compression with 4-bit dataDECOMPRESS_HUFF421,602
  DECOMPRESS_HUFF5 = 0x25, ///< Huffman compression with 5-bit dataDECOMPRESS_HUFF522,670
  DECOMPRESS_HUFF6 = 0x26, ///< Huffman compression with 6-bit dataDECOMPRESS_HUFF623,738
  DECOMPRESS_HUFF7 = 0x27, ///< Huffman compression with 7-bit dataDECOMPRESS_HUFF724,806
  DECOMPRESS_HUFF8 = 0x28, ///< Huffman compression with 8-bit dataDECOMPRESS_HUFF825,874
  DECOMPRESS_HUFF  = 0x28, ///< Huffman compression with 8-bit dataDECOMPRESS_HUFF26,942
  DECOMPRESS_RLE   = 0x30, ///< Run-length encoding compressionDECOMPRESS_RLE27,1010
} decompressType;decompressType28,1074
{__anond6a26d89020832,1133
  void   *data; ///< I/O bufferdata33,1135
  size_t size;  ///< Buffer sizesize34,1167
} decompressIOVec;decompressIOVec35,1200
typedef ssize_t (*decompressCallback)(void *userdata, void *buffer,decompressCallback38,1248
decompress(void *output, size_t size, decompressCallback callback,decompress100,3621
decompress_LZSS(void *output, size_t size, decompressCallback callback,decompress_LZSS131,4726
decompress_LZ11(void *output, size_t size, decompressCallback callback,decompress_LZ11162,5836
decompress_Huff(size_t bits, void *output, size_t size,decompress_Huff195,7083
decompress_RLE(void *output, size_t size, decompressCallback callback,decompress_RLE226,8239

include/3ds/console.h,3401
#define CONSOLE_ESC(CONSOLE_ESC26,453
#define CONSOLE_RESET CONSOLE_RESET27,487
#define CONSOLE_BLACK CONSOLE_BLACK28,527
#define CONSOLE_RED CONSOLE_RED29,568
#define CONSOLE_GREEN CONSOLE_GREEN30,611
#define CONSOLE_YELLOW CONSOLE_YELLOW31,654
#define CONSOLE_BLUE CONSOLE_BLUE32,697
#define CONSOLE_MAGENTA CONSOLE_MAGENTA33,740
#define CONSOLE_CYAN CONSOLE_CYAN34,783
#define CONSOLE_WHITE CONSOLE_WHITE35,826
typedef bool(*ConsolePrint)(void* con, int c);ConsolePrint38,911
typedef struct ConsoleFontConsoleFont41,994
	u8* gfx;         ///< A pointer to the font graphicsgfx43,1023
	u16 asciiOffset; ///< Offset to the first valid character in the font tableasciiOffset44,1077
	u16 numChars;    ///< Number of characters in the font graphicsnumChars45,1154
}ConsoleFont;ConsoleFont46,1219
typedef struct PrintConsolePrintConsole76,1880
	ConsoleFont font;        ///< Font of the consolefont78,1910
	u16 *frameBuffer;        ///< Framebuffer addressframeBuffer80,1962
	int cursorX;             ///< Current X location of the cursor (as a tile offset by default)cursorX82,2014
	int cursorY;             ///< Current Y location of the cursor (as a tile offset by default)cursorY83,2108
	int prevCursorX;         ///< Internal stateprevCursorX85,2203
	int prevCursorY;         ///< Internal stateprevCursorY86,2249
	int consoleWidth;        ///< Width of the console hardware layer in charactersconsoleWidth88,2296
	int consoleHeight;       ///< Height of the console hardware layer in charactersconsoleHeight89,2377
	int windowX;             ///< Window X location in characters (not implemented)windowX91,2460
	int windowY;             ///< Window Y location in characters (not implemented)windowY92,2541
	int windowWidth;         ///< Window width in characters (not implemented)windowWidth93,2622
	int windowHeight;        ///< Window height in characters (not implemented)windowHeight94,2698
	int tabSize;             ///< Size of a tabtabSize96,2776
	int fg;                  ///< Foreground colorfg97,2821
	int bg;                  ///< Background colorbg98,2869
	int flags;               ///< Reverse/bright flagsflags99,2917
	ConsolePrint PrintChar;  ///< Callback for printing a character. Should return true if it has hPrintChar101,2970
	bool consoleInitialised; ///< True if the console is initializedconsoleInitialised103,3155
}PrintConsole;PrintConsole104,3221
#define CONSOLE_COLOR_BOLD	CONSOLE_COLOR_BOLD106,3237
#define CONSOLE_COLOR_FAINT	CONSOLE_COLOR_FAINT107,3286
#define CONSOLE_ITALIC	CONSOLE_ITALIC108,3337
#define CONSOLE_UNDERLINE	CONSOLE_UNDERLINE109,3385
#define CONSOLE_BLINK_SLOW	CONSOLE_BLINK_SLOW110,3439
#define CONSOLE_BLINK_FAST	CONSOLE_BLINK_FAST111,3497
#define CONSOLE_COLOR_REVERSE	CONSOLE_COLOR_REVERSE112,3555
#define CONSOLE_CONCEAL	CONSOLE_CONCEAL113,3617
#define CONSOLE_CROSSED_OUT	CONSOLE_CROSSED_OUT114,3669
typedef enum {__anon94de98ba0103117,3774
	debugDevice_NULL,    ///< Swallows prints to stderrdebugDevice_NULL118,3789
	debugDevice_SVC,     ///< Outputs stderr debug statements using svcOutputDebugString, which candebugDevice_SVC119,3842
	debugDevice_CONSOLE, ///< Directs stderr debug statements to 3DS console windowdebugDevice_CONSOLE120,3981
	debugDevice_3DMOO = debugDevice_SVC,debugDevice_3DMOO121,4062
} debugDevice;debugDevice122,4100

include/3ds/synchronization.h,1639
typedef _LOCK_T LightLock;LightLock10,152
typedef _LOCK_RECURSIVE_T RecursiveLock;RecursiveLock13,202
typedef s32 CondVar;CondVar16,270
{__anon8b5b1599010820,326
	s32 state;      ///< State of the event: -2=cleared sticky, -1=cleared oneshot, 0=signaled onesstate21,328
	LightLock lock; ///< Lock used for sticky timer operationlock22,447
} LightEvent;LightEvent23,506
{__anon8b5b1599020827,559
	s32 current_count;      ///< The current release count of the semaphorecurrent_count28,561
	s16 num_threads_acq;    ///< Number of threads concurrently acquiring the semaphorenum_threads_acq29,634
	s16 max_count;          ///< The maximum release count of the semaphoremax_count30,719
} LightSemaphore;LightSemaphore31,792
static inline void __dsb(void)__dsb34,866
static inline void __dmb(void)__dmb40,1033
static inline void __clrex(void)__clrex46,1186
static inline s32 __ldrex(s32* addr)__ldrex56,1399
static inline bool __strex(s32* addr, s32 val)__strex69,1729
static inline u16 __ldrexh(u16* addr)__ldrexh81,2050
static inline bool __strexh(u16* addr, u16 val)__strexh94,2383
static inline u8 __ldrexb(u8* addr)__ldrexb106,2706
static inline bool __strexb(u8* addr, u8 val)__strexb119,3036
#define AtomicIncrement(AtomicIncrement127,3274
#define AtomicDecrement(AtomicDecrement129,3404
#define AtomicPostIncrement(AtomicPostIncrement131,3535
#define AtomicPostDecrement(AtomicPostDecrement133,3670
#define AtomicSwap(AtomicSwap135,3795
static inline void CondVar_Signal(CondVar* cv)CondVar_Signal256,7912
static inline void CondVar_Broadcast(CondVar* cv)CondVar_Broadcast265,8108

include/3ds/applets/swkbd.h,9698
{__anona3ec410a010310,131
	SWKBD_TYPE_NORMAL = 0, ///< Normal keyboard with several pages (QWERTY/accents/symbol/mobile)SWKBD_TYPE_NORMAL11,133
	SWKBD_TYPE_QWERTY,     ///< QWERTY keyboard only.SWKBD_TYPE_QWERTY12,228
	SWKBD_TYPE_NUMPAD,     ///< Number pad.SWKBD_TYPE_NUMPAD13,279
	SWKBD_TYPE_WESTERN,    ///< On JPN systems, a text keyboard without Japanese input capabilitiesSWKBD_TYPE_WESTERN14,320
} SwkbdType;SwkbdType15,455
{__anona3ec410a020319,508
	SWKBD_ANYTHING = 0,      ///< All inputs are accepted.SWKBD_ANYTHING20,510
	SWKBD_NOTEMPTY,          ///< Empty inputs are not accepted.SWKBD_NOTEMPTY21,566
	SWKBD_NOTEMPTY_NOTBLANK, ///< Empty or blank inputs (consisting solely of whitespace) are not aSWKBD_NOTEMPTY_NOTBLANK22,628
	SWKBD_NOTBLANK_NOTEMPTY = SWKBD_NOTEMPTY_NOTBLANK,SWKBD_NOTBLANK_NOTEMPTY23,733
	SWKBD_NOTBLANK,          ///< Blank inputs (consisting solely of whitespace) are not accepted, SWKBD_NOTBLANK24,785
	SWKBD_FIXEDLEN,          ///< The input must have a fixed length (specified by maxTextLength inSWKBD_FIXEDLEN25,903
} SwkbdValidInput;SwkbdValidInput26,1012
{__anona3ec410a030330,1074
	SWKBD_BUTTON_LEFT = 0, ///< Left button (usually Cancel)SWKBD_BUTTON_LEFT31,1076
	SWKBD_BUTTON_MIDDLE,   ///< Middle button (usually I Forgot)SWKBD_BUTTON_MIDDLE32,1134
	SWKBD_BUTTON_RIGHT,    ///< Right button (usually OK)SWKBD_BUTTON_RIGHT33,1196
	SWKBD_BUTTON_CONFIRM = SWKBD_BUTTON_RIGHT,SWKBD_BUTTON_CONFIRM34,1251
	SWKBD_BUTTON_NONE,     ///< No button (returned by swkbdInputText in special cases)SWKBD_BUTTON_NONE35,1295
} SwkbdButton;SwkbdButton36,1380
{__anona3ec410a040340,1438
	SWKBD_PASSWORD_NONE = 0,   ///< Characters are not concealed.SWKBD_PASSWORD_NONE41,1440
	SWKBD_PASSWORD_HIDE,       ///< Characters are concealed immediately.SWKBD_PASSWORD_HIDE42,1503
	SWKBD_PASSWORD_HIDE_DELAY, ///< Characters are concealed a second after they've been typed.SWKBD_PASSWORD_HIDE_DELAY43,1574
} SwkbdPasswordMode;SwkbdPasswordMode44,1667
{__anona3ec410a050348,1730
	SWKBD_FILTER_DIGITS    = BIT(0), ///< Disallow the use of more than a certain number of digits SWKBD_FILTER_DIGITS49,1732
	SWKBD_FILTER_AT        = BIT(1), ///< Disallow the use of the @ sign.SWKBD_FILTER_AT50,1840
	SWKBD_FILTER_PERCENT   = BIT(2), ///< Disallow the use of the % sign.SWKBD_FILTER_PERCENT51,1911
	SWKBD_FILTER_BACKSLASH = BIT(3), ///< Disallow the use of the \ sign.SWKBD_FILTER_BACKSLASH52,1982
	SWKBD_FILTER_PROFANITY = BIT(4), ///< Disallow profanity using Nintendo's profanity filter.SWKBD_FILTER_PROFANITY53,2053
	SWKBD_FILTER_CALLBACK  = BIT(5), ///< Use a callback in order to check the input.SWKBD_FILTER_CALLBACK54,2146
{__anona3ec410a060359,2261
	SWKBD_PARENTAL          = BIT(0), ///< Parental PIN mode.SWKBD_PARENTAL60,2263
	SWKBD_DARKEN_TOP_SCREEN = BIT(1), ///< Darken the top screen when the keyboard is shown.SWKBD_DARKEN_TOP_SCREEN61,2322
	SWKBD_PREDICTIVE_INPUT  = BIT(2), ///< Enable predictive input (necessary for Kanji input in JPSWKBD_PREDICTIVE_INPUT62,2412
	SWKBD_MULTILINE         = BIT(3), ///< Enable multiline input.SWKBD_MULTILINE63,2520
	SWKBD_FIXED_WIDTH       = BIT(4), ///< Enable fixed-width mode.SWKBD_FIXED_WIDTH64,2584
	SWKBD_ALLOW_HOME        = BIT(5), ///< Allow the usage of the HOME button.SWKBD_ALLOW_HOME65,2649
	SWKBD_ALLOW_RESET       = BIT(6), ///< Allow the usage of a software-reset combination.SWKBD_ALLOW_RESET66,2725
	SWKBD_ALLOW_POWER       = BIT(7), ///< Allow the usage of the POWER button.SWKBD_ALLOW_POWER67,2814
	SWKBD_DEFAULT_QWERTY    = BIT(9), ///< Default to the QWERTY page when the keyboard is shown.SWKBD_DEFAULT_QWERTY68,2891
{__anona3ec410a070373,3047
	SWKBD_CALLBACK_OK = 0,   ///< Specifies that the input is valid.SWKBD_CALLBACK_OK74,3049
	SWKBD_CALLBACK_CLOSE,    ///< Displays an error message, then closes the keyboard.SWKBD_CALLBACK_CLOSE75,3115
	SWKBD_CALLBACK_CONTINUE, ///< Displays an error message and continues displaying the keyboard.SWKBD_CALLBACK_CONTINUE76,3199
} SwkbdCallbackResult;SwkbdCallbackResult77,3295
{__anona3ec410a080381,3360
	SWKBD_NONE          = -1, ///< Dummy/unused.SWKBD_NONE82,3362
	SWKBD_INVALID_INPUT = -2, ///< Invalid parameters to swkbd.SWKBD_INVALID_INPUT83,3408
	SWKBD_OUTOFMEM      = -3, ///< Out of memory.SWKBD_OUTOFMEM84,3469
	SWKBD_D0_CLICK = 0, ///< The button was clicked in 1-button dialogs.SWKBD_D0_CLICK86,3517
	SWKBD_D1_CLICK0,    ///< The left button was clicked in 2-button dialogs.SWKBD_D1_CLICK087,3587
	SWKBD_D1_CLICK1,    ///< The right button was clicked in 2-button dialogs.SWKBD_D1_CLICK188,3662
	SWKBD_D2_CLICK0,    ///< The left button was clicked in 3-button dialogs.SWKBD_D2_CLICK089,3738
	SWKBD_D2_CLICK1,    ///< The middle button was clicked in 3-button dialogs.SWKBD_D2_CLICK190,3813
	SWKBD_D2_CLICK2,    ///< The right button was clicked in 3-button dialogs.SWKBD_D2_CLICK291,3890
	SWKBD_HOMEPRESSED = 10, ///< The HOME button was pressed.SWKBD_HOMEPRESSED93,3967
	SWKBD_RESETPRESSED,     ///< The soft-reset key combination was pressed.SWKBD_RESETPRESSED94,4026
	SWKBD_POWERPRESSED,     ///< The POWER button was pressed.SWKBD_POWERPRESSED95,4100
	SWKBD_PARENTAL_OK = 20, ///< The parental PIN was verified successfully.SWKBD_PARENTAL_OK97,4161
	SWKBD_PARENTAL_FAIL,    ///< The parental PIN was incorrect.SWKBD_PARENTAL_FAIL98,4235
	SWKBD_BANNED_INPUT = 30, ///< The filter callback returned SWKBD_CALLBACK_CLOSE.SWKBD_BANNED_INPUT100,4298
} SwkbdResult;SwkbdResult101,4380
#define SWKBD_MAX_WORD_LEN SWKBD_MAX_WORD_LEN104,4454
#define SWKBD_MAX_BUTTON_TEXT_LEN SWKBD_MAX_BUTTON_TEXT_LEN106,4546
#define SWKBD_MAX_HINT_TEXT_LEN SWKBD_MAX_HINT_TEXT_LEN108,4636
#define SWKBD_MAX_CALLBACK_MSG_LEN SWKBD_MAX_CALLBACK_MSG_LEN110,4746
{__anona3ec410a0908114,4852
	u16 reading[SWKBD_MAX_WORD_LEN+1]; ///< Reading of the word (that is, the string that needs to reading115,4854
	u16 word[SWKBD_MAX_WORD_LEN+1];    ///< Spelling of the word.word116,4961
	u8 language;                       ///< Language the word applies to.language117,5024
	bool all_languages;                ///< Specifies if the word applies to all languages.all_languages118,5095
} SwkbdDictWord;SwkbdDictWord119,5184
typedef SwkbdCallbackResult (* SwkbdCallbackFn)(void* user, const char** ppMessage, const char* SwkbdCallbackFn122,5241
typedef struct { u32 data[0x11]; } SwkbdStatusData;__anona3ec410a0a08124,5386
typedef struct { u32 data[0x11]; } SwkbdStatusData;data124,5386
typedef struct { u32 data[0x11]; } SwkbdStatusData;SwkbdStatusData124,5386
typedef struct { u32 data[0x291B]; } SwkbdLearningData;__anona3ec410a0b08126,5483
typedef struct { u32 data[0x291B]; } SwkbdLearningData;data126,5483
typedef struct { u32 data[0x291B]; } SwkbdLearningData;SwkbdLearningData126,5483
{__anona3ec410a0c08130,5623
	const char* initial_text;initial_text131,5625
	const SwkbdDictWord* dict;dict132,5652
	SwkbdStatusData* status_data;status_data133,5680
	SwkbdLearningData* learning_data;learning_data134,5711
	SwkbdCallbackFn callback;callback135,5746
	void* callback_user;callback_user136,5773
} SwkbdExtra;SwkbdExtra137,5795
{__anona3ec410a0d08141,5903
	int type;type142,5905
	int num_buttons_m1;num_buttons_m1143,5916
	int valid_input;valid_input144,5937
	int password_mode;password_mode145,5955
	int is_parental_screen;is_parental_screen146,5975
	int darken_top_screen;darken_top_screen147,6000
	u32 filter_flags;filter_flags148,6024
	u32 save_state_flags;save_state_flags149,6043
	u16 max_text_len;max_text_len150,6066
	u16 dict_word_count;dict_word_count151,6085
	u16 max_digits;max_digits152,6107
	u16 button_text[3][SWKBD_MAX_BUTTON_TEXT_LEN+1];button_text153,6124
	u16 numpad_keys[2];numpad_keys154,6174
	u16 hint_text[SWKBD_MAX_HINT_TEXT_LEN+1];hint_text155,6195
	bool predictive_input;predictive_input156,6238
	bool multiline;multiline157,6262
	bool fixed_width;fixed_width158,6279
	bool allow_home;allow_home159,6298
	bool allow_reset;allow_reset160,6316
	bool allow_power;allow_power161,6335
	bool unknown; // XX: what is this supposed to do? "communicateWithOtherRegions"unknown162,6354
	bool default_qwerty;default_qwerty163,6435
	bool button_submits_text[4];button_submits_text164,6457
	u16 language; // XX: not working? supposedly 0 = use system language, CFG_Language+1 = pick lanlanguage165,6487
	int initial_text_offset;initial_text_offset166,6589
	int dict_offset;dict_offset167,6615
	int initial_status_offset;initial_status_offset168,6633
	int initial_learning_offset;initial_learning_offset169,6661
	size_t shared_memory_size;shared_memory_size170,6691
	u32 version;version171,6719
	SwkbdResult result;result172,6733
	int status_offset;status_offset173,6754
	int learning_offset;learning_offset174,6774
	int text_offset;text_offset175,6796
	u16 text_length;text_length176,6814
	int callback_result;callback_result177,6832
	u16 callback_msg[SWKBD_MAX_CALLBACK_MSG_LEN+1];callback_msg178,6854
	bool skip_at_check;skip_at_check179,6903
	{__anona3ec410a0e0a181,6931
		u8 reserved[171];reserved182,6934
		SwkbdExtra extra;extra183,6954
} SwkbdState;SwkbdState185,6978
static inline void swkbdSetPasswordMode(SwkbdState* swkbd, SwkbdPasswordMode mode)swkbdSetPasswordMode201,7540
static inline void swkbdSetValidation(SwkbdState* swkbd, SwkbdValidInput validInput, u32 filterFswkbdSetValidation213,8063
static inline void swkbdSetNumpadKeys(SwkbdState* swkbd, int left, int right)swkbdSetNumpadKeys226,8659
static inline SwkbdResult swkbdGetResult(SwkbdState* swkbd)swkbdGetResult318,12888

include/3ds/applets/miiselector.h,2911
#define MIISELECTOR_MAGIC MIISELECTOR_MAGIC11,177
#define MIISELECTOR_TITLE_LEN MIISELECTOR_TITLE_LEN14,297
#define MIISELECTOR_GUESTMII_SLOTS MIISELECTOR_GUESTMII_SLOTS17,380
#define MIISELECTOR_USERMII_SLOTS MIISELECTOR_USERMII_SLOTS20,474
{__anond570282f010824,571
	u8 enable_cancel_button;          ///< Enables canceling of selection if nonzero.enable_cancel_button25,573
	u8 enable_selecting_guests;       ///< Makes Guets Miis selectable if nonzero.enable_selecting_guests26,656
	u8 show_on_top_screen;            ///< Shows applet on top screen if nonzero,show_on_top_screen27,736
	u8 _unk0x3[5];                    ///< @private_unk0x329,895
	u16 title[MIISELECTOR_TITLE_LEN]; ///< UTF16-LE string displayed at the top of the applet. Iftitle30,944
	u8 _unk0x88[4];                   ///< @private_unk0x8832,1134
	u8 show_guest_page;               ///< If nonzero, the applet shows a page with Guestshow_guest_page33,1183
	u8 _unk0x8D[3];                   ///< @private_unk0x8D35,1326
	u32 initial_index;                ///< Index of the initially selected Mii. Ifinitial_index36,1375
	u8 mii_guest_whitelist[MIISELECTOR_GUESTMII_SLOTS];   ///< Each byte set to a nonzero valuemii_guest_whitelist40,1684
	u8 mii_whitelist[MIISELECTOR_USERMII_SLOTS];   ///< Each byte set to a nonzero value enablesmii_whitelist43,1962
	u16 _unk0xFE;                                  ///< @private_unk0xFE46,2218
	u32 magic; ///< Will be set to @ref MIISELECTOR_MAGIC before launching themagic47,2280
} MiiSelectorConf;MiiSelectorConf49,2381
#define MIISELECTOR_GUESTMII_NAME_LEN MIISELECTOR_GUESTMII_NAME_LEN52,2457
{__anond570282f020856,2548
	u32 no_mii_selected;                ///< 0 if a Mii was selected, 1 if the selection wasno_mii_selected57,2550
	u32 guest_mii_was_selected;         ///< 1 if a Guest Mii was selected, 0 otherwise.guest_mii_was_selected59,2692
	u32 guest_mii_index;                ///< Index of the selected Guest Mii,guest_mii_index60,2778
	MiiData mii;                        ///< Data of selected Mii.mii62,2932
	u16 _pad0x68;                       ///< @private_pad0x6863,2996
	u16 checksum;                       ///< Checksum of the returned Mii data.checksum64,3047
	u16 guest_mii_name[MIISELECTOR_GUESTMII_NAME_LEN]; ///< Localized name of a Guest Mii,guest_mii_name68,3327
} MiiSelectorReturn;MiiSelectorReturn71,3586
{__anond570282f030375,3634
	MIISELECTOR_CANCEL     = BIT(0), ///< Show the cancel buttonMIISELECTOR_CANCEL76,3636
	MIISELECTOR_GUESTS     = BIT(1), ///< Make Guets Miis selectableMIISELECTOR_GUESTS77,3698
	MIISELECTOR_TOP        = BIT(2), ///< Show AppletEd on top screenMIISELECTOR_TOP78,3764
	MIISELECTOR_GUESTSTART = BIT(3), ///< Start on guest pageMIISELECTOR_GUESTSTART79,3831
static inline void miiSelectorSetInitialIndex(MiiSelectorConf *conf, u32 index)miiSelectorSetInitialIndex155,6354

include/3ds/applets/error.h,2401
{__anon63192b5901039,92
	ERROR_LANGUAGE_FLAG = 0x100,    ///<??-Unknown flagERROR_LANGUAGE_FLAG10,94
	ERROR_WORD_WRAP_FLAG = 0x200    ///<??-Unknown flagERROR_WORD_WRAP_FLAG11,147
{__anon63192b59020318,259
	ERROR_CODE = 0,						///< Displays the infrastructure communications-related error message corrERROR_CODE19,261
	ERROR_TEXT,						///< Displays text passed to this applet.ERROR_TEXT20,386
	ERROR_EULA,						///< Displays the EULAERROR_EULA21,446
	ERROR_TYPE_EULA_FIRST_BOOT,				///< Use prohibited.ERROR_TYPE_EULA_FIRST_BOOT22,487
	ERROR_TYPE_EULA_DRAW_ONLY,				///< Use prohibited.ERROR_TYPE_EULA_DRAW_ONLY23,540
	ERROR_TYPE_AGREE,					///< Use prohibited.ERROR_TYPE_AGREE24,592
	ERROR_CODE_LANGUAGE = ERROR_CODE | ERROR_LANGUAGE_FLAG,	///< Displays a network error message iERROR_CODE_LANGUAGE25,636
	ERROR_TEXT_LANGUAGE = ERROR_TEXT | ERROR_LANGUAGE_FLAG,	///< Displays text passed to this appleERROR_TEXT_LANGUAGE26,756
	ERROR_EULA_LANGUAGE = ERROR_EULA | ERROR_LANGUAGE_FLAG,	///< Displays EULA in a specified languERROR_EULA_LANGUAGE27,879
	ERROR_TEXT_WORD_WRAP = ERROR_TEXT | ERROR_WORD_WRAP_FLAG,///< Displays the custom error messageERROR_TEXT_WORD_WRAP28,980
	ERROR_TEXT_LANGUAGE_WORD_WRAP = ERROR_TEXT | ERROR_LANGUAGE_FLAG | ERROR_WORD_WRAP_FLAG	///< DiERROR_TEXT_LANGUAGE_WORD_WRAP29,1128
}errorType;errorType30,1316
{__anon63192b59030335,1407
	ERROR_NORMAL = 0,    ERROR_NORMAL36,1409
	ERROR_STEREOERROR_STEREO37,1432
}errorScreenFlag;errorScreenFlag38,1446
{__anon63192b59040343,1546
	ERROR_UNKNOWN = -1,       ERROR_UNKNOWN44,1548
	ERROR_NONE    = 0,        ERROR_NONE45,1576
	ERROR_SUCCESS,            ERROR_SUCCESS46,1604
	ERROR_NOT_SUPPORTED,      ERROR_NOT_SUPPORTED47,1632
	ERROR_HOME_BUTTON = 10,   ERROR_HOME_BUTTON48,1660
	ERROR_SOFTWARE_RESET,     ERROR_SOFTWARE_RESET49,1688
	ERROR_POWER_BUTTON     ERROR_POWER_BUTTON50,1716
}errorReturnCode;errorReturnCode51,1741
{__anon63192b59050856,1851
	errorType type;type57,1853
	int errorCode;errorCode58,1870
	errorScreenFlag upperScreenFlag;upperScreenFlag59,1886
	u16 useLanguage;useLanguage60,1920
	u16 Text[1900];Text61,1938
	bool homeButton;homeButton62,1955
	bool softwareReset;softwareReset63,1973
	bool appJump;appJump64,1994
	errorReturnCode returnCode;returnCode65,2009
	u16 eulaVersion;eulaVersion66,2038
}errorConf;errorConf67,2056

include/3ds/result.h,7383
#define R_SUCCEEDED(R_SUCCEEDED9,143
#define R_FAILED(R_FAILED11,233
#define R_LEVEL(R_LEVEL13,310
#define R_SUMMARY(R_SUMMARY15,398
#define R_MODULE(R_MODULE17,488
#define R_DESCRIPTION(R_DESCRIPTION19,580
#define MAKERESULT(MAKERESULT22,680
{__anon6a4561e6010327,868
	RL_SUCCESS = 0,RL_SUCCESS29,879
	RL_INFO    = 1,RL_INFO30,896
	RL_FATAL        = 0x1F,RL_FATAL33,922
	RL_RESET        = RL_FATAL - 1,RL_RESET34,947
	RL_REINITIALIZE = RL_FATAL - 2,RL_REINITIALIZE35,980
	RL_USAGE        = RL_FATAL - 3,RL_USAGE36,1013
	RL_PERMANENT    = RL_FATAL - 4,RL_PERMANENT37,1046
	RL_TEMPORARY    = RL_FATAL - 5,RL_TEMPORARY38,1079
	RL_STATUS       = RL_FATAL - 6,RL_STATUS39,1112
{__anon6a4561e6020344,1186
	RS_SUCCESS       = 0,RS_SUCCESS45,1188
	RS_NOP           = 1,RS_NOP46,1211
	RS_WOULDBLOCK    = 2,RS_WOULDBLOCK47,1234
	RS_OUTOFRESOURCE = 3,RS_OUTOFRESOURCE48,1257
	RS_NOTFOUND      = 4,RS_NOTFOUND49,1280
	RS_INVALIDSTATE  = 5,RS_INVALIDSTATE50,1303
	RS_NOTSUPPORTED  = 6,RS_NOTSUPPORTED51,1326
	RS_INVALIDARG    = 7,RS_INVALIDARG52,1349
	RS_WRONGARG      = 8,RS_WRONGARG53,1372
	RS_CANCELED      = 9,RS_CANCELED54,1395
	RS_STATUSCHANGED = 10,RS_STATUSCHANGED55,1418
	RS_INTERNAL      = 11,RS_INTERNAL56,1442
	RS_INVALIDRESVAL = 63,RS_INVALIDRESVAL57,1466
{__anon6a4561e6030362,1530
	RM_COMMON        = 0,RM_COMMON63,1532
	RM_KERNEL        = 1,RM_KERNEL64,1555
	RM_UTIL          = 2,RM_UTIL65,1578
	RM_FILE_SERVER   = 3,RM_FILE_SERVER66,1601
	RM_LOADER_SERVER = 4,RM_LOADER_SERVER67,1624
	RM_TCB           = 5,RM_TCB68,1647
	RM_OS            = 6,RM_OS69,1670
	RM_DBG           = 7,RM_DBG70,1693
	RM_DMNT          = 8,RM_DMNT71,1716
	RM_PDN           = 9,RM_PDN72,1739
	RM_GSP           = 10,RM_GSP73,1762
	RM_I2C           = 11,RM_I2C74,1786
	RM_GPIO          = 12,RM_GPIO75,1810
	RM_DD            = 13,RM_DD76,1834
	RM_CODEC         = 14,RM_CODEC77,1858
	RM_SPI           = 15,RM_SPI78,1882
	RM_PXI           = 16,RM_PXI79,1906
	RM_FS            = 17,RM_FS80,1930
	RM_DI            = 18,RM_DI81,1954
	RM_HID           = 19,RM_HID82,1978
	RM_CAM           = 20,RM_CAM83,2002
	RM_PI            = 21,RM_PI84,2026
	RM_PM            = 22,RM_PM85,2050
	RM_PM_LOW        = 23,RM_PM_LOW86,2074
	RM_FSI           = 24,RM_FSI87,2098
	RM_SRV           = 25,RM_SRV88,2122
	RM_NDM           = 26,RM_NDM89,2146
	RM_NWM           = 27,RM_NWM90,2170
	RM_SOC           = 28,RM_SOC91,2194
	RM_LDR           = 29,RM_LDR92,2218
	RM_ACC           = 30,RM_ACC93,2242
	RM_ROMFS         = 31,RM_ROMFS94,2266
	RM_AM            = 32,RM_AM95,2290
	RM_HIO           = 33,RM_HIO96,2314
	RM_UPDATER       = 34,RM_UPDATER97,2338
	RM_MIC           = 35,RM_MIC98,2362
	RM_FND           = 36,RM_FND99,2386
	RM_MP            = 37,RM_MP100,2410
	RM_MPWL          = 38,RM_MPWL101,2434
	RM_AC            = 39,RM_AC102,2458
	RM_HTTP          = 40,RM_HTTP103,2482
	RM_DSP           = 41,RM_DSP104,2506
	RM_SND           = 42,RM_SND105,2530
	RM_DLP           = 43,RM_DLP106,2554
	RM_HIO_LOW       = 44,RM_HIO_LOW107,2578
	RM_CSND          = 45,RM_CSND108,2602
	RM_SSL           = 46,RM_SSL109,2626
	RM_AM_LOW        = 47,RM_AM_LOW110,2650
	RM_NEX           = 48,RM_NEX111,2674
	RM_FRIENDS       = 49,RM_FRIENDS112,2698
	RM_RDT           = 50,RM_RDT113,2722
	RM_APPLET        = 51,RM_APPLET114,2746
	RM_NIM           = 52,RM_NIM115,2770
	RM_PTM           = 53,RM_PTM116,2794
	RM_MIDI          = 54,RM_MIDI117,2818
	RM_MC            = 55,RM_MC118,2842
	RM_SWC           = 56,RM_SWC119,2866
	RM_FATFS         = 57,RM_FATFS120,2890
	RM_NGC           = 58,RM_NGC121,2914
	RM_CARD          = 59,RM_CARD122,2938
	RM_CARDNOR       = 60,RM_CARDNOR123,2962
	RM_SDMC          = 61,RM_SDMC124,2986
	RM_BOSS          = 62,RM_BOSS125,3010
	RM_DBM           = 63,RM_DBM126,3034
	RM_CONFIG        = 64,RM_CONFIG127,3058
	RM_PS            = 65,RM_PS128,3082
	RM_CEC           = 66,RM_CEC129,3106
	RM_IR            = 67,RM_IR130,3130
	RM_UDS           = 68,RM_UDS131,3154
	RM_PL            = 69,RM_PL132,3178
	RM_CUP           = 70,RM_CUP133,3202
	RM_GYROSCOPE     = 71,RM_GYROSCOPE134,3226
	RM_MCU           = 72,RM_MCU135,3250
	RM_NS            = 73,RM_NS136,3274
	RM_NEWS          = 74,RM_NEWS137,3298
	RM_RO            = 75,RM_RO138,3322
	RM_GD            = 76,RM_GD139,3346
	RM_CARD_SPI      = 77,RM_CARD_SPI140,3370
	RM_EC            = 78,RM_EC141,3394
	RM_WEB_BROWSER   = 79,RM_WEB_BROWSER142,3418
	RM_TEST          = 80,RM_TEST143,3442
	RM_ENC           = 81,RM_ENC144,3466
	RM_PIA           = 82,RM_PIA145,3490
	RM_ACT           = 83,RM_ACT146,3514
	RM_VCTL          = 84,RM_VCTL147,3538
	RM_OLV           = 85,RM_OLV148,3562
	RM_NEIA          = 86,RM_NEIA149,3586
	RM_NPNS          = 87,RM_NPNS150,3610
	RM_AVD           = 90,RM_AVD151,3634
	RM_L2B           = 91,RM_L2B152,3658
	RM_MVD           = 92,RM_MVD153,3682
	RM_NFC           = 93,RM_NFC154,3706
	RM_UART          = 94,RM_UART155,3730
	RM_SPM           = 95,RM_SPM156,3754
	RM_QTM           = 96,RM_QTM157,3778
	RM_NFP           = 97,RM_NFP158,3802
	RM_APPLICATION   = 254,RM_APPLICATION159,3826
	RM_INVALIDRESVAL = 255,RM_INVALIDRESVAL160,3851
{__anon6a4561e60403165,3929
	RD_SUCCESS              = 0,RD_SUCCESS166,3931
	RD_INVALID_RESULT_VALUE = 0x3FF,RD_INVALID_RESULT_VALUE167,3961
	RD_TIMEOUT              = RD_INVALID_RESULT_VALUE -  1,RD_TIMEOUT168,3995
	RD_OUT_OF_RANGE         = RD_INVALID_RESULT_VALUE -  2,RD_OUT_OF_RANGE169,4052
	RD_ALREADY_EXISTS       = RD_INVALID_RESULT_VALUE -  3,RD_ALREADY_EXISTS170,4109
	RD_CANCEL_REQUESTED     = RD_INVALID_RESULT_VALUE -  4,RD_CANCEL_REQUESTED171,4166
	RD_NOT_FOUND            = RD_INVALID_RESULT_VALUE -  5,RD_NOT_FOUND172,4223
	RD_ALREADY_INITIALIZED  = RD_INVALID_RESULT_VALUE -  6,RD_ALREADY_INITIALIZED173,4280
	RD_NOT_INITIALIZED      = RD_INVALID_RESULT_VALUE -  7,RD_NOT_INITIALIZED174,4337
	RD_INVALID_HANDLE       = RD_INVALID_RESULT_VALUE -  8,RD_INVALID_HANDLE175,4394
	RD_INVALID_POINTER      = RD_INVALID_RESULT_VALUE -  9,RD_INVALID_POINTER176,4451
	RD_INVALID_ADDRESS      = RD_INVALID_RESULT_VALUE - 10,RD_INVALID_ADDRESS177,4508
	RD_NOT_IMPLEMENTED      = RD_INVALID_RESULT_VALUE - 11,RD_NOT_IMPLEMENTED178,4565
	RD_OUT_OF_MEMORY        = RD_INVALID_RESULT_VALUE - 12,RD_OUT_OF_MEMORY179,4622
	RD_MISALIGNED_SIZE      = RD_INVALID_RESULT_VALUE - 13,RD_MISALIGNED_SIZE180,4679
	RD_MISALIGNED_ADDRESS   = RD_INVALID_RESULT_VALUE - 14,RD_MISALIGNED_ADDRESS181,4736
	RD_BUSY                 = RD_INVALID_RESULT_VALUE - 15,RD_BUSY182,4793
	RD_NO_DATA              = RD_INVALID_RESULT_VALUE - 16,RD_NO_DATA183,4850
	RD_INVALID_COMBINATION  = RD_INVALID_RESULT_VALUE - 17,RD_INVALID_COMBINATION184,4907
	RD_INVALID_ENUM_VALUE   = RD_INVALID_RESULT_VALUE - 18,RD_INVALID_ENUM_VALUE185,4964
	RD_INVALID_SIZE         = RD_INVALID_RESULT_VALUE - 19,RD_INVALID_SIZE186,5021
	RD_ALREADY_DONE         = RD_INVALID_RESULT_VALUE - 20,RD_ALREADY_DONE187,5078
	RD_NOT_AUTHORIZED       = RD_INVALID_RESULT_VALUE - 21,RD_NOT_AUTHORIZED188,5135
	RD_TOO_LARGE            = RD_INVALID_RESULT_VALUE - 22,RD_TOO_LARGE189,5192
	RD_INVALID_SELECTION    = RD_INVALID_RESULT_VALUE - 23,RD_INVALID_SELECTION190,5249

include/3ds/svc.h,29351
#define CUR_PROCESS_HANDLE CUR_PROCESS_HANDLE10,127
typedef enum {__anon5f1be153010320,298
	MEMOP_FREE    = 1, ///< Memory un-mappingMEMOP_FREE21,313
	MEMOP_RESERVE = 2, ///< Reserve memoryMEMOP_RESERVE22,356
	MEMOP_ALLOC   = 3, ///< Memory mappingMEMOP_ALLOC23,396
	MEMOP_MAP     = 4, ///< Mirror mappingMEMOP_MAP24,436
	MEMOP_UNMAP   = 5, ///< Mirror unmappingMEMOP_UNMAP25,476
	MEMOP_PROT    = 6, ///< Change protectionMEMOP_PROT26,518
	MEMOP_REGION_APP    = 0x100, ///< APPLICATION memory region.MEMOP_REGION_APP28,562
	MEMOP_REGION_SYSTEM = 0x200, ///< SYSTEM memory region.MEMOP_REGION_SYSTEM29,624
	MEMOP_REGION_BASE   = 0x300, ///< BASE memory region.MEMOP_REGION_BASE30,681
	MEMOP_OP_MASK     = 0xFF,    ///< Operation bitmask.MEMOP_OP_MASK32,737
	MEMOP_REGION_MASK = 0xF00,   ///< Region bitmask.MEMOP_REGION_MASK33,791
	MEMOP_LINEAR_FLAG = 0x10000, ///< Flag for linear memory operationsMEMOP_LINEAR_FLAG34,842
	MEMOP_ALLOC_LINEAR = MEMOP_LINEAR_FLAG | MEMOP_ALLOC, ///< Allocates linear memory.MEMOP_ALLOC_LINEAR36,912
} MemOp;MemOp37,997
typedef enum {__anon5f1be153020340,1040
	MEMSTATE_FREE       = 0,  ///< Free memoryMEMSTATE_FREE41,1055
	MEMSTATE_RESERVED   = 1,  ///< Reserved memoryMEMSTATE_RESERVED42,1099
	MEMSTATE_IO         = 2,  ///< I/O memoryMEMSTATE_IO43,1147
	MEMSTATE_STATIC     = 3,  ///< Static memoryMEMSTATE_STATIC44,1190
	MEMSTATE_CODE       = 4,  ///< Code memoryMEMSTATE_CODE45,1236
	MEMSTATE_PRIVATE    = 5,  ///< Private memoryMEMSTATE_PRIVATE46,1280
	MEMSTATE_SHARED     = 6,  ///< Shared memoryMEMSTATE_SHARED47,1327
	MEMSTATE_CONTINUOUS = 7,  ///< Continuous memoryMEMSTATE_CONTINUOUS48,1373
	MEMSTATE_ALIASED    = 8,  ///< Aliased memoryMEMSTATE_ALIASED49,1423
	MEMSTATE_ALIAS      = 9,  ///< Alias memoryMEMSTATE_ALIAS50,1470
	MEMSTATE_ALIASCODE  = 10, ///< Aliased code memoryMEMSTATE_ALIASCODE51,1515
	MEMSTATE_LOCKED     = 11, ///< Locked memoryMEMSTATE_LOCKED52,1567
} MemState;MemState53,1613
typedef enum {__anon5f1be153030356,1654
	MEMPERM_READ     = 1,          ///< ReadableMEMPERM_READ57,1669
	MEMPERM_WRITE    = 2,          ///< WritableMEMPERM_WRITE58,1715
	MEMPERM_EXECUTE  = 4,          ///< ExecutableMEMPERM_EXECUTE59,1761
	MEMPERM_READWRITE = MEMPERM_READ | MEMPERM_WRITE, ///< Readable and writableMEMPERM_READWRITE60,1809
	MEMPERM_READEXECUTE = MEMPERM_READ | MEMPERM_EXECUTE, ///< Readable and executableMEMPERM_READEXECUTE61,1887
	MEMPERM_DONTCARE = 0x10000000, ///< Don't careMEMPERM_DONTCARE62,1971
} MemPerm;MemPerm63,2019
{__anon5f1be153040367,2064
	MEMREGION_ALL = 0,         ///< All regions.MEMREGION_ALL68,2066
	MEMREGION_APPLICATION = 1, ///< APPLICATION memory.MEMREGION_APPLICATION69,2112
	MEMREGION_SYSTEM = 2,      ///< SYSTEM memory.MEMREGION_SYSTEM70,2165
	MEMREGION_BASE = 3,        ///< BASE memory.MEMREGION_BASE71,2213
} MemRegion;MemRegion72,2259
typedef struct {__anon5f1be153050875,2297
	u32 base_addr; ///< Base address.base_addr76,2314
	u32 size;      ///< Size.size77,2349
	u32 perm;      ///< Memory permissions. See @ref MemPermperm78,2376
	u32 state;     ///< Memory state. See @ref MemStatestate79,2434
} MemInfo;MemInfo80,2487
typedef struct {__anon5f1be153060883,2528
	u32 flags; ///< Page flags.flags84,2545
} PageInfo;PageInfo85,2574
typedef enum {__anon5f1be153070388,2610
	ARBITRATION_SIGNAL                                  = 0, ///< Signal #value threads for wake-upARBITRATION_SIGNAL89,2625
	ARBITRATION_WAIT_IF_LESS_THAN                       = 1, ///< If the memory at the address is sARBITRATION_WAIT_IF_LESS_THAN90,2723
	ARBITRATION_DECREMENT_AND_WAIT_IF_LESS_THAN         = 2, ///< If the memory at the address is sARBITRATION_DECREMENT_AND_WAIT_IF_LESS_THAN91,2868
	ARBITRATION_WAIT_IF_LESS_THAN_TIMEOUT               = 3, ///< If the memory at the address is sARBITRATION_WAIT_IF_LESS_THAN_TIMEOUT92,3030
	ARBITRATION_DECREMENT_AND_WAIT_IF_LESS_THAN_TIMEOUT = 4, ///< If the memory at the address is sARBITRATION_DECREMENT_AND_WAIT_IF_LESS_THAN_TIMEOUT93,3186
} ArbitrationType;ArbitrationType94,3359
#define ARBITRATION_SIGNAL_ALL ARBITRATION_SIGNAL_ALL97,3423
typedef enum {__anon5f1be1530803105,3547
	RESET_ONESHOT = 0, ///< When the primitive is signaled, it will wake up exactly one thread and RESET_ONESHOT106,3562
	RESET_STICKY  = 1, ///< When the primitive is signaled, it will wake up all threads and it won'RESET_STICKY107,3691
	RESET_PULSE   = 2, ///< Only meaningful for timers: same as ONESHOT but it will periodically siRESET_PULSE108,3817
} ResetType;ResetType109,3950
typedef enum {__anon5f1be1530903112,3990
	THREADINFO_TYPE_UNKNOWN ///< Unknown.THREADINFO_TYPE_UNKNOWN113,4005
} ThreadInfoType;ThreadInfoType114,4044
typedef enum {__anon5f1be1530a03117,4091
	RESLIMIT_PRIORITY       = 0,        ///< Thread priorityRESLIMIT_PRIORITY118,4106
	RESLIMIT_COMMIT         = 1,        ///< Quantity of allocatable memoryRESLIMIT_COMMIT119,4164
	RESLIMIT_THREAD         = 2,        ///< Number of threadsRESLIMIT_THREAD120,4237
	RESLIMIT_EVENT          = 3,        ///< Number of eventsRESLIMIT_EVENT121,4297
	RESLIMIT_MUTEX          = 4,        ///< Number of mutexesRESLIMIT_MUTEX122,4356
	RESLIMIT_SEMAPHORE      = 5,        ///< Number of semaphoresRESLIMIT_SEMAPHORE123,4416
	RESLIMIT_TIMER          = 6,        ///< Number of timersRESLIMIT_TIMER124,4479
	RESLIMIT_SHAREDMEMORY   = 7,        ///< Number of shared memory objects, see @ref svcCreateMemRESLIMIT_SHAREDMEMORY125,4538
	RESLIMIT_ADDRESSARBITER = 8,        ///< Number of address arbitersRESLIMIT_ADDRESSARBITER126,4643
	RESLIMIT_CPUTIME        = 9,        ///< CPU time. Value expressed in percentage regular until RESLIMIT_CPUTIME127,4712
	RESLIMIT_BIT            = BIT(31),  ///< Forces enum size to be 32 bitsRESLIMIT_BIT129,4824
} ResourceLimitType;ResourceLimitType130,4897
#define CUR_THREAD_HANDLE CUR_THREAD_HANDLE133,4960
typedef enum {__anon5f1be1530b03141,5061
	DMASTATE_STARTING = 0,  ///< DMA transfer involving at least one device is starting and has notDMASTATE_STARTING142,5076
	DMASTATE_WFP_DST = 1,   ///< DMA channel is in WFP state for the destination device (2nd loop iDMASTATE_WFP_DST143,5193
	DMASTATE_WFP_SRC = 2,   ///< DMA channel is in WFP state for the source device (2nd loop iteratDMASTATE_WFP_SRC144,5308
	DMASTATE_RUNNING = 3,   ///< DMA transfer is running.DMASTATE_RUNNING145,5418
	DMASTATE_DONE = 4,      ///< DMA transfer is done.DMASTATE_DONE146,5473
} DmaState;DmaState147,5525
enum {__anon5f1be1530c03150,5582
	DMACFG_SRC_IS_DEVICE        = BIT(0), ///< DMA source is a device/peripheral. Address will not DMACFG_SRC_IS_DEVICE151,5589
	DMACFG_DST_IS_DEVICE        = BIT(1), ///< DMA destination is a device/peripheral. Address willDMACFG_DST_IS_DEVICE152,5701
	DMACFG_WAIT_AVAILABLE       = BIT(2), ///< Make \ref svcStartInterProcessDma wait for the channDMACFG_WAIT_AVAILABLE153,5818
	DMACFG_KEEP_LOCKED          = BIT(3), ///< Keep the channel locked after the transfer. RequiredDMACFG_KEEP_LOCKED154,5933
	DMACFG_USE_SRC_CONFIG       = BIT(6), ///< Use the provided source device configuration even ifDMACFG_USE_SRC_CONFIG155,6054
	DMACFG_USE_DST_CONFIG       = BIT(7), ///< Use the provided destination device configuration evDMACFG_USE_DST_CONFIG156,6183
enum {__anon5f1be1530d03160,6374
	DMARST_UNLOCK           = BIT(0), ///< Unlock the channel after transfer.DMARST_UNLOCK161,6381
	DMARST_RESUME_DEVICE    = BIT(1), ///< Replace DMAFLUSHP instructions by NOP (they may not be rDMARST_RESUME_DEVICE162,6456
typedef struct {__anon5f1be1530e08173,7052
	s8 deviceId;            ///< DMA device ID.deviceId174,7069
	s8 allowedAlignments;   ///< Mask of allowed access alignments (8, 4, 2, 1).allowedAlignments175,7114
	s16 burstSize;          ///< Number of bytes transferred in a burst loop. Can be 0 (in which caburstSize176,7192
	s16 transferSize;       ///< Number of bytes transferred in a "transfer" loop (made of burst lotransferSize177,7335
	s16 burstStride;        ///< Burst loop stride, can be <= 0.burstStride178,7437
	s16 transferStride;     ///< "Transfer" loop stride, can be <= 0.transferStride179,7499
} DmaDeviceConfig;DmaDeviceConfig180,7566
typedef struct {__anon5f1be1530f08183,7647
	s8 channelId;           ///< Channel ID (Arm11: 0-7, Arm9: 0-1). Use -1 to auto-assign to a frechannelId184,7664
	s8 endianSwapSize;      ///< Endian swap size (can be 0).endianSwapSize185,7795
	u8 flags;               ///< DMACFG_* flags.flags186,7854
	u8 _padding;_padding187,7900
	DmaDeviceConfig srcCfg; ///< Source device configuration, read if \ref DMACFG_SRC_IS_DEVICE andsrcCfg188,7914
	DmaDeviceConfig dstCfg; ///< Destination device configuration, read if \ref DMACFG_SRC_IS_DEVICdstCfg189,8050
} DmaConfig;DmaConfig190,8191
typedef enum {__anon5f1be1531003198,8291
	PERFCOUNTEROP_ENABLE                        = 0,    ///< Enable and lock perfmon. functionalityPERFCOUNTEROP_ENABLE199,8306
	PERFCOUNTEROP_DISABLE                       = 1,    ///< Disable and forcibly unlock perfmon. fPERFCOUNTEROP_DISABLE200,8404
	PERFCOUNTEROP_GET_VALUE                     = 2,    ///< Get the value of a counter register.PERFCOUNTEROP_GET_VALUE201,8514
	PERFCOUNTEROP_SET_VALUE                     = 3,    ///< Set the value of a counter register.PERFCOUNTEROP_SET_VALUE202,8609
	PERFCOUNTEROP_GET_OVERFLOW_FLAGS            = 4,    ///< Get the overflow flags for all CP15 anPERFCOUNTEROP_GET_OVERFLOW_FLAGS203,8704
	PERFCOUNTEROP_RESET                         = 5,    ///< Reset the value and/or overflow flags PERFCOUNTEROP_RESET204,8816
	PERFCOUNTEROP_GET_EVENT                     = 6,    ///< Get the event ID associated to a partiPERFCOUNTEROP_GET_EVENT205,8934
	PERFCOUNTEROP_SET_EVENT                     = 7,    ///< Set the event ID associated to a paritPERFCOUNTEROP_SET_EVENT206,9045
	PERFCOUNTEROP_SET_VIRTUAL_COUNTER_ENABLED   = 8,    ///< (Dis)allow the kernel to track counterPERFCOUNTEROP_SET_VIRTUAL_COUNTER_ENABLED207,9156
} PerfCounterOperation;PerfCounterOperation208,9297
{__anon5f1be1531103212,9388
	PERFCOUNTERREG_CORE_BASE = 0,PERFCOUNTERREG_CORE_BASE214,9410
	PERFCOUNTERREG_CORE_COUNT_REG_0 = PERFCOUNTERREG_CORE_BASE, ///< CP15 PMN0.PERFCOUNTERREG_CORE_COUNT_REG_0215,9441
	PERFCOUNTERREG_CORE_COUNT_REG_1,   ///< CP15 PMN1.PERFCOUNTERREG_CORE_COUNT_REG_1216,9518
	PERFCOUNTERREG_CORE_CYCLE_COUNTER, ///< CP15 CCNT.PERFCOUNTERREG_CORE_CYCLE_COUNTER217,9570
	PERFCOUNTERREG_SCU_BASE = 0x10,PERFCOUNTERREG_SCU_BASE220,9641
	PERFCOUNTERREG_SCU_0 = PERFCOUNTERREG_SCU_BASE, ///< SCU MN0.PERFCOUNTERREG_SCU_0221,9674
	PERFCOUNTERREG_SCU_1,  ///< SCU MN1.PERFCOUNTERREG_SCU_1222,9737
	PERFCOUNTERREG_SCU_2,  ///< SCU MN2.PERFCOUNTERREG_SCU_2223,9775
	PERFCOUNTERREG_SCU_3,  ///< SCU MN3.PERFCOUNTERREG_SCU_3224,9813
	PERFCOUNTERREG_SCU_4,  ///< SCU MN4. Prod-N3DS only. IRQ line missing.PERFCOUNTERREG_SCU_4225,9851
	PERFCOUNTERREG_SCU_5,  ///< SCU MN5. Prod-N3DS only. IRQ line missing.PERFCOUNTERREG_SCU_5226,9923
	PERFCOUNTERREG_SCU_6,  ///< SCU MN6. Prod-N3DS only. IRQ line missing.PERFCOUNTERREG_SCU_6227,9995
	PERFCOUNTERREG_SCU_7,  ///< SCU MN7. Prod-N3DS only. IRQ line missing.PERFCOUNTERREG_SCU_7228,10067
} PerfCounterRegister;PerfCounterRegister229,10139
{__anon5f1be1531203239,10591
	PERFCOUNTEREVT_CORE_BASE = 0x0,PERFCOUNTEREVT_CORE_BASE241,10610
	PERFCOUNTEREVT_CORE_INST_CACHE_MISS = PERFCOUNTEREVT_CORE_BASE,PERFCOUNTEREVT_CORE_INST_CACHE_MISS242,10643
	PERFCOUNTEREVT_CORE_STALL_BY_LACK_OF_INST,PERFCOUNTEREVT_CORE_STALL_BY_LACK_OF_INST243,10708
	PERFCOUNTEREVT_CORE_STALL_BY_DATA_HAZARD,PERFCOUNTEREVT_CORE_STALL_BY_DATA_HAZARD244,10752
	PERFCOUNTEREVT_CORE_INST_MICRO_TLB_MISS,PERFCOUNTEREVT_CORE_INST_MICRO_TLB_MISS245,10795
	PERFCOUNTEREVT_CORE_DATA_MICRO_TLB_MISS,PERFCOUNTEREVT_CORE_DATA_MICRO_TLB_MISS246,10837
	PERFCOUNTEREVT_CORE_BRANCH_INST,PERFCOUNTEREVT_CORE_BRANCH_INST247,10879
	PERFCOUNTEREVT_CORE_BRANCH_NOT_PREDICTED,PERFCOUNTEREVT_CORE_BRANCH_NOT_PREDICTED248,10913
	PERFCOUNTEREVT_CORE_BRANCH_MISS_PREDICTED,PERFCOUNTEREVT_CORE_BRANCH_MISS_PREDICTED249,10956
	PERFCOUNTEREVT_CORE_INST_EXECUTED,PERFCOUNTEREVT_CORE_INST_EXECUTED250,11000
	PERFCOUNTEREVT_CORE_FOLDED_INST_EXECUTED,PERFCOUNTEREVT_CORE_FOLDED_INST_EXECUTED251,11036
	PERFCOUNTEREVT_CORE_DATA_CACHE_READ,PERFCOUNTEREVT_CORE_DATA_CACHE_READ252,11079
	PERFCOUNTEREVT_CORE_DATA_CACHE_READ_MISS,PERFCOUNTEREVT_CORE_DATA_CACHE_READ_MISS253,11117
	PERFCOUNTEREVT_CORE_DATA_CACHE_WRITE,PERFCOUNTEREVT_CORE_DATA_CACHE_WRITE254,11160
	PERFCOUNTEREVT_CORE_DATA_CACHE_WRITE_MISS,PERFCOUNTEREVT_CORE_DATA_CACHE_WRITE_MISS255,11199
	PERFCOUNTEREVT_CORE_DATA_CACHE_LINE_EVICTION,PERFCOUNTEREVT_CORE_DATA_CACHE_LINE_EVICTION256,11243
	PERFCOUNTEREVT_CORE_PC_CHANGED,PERFCOUNTEREVT_CORE_PC_CHANGED257,11290
	PERFCOUNTEREVT_CORE_MAIN_TLB_MISS,PERFCOUNTEREVT_CORE_MAIN_TLB_MISS258,11323
	PERFCOUNTEREVT_CORE_EXTERNAL_REQUEST,PERFCOUNTEREVT_CORE_EXTERNAL_REQUEST259,11359
	PERFCOUNTEREVT_CORE_STALL_BY_LSU_FULL,PERFCOUNTEREVT_CORE_STALL_BY_LSU_FULL260,11398
	PERFCOUNTEREVT_CORE_STORE_BUFFER_DRAIN,PERFCOUNTEREVT_CORE_STORE_BUFFER_DRAIN261,11438
	PERFCOUNTEREVT_CORE_MERGE_IN_STORE_BUFFER,PERFCOUNTEREVT_CORE_MERGE_IN_STORE_BUFFER262,11479
	PERFCOUNTEREVT_CORE_CYCLE_COUNT = PERFCOUNTEREVT_CORE_BASE + 0xFF,     ///< One cycle elapsed.PERFCOUNTEREVT_CORE_CYCLE_COUNT263,11523
	PERFCOUNTEREVT_CORE_CYCLE_COUNT_64 = PERFCOUNTEREVT_CORE_BASE + 0xFFF, ///< 64 cycles elapsed.PERFCOUNTEREVT_CORE_CYCLE_COUNT_64264,11619
	PERFCOUNTEREVT_SCU_BASE = 0x1000,PERFCOUNTEREVT_SCU_BASE267,11717
	PERFCOUNTEREVT_SCU_DISABLED = PERFCOUNTEREVT_SCU_BASE,PERFCOUNTEREVT_SCU_DISABLED268,11752
	PERFCOUNTEREVT_SCU_LINEFILL_MISS_FROM_CORE0,PERFCOUNTEREVT_SCU_LINEFILL_MISS_FROM_CORE0269,11808
	PERFCOUNTEREVT_SCU_LINEFILL_MISS_FROM_CORE1,PERFCOUNTEREVT_SCU_LINEFILL_MISS_FROM_CORE1270,11854
	PERFCOUNTEREVT_SCU_LINEFILL_MISS_FROM_CORE2,PERFCOUNTEREVT_SCU_LINEFILL_MISS_FROM_CORE2271,11900
	PERFCOUNTEREVT_SCU_LINEFILL_MISS_FROM_CORE3,PERFCOUNTEREVT_SCU_LINEFILL_MISS_FROM_CORE3272,11946
	PERFCOUNTEREVT_SCU_LINEFILL_HIT_FROM_CORE0,PERFCOUNTEREVT_SCU_LINEFILL_HIT_FROM_CORE0273,11992
	PERFCOUNTEREVT_SCU_LINEFILL_HIT_FROM_CORE1,PERFCOUNTEREVT_SCU_LINEFILL_HIT_FROM_CORE1274,12037
	PERFCOUNTEREVT_SCU_LINEFILL_HIT_FROM_CORE2,PERFCOUNTEREVT_SCU_LINEFILL_HIT_FROM_CORE2275,12082
	PERFCOUNTEREVT_SCU_LINEFILL_HIT_FROM_CORE3,PERFCOUNTEREVT_SCU_LINEFILL_HIT_FROM_CORE3276,12127
	PERFCOUNTEREVT_SCU_LINE_MISSING_FROM_CORE0,PERFCOUNTEREVT_SCU_LINE_MISSING_FROM_CORE0277,12172
	PERFCOUNTEREVT_SCU_LINE_MISSING_FROM_CORE1,PERFCOUNTEREVT_SCU_LINE_MISSING_FROM_CORE1278,12217
	PERFCOUNTEREVT_SCU_LINE_MISSING_FROM_CORE2,PERFCOUNTEREVT_SCU_LINE_MISSING_FROM_CORE2279,12262
	PERFCOUNTEREVT_SCU_LINE_MISSING_FROM_CORE3,PERFCOUNTEREVT_SCU_LINE_MISSING_FROM_CORE3280,12307
	PERFCOUNTEREVT_SCU_LINE_MIGRATION,PERFCOUNTEREVT_SCU_LINE_MIGRATION281,12352
	PERFCOUNTEREVT_SCU_READ_BUSY_PORT0,PERFCOUNTEREVT_SCU_READ_BUSY_PORT0282,12388
	PERFCOUNTEREVT_SCU_READ_BUSY_PORT1,PERFCOUNTEREVT_SCU_READ_BUSY_PORT1283,12425
	PERFCOUNTEREVT_SCU_WRITE_BUSY_PORT0,PERFCOUNTEREVT_SCU_WRITE_BUSY_PORT0284,12462
	PERFCOUNTEREVT_SCU_WRITE_BUSY_PORT1,PERFCOUNTEREVT_SCU_WRITE_BUSY_PORT1285,12500
	PERFCOUNTEREVT_SCU_EXTERNAL_READ,PERFCOUNTEREVT_SCU_EXTERNAL_READ286,12538
	PERFCOUNTEREVT_SCU_EXTERNAL_WRITE,PERFCOUNTEREVT_SCU_EXTERNAL_WRITE287,12573
	PERFCOUNTEREVT_SCU_CYCLE_COUNT = PERFCOUNTEREVT_SCU_BASE + 0x1F,PERFCOUNTEREVT_SCU_CYCLE_COUNT288,12609
} PerfCounterEvent;PerfCounterEvent289,12675
typedef struct {__anon5f1be1531308292,12747
	u64 program_id;       ///< ID of the program.program_id293,12764
	char process_name[8]; ///< Name of the process.process_name294,12811
	u32 process_id;       ///< ID of the process.process_id295,12860
	u32 other_flags;      ///< Always 0other_flags296,12907
} AttachProcessEvent;AttachProcessEvent297,12944
typedef enum {__anon5f1be1531403300,13006
	EXITPROCESS_EVENT_EXIT                = 0, ///< Process exited either normally or due to an uncEXITPROCESS_EVENT_EXIT301,13021
	EXITPROCESS_EVENT_TERMINATE           = 1, ///< Process has been terminated by @ref svcTerminatEXITPROCESS_EVENT_TERMINATE302,13134
	EXITPROCESS_EVENT_DEBUG_TERMINATE     = 2, ///< Process has been terminated by @ref svcTerminatEXITPROCESS_EVENT_DEBUG_TERMINATE303,13240
} ExitProcessEventReason;ExitProcessEventReason304,13351
typedef struct {__anon5f1be1531508307,13426
	ExitProcessEventReason reason; ///< Reason for exiting. See @ref ExitProcessEventReasonreason308,13443
} ExitProcessEvent;ExitProcessEvent309,13532
typedef struct {__anon5f1be1531608312,13603
	u32 creator_thread_id;    ///< ID of the creating thread.creator_thread_id313,13620
	u32 thread_local_storage; ///< Thread local storage.thread_local_storage314,13679
	u32 entry_point;          ///< Entry point of the thread.entry_point315,13733
} AttachThreadEvent;AttachThreadEvent316,13792
typedef enum {__anon5f1be1531703319,13852
	EXITTHREAD_EVENT_EXIT              = 0, ///< Thread exited.EXITTHREAD_EVENT_EXIT320,13867
	EXITTHREAD_EVENT_TERMINATE         = 1, ///< Thread terminated.EXITTHREAD_EVENT_TERMINATE321,13928
	EXITTHREAD_EVENT_EXIT_PROCESS      = 2, ///< Process exited either normally or due to an uncaugEXITTHREAD_EVENT_EXIT_PROCESS322,13993
	EXITTHREAD_EVENT_TERMINATE_PROCESS = 3, ///< Process has been terminated by @ref svcTerminatePrEXITTHREAD_EVENT_TERMINATE_PROCESS323,14103
} ExitThreadEventReason;ExitThreadEventReason324,14206
typedef struct {__anon5f1be1531808327,14279
	ExitThreadEventReason reason; ///< Reason for exiting. See @ref ExitThreadEventReasonreason328,14296
} ExitThreadEvent;ExitThreadEvent329,14383
typedef enum {__anon5f1be1531903332,14433
	USERBREAK_PANIC         = 0, ///< Panic.USERBREAK_PANIC333,14448
	USERBREAK_ASSERT        = 1, ///< Assertion failed.USERBREAK_ASSERT334,14490
	USERBREAK_USER          = 2, ///< User related.USERBREAK_USER335,14543
	USERBREAK_LOAD_RO       = 3, ///< Load RO.USERBREAK_LOAD_RO336,14592
	USERBREAK_UNLOAD_RO     = 4, ///< Unload RO.USERBREAK_UNLOAD_RO337,14636
} UserBreakType;UserBreakType338,14682
typedef enum {__anon5f1be1531a03341,14736
	EXCEVENT_UNDEFINED_INSTRUCTION = 0, ///< Undefined instruction.EXCEVENT_UNDEFINED_INSTRUCTION342,14751
	EXCEVENT_PREFETCH_ABORT        = 1, ///< Prefetch abort.EXCEVENT_PREFETCH_ABORT343,14816
	EXCEVENT_DATA_ABORT            = 2, ///< Data abort (other than the below kind).EXCEVENT_DATA_ABORT344,14874
	EXCEVENT_UNALIGNED_DATA_ACCESS = 3, ///< Unaligned data access.EXCEVENT_UNALIGNED_DATA_ACCESS345,14956
	EXCEVENT_ATTACH_BREAK          = 4, ///< Attached break.EXCEVENT_ATTACH_BREAK346,15021
	EXCEVENT_STOP_POINT            = 5, ///< Stop point reached.EXCEVENT_STOP_POINT347,15079
	EXCEVENT_USER_BREAK            = 6, ///< User break occurred.EXCEVENT_USER_BREAK348,15141
	EXCEVENT_DEBUGGER_BREAK        = 7, ///< Debugger break occurred.EXCEVENT_DEBUGGER_BREAK349,15204
	EXCEVENT_UNDEFINED_SYSCALL     = 8, ///< Undefined syscall.EXCEVENT_UNDEFINED_SYSCALL350,15271
} ExceptionEventType;ExceptionEventType351,15332
typedef struct {__anon5f1be1531b08354,15458
	u32 fault_information; ///< FAR (for DATA ABORT / UNALIGNED DATA ACCESS), attempted syscall or fault_information355,15475
} FaultExceptionEvent;FaultExceptionEvent356,15573
typedef enum {__anon5f1be1531c03359,15618
	STOPPOINT_SVC_FF        = 0, ///< See @ref SVC_STOP_POINT.STOPPOINT_SVC_FF360,15633
	STOPPOINT_BREAKPOINT    = 1, ///< Breakpoint.STOPPOINT_BREAKPOINT361,15693
	STOPPOINT_WATCHPOINT    = 2, ///< Watchpoint.STOPPOINT_WATCHPOINT362,15740
} StopPointType;StopPointType363,15787
typedef struct {__anon5f1be1531d08366,15839
	StopPointType type;    ///< Stop point type, see @ref StopPointType.type367,15856
	u32 fault_information; ///< FAR for Watchpoints, otherwise 0.fault_information368,15926
} StopPointExceptionEvent;StopPointExceptionEvent369,15989
typedef struct {__anon5f1be1531e08372,16053
	UserBreakType type;   ///< User break type, see @ref UserBreakType.type373,16070
	u32 croInfo;          ///< For LOAD_RO and UNLOAD_RO.croInfo374,16139
	u32 croInfoSize;      ///< For LOAD_RO and UNLOAD_RO.croInfoSize375,16194
} UserBreakExceptionEvent;UserBreakExceptionEvent376,16249
typedef struct {__anon5f1be1531f08379,16325
	s32 thread_ids[4]; ///< IDs of the attached process's threads that were running on each core atthread_ids380,16342
} DebuggerBreakExceptionEvent;DebuggerBreakExceptionEvent381,16543
typedef struct {__anon5f1be1532008384,16609
	ExceptionEventType type; ///< Type of event. See @ref ExceptionEventType.type385,16626
	u32 address;             ///< Address of the exception.address386,16701
	union {__anon5f1be153210a387,16758
		FaultExceptionEvent fault;                  ///< Fault exception event data.fault388,16767
		StopPointExceptionEvent stop_point;         ///< Stop point exception event data.stop_point389,16846
		UserBreakExceptionEvent user_break;         ///< User break exception event data.user_break390,16930
		DebuggerBreakExceptionEvent debugger_break; ///< Debugger break exception event datadebugger_break391,17014
} ExceptionEvent;ExceptionEvent393,17105
typedef struct {__anon5f1be1532208396,17161
	u64 clock_tick; ///< Clock tick that the event occurred.clock_tick397,17178
} ScheduleInOutEvent;ScheduleInOutEvent398,17236
typedef struct {__anon5f1be1532308401,17291
	u64 clock_tick; ///< Clock tick that the event occurred.clock_tick402,17308
	u32 syscall;    ///< Syscall sent/received.syscall403,17366
} SyscallInOutEvent;SyscallInOutEvent404,17411
typedef struct {__anon5f1be1532408407,17469
	u32 string_addr; ///< Address of the outputted string.string_addr408,17486
	u32 string_size; ///< Size of the outputted string.string_size409,17542
} OutputStringEvent;OutputStringEvent410,17595
typedef struct {__anon5f1be1532508413,17662
	u32 mapped_addr;   ///< Mapped address.mapped_addr414,17679
	u32 mapped_size;   ///< Mapped size.mapped_size415,17720
	MemPerm memperm;   ///< Memory permissions. See @ref MemPerm.memperm416,17758
	MemState memstate; ///< Memory state. See @ref MemState.memstate417,17821
} MapEvent;MapEvent418,17879
typedef enum {__anon5f1be1532603421,17914
	DBGEVENT_ATTACH_PROCESS = 0,  ///< Process attached event.DBGEVENT_ATTACH_PROCESS422,17929
	DBGEVENT_ATTACH_THREAD  = 1,  ///< Thread attached event.DBGEVENT_ATTACH_THREAD423,17989
	DBGEVENT_EXIT_THREAD    = 2,  ///< Thread exit event.DBGEVENT_EXIT_THREAD424,18048
	DBGEVENT_EXIT_PROCESS   = 3,  ///< Process exit event.DBGEVENT_EXIT_PROCESS425,18103
	DBGEVENT_EXCEPTION      = 4,  ///< Exception event.DBGEVENT_EXCEPTION426,18159
	DBGEVENT_DLL_LOAD       = 5,  ///< DLL load event.DBGEVENT_DLL_LOAD427,18212
	DBGEVENT_DLL_UNLOAD     = 6,  ///< DLL unload event.DBGEVENT_DLL_UNLOAD428,18264
	DBGEVENT_SCHEDULE_IN    = 7,  ///< Schedule in event.DBGEVENT_SCHEDULE_IN429,18318
	DBGEVENT_SCHEDULE_OUT   = 8,  ///< Schedule out event.DBGEVENT_SCHEDULE_OUT430,18373
	DBGEVENT_SYSCALL_IN     = 9,  ///< Syscall in event.DBGEVENT_SYSCALL_IN431,18429
	DBGEVENT_SYSCALL_OUT    = 10, ///< Syscall out event.DBGEVENT_SYSCALL_OUT432,18483
	DBGEVENT_OUTPUT_STRING  = 11, ///< Output string event.DBGEVENT_OUTPUT_STRING433,18538
	DBGEVENT_MAP            = 12, ///< Map event.DBGEVENT_MAP434,18595
} DebugEventType;DebugEventType435,18642
typedef struct {__anon5f1be1532708438,18698
	DebugEventType type; ///< Type of event. See @ref DebugEventTypetype439,18715
	u32 thread_id;       ///< ID of the thread.thread_id440,18781
	u32 flags;           ///< Flags. Bit0 means that @ref svcContinueDebugEvent needs to be called flags441,18826
	u8 remnants[4];      ///< Always 0.remnants442,19003
	union {__anon5f1be153280a443,19040
		AttachProcessEvent attach_process; ///< Process attachment event data.attach_process444,19049
		AttachThreadEvent attach_thread;   ///< Thread attachment event data.attach_thread445,19122
		ExitThreadEvent exit_thread;       ///< Thread exit event data.exit_thread446,19194
		ExitProcessEvent exit_process;     ///< Process exit event data.exit_process447,19260
		ExceptionEvent exception;          ///< Exception event data.exception448,19327
		ScheduleInOutEvent scheduler;      ///< Schedule in/out event data.scheduler450,19461
		SyscallInOutEvent syscall;         ///< Syscall in/out event data.syscall451,19531
		OutputStringEvent output_string;   ///< Output string event data.output_string452,19600
		MapEvent map;                      ///< Map event data.map453,19668
} DebugEventInfo;DebugEventInfo455,19730
typedef enum {__anon5f1be1532903458,19824
	DBG_INHIBIT_USER_CPU_EXCEPTION_HANDLERS   = BIT(0), ///< Inhibit user-defined CPU exception hanDBG_INHIBIT_USER_CPU_EXCEPTION_HANDLERS459,19839
	DBG_SIGNAL_FAULT_EXCEPTION_EVENTS         = BIT(1), ///< Signal fault exception events. See @reDBG_SIGNAL_FAULT_EXCEPTION_EVENTS460,20029
	DBG_SIGNAL_SCHEDULE_EVENTS                = BIT(2), ///< Signal schedule in/out events. See @reDBG_SIGNAL_SCHEDULE_EVENTS461,20148
	DBG_SIGNAL_SYSCALL_EVENTS                 = BIT(3), ///< Signal syscall in/out events. See @refDBG_SIGNAL_SYSCALL_EVENTS462,20266
	DBG_SIGNAL_MAP_EVENTS                     = BIT(4), ///< Signal map events. See @ref MapEvent.DBG_SIGNAL_MAP_EVENTS463,20382
} DebugFlags;DebugFlags464,20478
typedef struct {__anon5f1be1532a08466,20493
	CpuRegisters cpu_registers; ///< CPU registers.cpu_registers467,20510
	FpuRegisters fpu_registers; ///< FPU registers.fpu_registers468,20559
} ThreadContext;ThreadContext469,20608
typedef enum {__anon5f1be1532b03472,20712
	THREADCONTEXT_CONTROL_CPU_GPRS  = BIT(0), ///< Control r0-r12.THREADCONTEXT_CONTROL_CPU_GPRS473,20727
	THREADCONTEXT_CONTROL_CPU_SPRS  = BIT(1), ///< Control sp, lr, pc, cpsr.THREADCONTEXT_CONTROL_CPU_SPRS474,20791
	THREADCONTEXT_CONTROL_FPU_GPRS  = BIT(2), ///< Control d0-d15 (or s0-s31).THREADCONTEXT_CONTROL_FPU_GPRS475,20865
	THREADCONTEXT_CONTROL_FPU_SPRS  = BIT(3), ///< Control fpscr, fpexc.THREADCONTEXT_CONTROL_FPU_SPRS476,20941
	THREADCONTEXT_CONTROL_CPU_REGS  = BIT(0) | BIT(1), ///< Control r0-r12, sp, lr, pc, cpsr.THREADCONTEXT_CONTROL_CPU_REGS478,21012
	THREADCONTEXT_CONTROL_FPU_REGS  = BIT(2) | BIT(3), ///< Control d0-d15, fpscr, fpexc.THREADCONTEXT_CONTROL_FPU_REGS479,21103
	THREADCONTEXT_CONTROL_ALL       = BIT(0) | BIT(1) | BIT(2) | BIT(3), ///< Control all of the abTHREADCONTEXT_CONTROL_ALL481,21191
} ThreadContextControlFlags;ThreadContextControlFlags482,21292
typedef enum {__anon5f1be1532c03485,21385
	DBGTHREAD_PARAMETER_PRIORITY            = 0, ///< Thread priority.DBGTHREAD_PARAMETER_PRIORITY486,21400
	DBGTHREAD_PARAMETER_SCHEDULING_MASK_LOW = 1, ///< Low scheduling mask.DBGTHREAD_PARAMETER_SCHEDULING_MASK_LOW487,21468
	DBGTHREAD_PARAMETER_CPU_IDEAL           = 2, ///< Ideal processor.DBGTHREAD_PARAMETER_CPU_IDEAL488,21540
	DBGTHREAD_PARAMETER_CPU_CREATOR         = 3, ///< Processor that created the threod.DBGTHREAD_PARAMETER_CPU_CREATOR489,21608
} DebugThreadParameter;DebugThreadParameter490,21694
typedef struct {__anon5f1be1532d08498,21836
	u8 name[8];           ///< ASCII name of codesetname499,21853
	u16 unk1;unk1500,21903
	u16 unk2;unk2501,21914
	u32 unk3;unk3502,21925
	u32 text_addr;        ///< .text start addresstext_addr503,21936
	u32 text_size;        ///< .text number of pagestext_size504,21984
	u32 ro_addr;          ///< .rodata start addressro_addr505,22034
	u32 ro_size;          ///< .rodata number of pagesro_size506,22084
	u32 rw_addr;          ///< .data, .bss start addressrw_addr507,22136
	u32 rw_size;          ///< .data number of pagesrw_size508,22190
	u32 text_size_total;  ///< total pages for .text (aligned)text_size_total509,22240
	u32 ro_size_total;    ///< total pages for .rodata (aligned)ro_size_total510,22300
	u32 rw_size_total;    ///< total pages for .data, .bss (aligned)rw_size_total511,22362
	u32 unk4;unk4512,22428
	u64 program_id;       ///< Program IDprogram_id513,22439
} CodeSetInfo;CodeSetInfo514,22478
{__anon5f1be1532e08518,22559
	int priority;   ///< Priority of the main thread.priority519,22561
	u32 stack_size; ///< Size of the stack of the main thread.stack_size520,22612
	int argc;       ///< Unused on retail kernel.argc521,22672
	u16* argv;      ///< Unused on retail kernel.argv522,22719
	u16* envp;      ///< Unused on retail kernel.envp523,22766
} StartupInfo;StartupInfo524,22813
static inline void* getThreadLocalStorage(void)getThreadLocalStorage532,22936
static inline u32* getThreadCommandBuffer(void)getThreadCommandBuffer543,23168
static inline u32* getThreadStaticBuffers(void)getThreadStaticBuffers552,23360
static inline void dmaDeviceConfigInitDefault(DmaDeviceConfig *cfg)dmaDeviceConfigInitDefault561,23617
static inline void dmaConfigInitDefault(DmaConfig *cfg)dmaConfigInitDefault575,24026
#define SVC_STOP_POINT SVC_STOP_POINT1440,57114

include/3ds/errf.h,2889
typedef enum {__anon21b091b6010311,140
	ERRF_ERRTYPE_GENERIC      = 0, ///< For generic errors. Shows miscellaneous info.ERRF_ERRTYPE_GENERIC12,155
	ERRF_ERRTYPE_MEM_CORRUPT  = 1, ///< Same output as generic, but informs the user that "the SystERRF_ERRTYPE_MEM_CORRUPT13,238
	ERRF_ERRTYPE_CARD_REMOVED = 2, ///< Displays the "The Game Card was removed." message.ERRF_ERRTYPE_CARD_REMOVED14,363
	ERRF_ERRTYPE_EXCEPTION    = 3, ///< For exceptions, or more specifically 'crashes'. union data ERRF_ERRTYPE_EXCEPTION15,451
	ERRF_ERRTYPE_FAILURE      = 4, ///< For general failure. Shows a message. union data should havERRF_ERRTYPE_FAILURE16,573
	ERRF_ERRTYPE_LOGGED       = 5, ///< Outputs logs to NAND in some cases.ERRF_ERRTYPE_LOGGED17,700
} ERRF_ErrType;ERRF_ErrType18,773
typedef enum {__anon21b091b6020321,850
	ERRF_EXCEPTION_PREFETCH_ABORT = 0, ///< Prefetch AbortERRF_EXCEPTION_PREFETCH_ABORT22,865
	ERRF_EXCEPTION_DATA_ABORT     = 1, ///< Data abortERRF_EXCEPTION_DATA_ABORT23,921
	ERRF_EXCEPTION_UNDEFINED      = 2, ///< Undefined instructionERRF_EXCEPTION_UNDEFINED24,973
	ERRF_EXCEPTION_VFP            = 3, ///< VFP (floating point) exception.ERRF_EXCEPTION_VFP25,1036
} ERRF_ExceptionType;ERRF_ExceptionType26,1109
typedef struct {__anon21b091b6030828,1132
	ERRF_ExceptionType type; ///< Type of the exception. One of the ERRF_EXCEPTION_* values.type29,1149
	u8  reserved[3];reserved30,1239
	u32 fsr;                ///< ifsr (prefetch abort) / dfsr (data abort)fsr31,1257
	u32 far;                ///< pc = ifar (prefetch abort) / dfar (data abort)far32,1329
	u32 fpexc;fpexc33,1406
	u32 fpinst;fpinst34,1418
	u32 fpinst2;fpinst235,1431
} ERRF_ExceptionInfo;ERRF_ExceptionInfo36,1445
typedef struct {__anon21b091b6040838,1468
	ERRF_ExceptionInfo excep;   ///< Exception info structexcep39,1485
	CpuRegisters regs;          ///< CPU register dump.regs40,1541
} ERRF_ExceptionData;ERRF_ExceptionData41,1594
typedef struct {__anon21b091b6050843,1617
	ERRF_ErrType type; ///< Type, one of the ERRF_ERRTYPE_* enumtype44,1634
	u8  revHigh;       ///< High revison IDrevHigh45,1696
	u16 revLow;        ///< Low revision IDrevLow46,1737
	u32 resCode;       ///< Result coderesCode47,1778
	u32 pcAddr;        ///< PC address at exceptionpcAddr48,1815
	u32 procId;        ///< Process ID.procId49,1864
	u64 titleId;       ///< Title ID.titleId50,1901
	u64 appTitleId;    ///< Application Title ID.appTitleId51,1936
	union {__anon21b091b6060a52,1983
		ERRF_ExceptionData exception_data; ///< Data for when type is ERRF_ERRTYPE_EXCEPTIONexception_data53,1992
		char failure_mesg[0x60];             ///< String for when type is ERRF_ERRTYPE_FAILUREfailure_mesg54,2079
	} data;                                ///< The different types of data for errors.data55,2168
} ERRF_FatalErrInfo;ERRF_FatalErrInfo56,2253

include/3ds/gfx.h,477
#define RGB565(RGB56519,672
#define RGB8_to_565(RGB8_to_56522,785
typedef enum {__anon5e3a4e8c010325,889
	GFX_TOP    = GSP_SCREEN_TOP,    ///< Top screenGFX_TOP26,904
	GFX_BOTTOM = GSP_SCREEN_BOTTOM, ///< Bottom screenGFX_BOTTOM27,953
} gfxScreen_t;gfxScreen_t28,1005
typedef enum {__anon5e3a4e8c020336,1190
	GFX_LEFT  = 0, ///< Left eye framebufferGFX_LEFT37,1205
	GFX_RIGHT = 1, ///< Right eye framebufferGFX_RIGHT38,1247
} gfx3dSide_t;gfx3dSide_t39,1290

include/3ds/gdbhio_dev.h,0

include/3ds/allocator/mappable.h,0

include/3ds/allocator/vram.h,0

include/3ds/allocator/linear.h,0

include/3ds/thread.h,500
#define RUN_HANDLER_ON_FAULTING_STACK RUN_HANDLER_ON_FAULTING_STACK13,285
#define WRITE_DATA_TO_HANDLER_STACK WRITE_DATA_TO_HANDLER_STACK16,406
#define WRITE_DATA_TO_FAULTING_STACK WRITE_DATA_TO_FAULTING_STACK19,544
typedef struct Thread_tag* Thread;Thread22,641
typedef void (*ExceptionHandler)(ERRF_ExceptionInfo* excep, CpuRegisters* regs);ExceptionHandler25,755
static inline void threadOnException(ExceptionHandler handler, void* stack_top, ERRF_ExceptionDathreadOnException113,5150

include/3ds/services/mcuhwc.h,475
{__anon127ac42101038,86
	LED_NORMAL = 1,	///< The normal mode of the ledLED_NORMAL9,89
	LED_SLEEP_MODE,	///< The led pulses slowly as it does in the sleep modeLED_SLEEP_MODE10,139
	LED_OFF, 	///< Switch off power ledLED_OFF11,213
	LED_RED,	///< Red state of the ledLED_RED12,251
	LED_BLUE,	///< Blue state of the ledLED_BLUE13,288
	LED_BLINK_RED,	///< Blinking red state of power led and notification ledLED_BLINK_RED14,327
}powerLedState;powerLedState15,402

include/3ds/services/mic.h,792
{__anon919a8fd301039,118
	MICU_ENCODING_PCM8 = 0,         ///< Unsigned 8-bit PCM.MICU_ENCODING_PCM810,120
	MICU_ENCODING_PCM16 = 1,        ///< Unsigned 16-bit PCM.MICU_ENCODING_PCM1611,178
	MICU_ENCODING_PCM8_SIGNED = 2,  ///< Signed 8-bit PCM.MICU_ENCODING_PCM8_SIGNED12,237
	MICU_ENCODING_PCM16_SIGNED = 3, ///< Signed 16-bit PCM.MICU_ENCODING_PCM16_SIGNED13,293
} MICU_Encoding;MICU_Encoding14,350
{__anon919a8fd3020318,418
	MICU_SAMPLE_RATE_32730 = 0, ///< 32728.498 HzMICU_SAMPLE_RATE_3273019,420
	MICU_SAMPLE_RATE_16360 = 1, ///< 16364.479 HzMICU_SAMPLE_RATE_1636020,467
	MICU_SAMPLE_RATE_10910 = 2, ///< 10909.499 HzMICU_SAMPLE_RATE_1091021,514
	MICU_SAMPLE_RATE_8180 =  3, ///< 8182.1245 HzMICU_SAMPLE_RATE_818022,561
} MICU_SampleRate;MICU_SampleRate23,608

include/3ds/services/nwmext.h,0

include/3ds/services/y2r.h,5426
{__anon9255ccd7010314,261
	INPUT_YUV422_INDIV_8  = 0x0, ///<  8-bit per component, planar YUV 4:2:2, 16bpp, (1 Cr & Cb samINPUT_YUV422_INDIV_815,263
	INPUT_YUV420_INDIV_8  = 0x1, ///<  8-bit per component, planar YUV 4:2:0, 12bpp, (1 Cr & Cb samINPUT_YUV420_INDIV_816,408
	INPUT_YUV422_INDIV_16 = 0x2, ///< 16-bit per component, planar YUV 4:2:2, 32bpp, (1 Cr & Cb samINPUT_YUV422_INDIV_1617,553
	INPUT_YUV420_INDIV_16 = 0x3, ///< 16-bit per component, planar YUV 4:2:0, 24bpp, (1 Cr & Cb samINPUT_YUV420_INDIV_1618,700
	INPUT_YUV422_BATCH    = 0x4, ///<  8-bit per component, packed YUV 4:2:2, 16bpp, (Y0 Cb Y1 Cr).INPUT_YUV422_BATCH19,847
} Y2RU_InputFormat;Y2RU_InputFormat20,969
{__anon9255ccd7020328,1111
	OUTPUT_RGB_32     = 0x0, ///< 32-bit RGBA8888. The alpha component is the 8-bit value set by @rOUTPUT_RGB_3229,1113
	OUTPUT_RGB_24     = 0x1, ///< 24-bit RGB888.OUTPUT_RGB_2430,1226
	OUTPUT_RGB_16_555 = 0x2, ///< 16-bit RGBA5551. The alpha bit is the 7th bit of the alpha value OUTPUT_RGB_16_55531,1272
	OUTPUT_RGB_16_565 = 0x3, ///< 16-bit RGB565.OUTPUT_RGB_16_56532,1394
} Y2RU_OutputFormat;Y2RU_OutputFormat33,1440
{__anon9255ccd7030337,1517
	ROTATION_NONE          = 0x0, ///< No rotation.ROTATION_NONE38,1519
	ROTATION_CLOCKWISE_90  = 0x1, ///< Clockwise 90 degrees.ROTATION_CLOCKWISE_9039,1568
	ROTATION_CLOCKWISE_180 = 0x2, ///< Clockwise 180 degrees.ROTATION_CLOCKWISE_18040,1626
	ROTATION_CLOCKWISE_270 = 0x3, ///< Clockwise 270 degrees.ROTATION_CLOCKWISE_27041,1685
} Y2RU_Rotation;Y2RU_Rotation42,1744
{__anon9255ccd7040350,1880
	BLOCK_LINE   = 0x0, ///< The result buffer will be laid out in linear format, the usual way.BLOCK_LINE51,1882
	BLOCK_8_BY_8 = 0x1, ///< The result will be stored as 8x8 blocks in Z-order.\n Useful for textuBLOCK_8_BY_852,1976
} Y2RU_BlockAlignment;Y2RU_BlockAlignment53,2120
{__anon9255ccd7050870,2758
	u16 rgb_Y;    ///< RGB per unit Y.rgb_Y71,2760
	u16 r_V;      ///< Red per unit V.r_V72,2796
	u16 g_V;      ///< Green per unit V.g_V73,2832
	u16 g_U;      ///< Green per unit U.g_U74,2870
	u16 b_U;      ///< Blue per unit U.b_U75,2908
	u16 r_offset; ///< Red offset.r_offset76,2945
	u16 g_offset; ///< Green offset.g_offset77,2977
	u16 b_offset; ///< Blue offset.b_offset78,3011
} Y2RU_ColorCoefficients;Y2RU_ColorCoefficients79,3044
{__anon9255ccd7060387,3242
	COEFFICIENT_ITU_R_BT_601         = 0x0, ///< Coefficients from the ITU-R BT.601 standard with PCOEFFICIENT_ITU_R_BT_60188,3244
	COEFFICIENT_ITU_R_BT_709         = 0x1, ///< Coefficients from the ITU-R BT.709 standard with PCOEFFICIENT_ITU_R_BT_70989,3350
	COEFFICIENT_ITU_R_BT_601_SCALING = 0x2, ///< Coefficients from the ITU-R BT.601 standard with TCOEFFICIENT_ITU_R_BT_601_SCALING90,3456
	COEFFICIENT_ITU_R_BT_709_SCALING = 0x3, ///< Coefficients from the ITU-R BT.709 standard with TCOEFFICIENT_ITU_R_BT_709_SCALING91,3562
} Y2RU_StandardCoefficient;Y2RU_StandardCoefficient92,3668
{__anon9255ccd70708100,3893
	Y2RU_InputFormat input_format       : 8;           ///< Value passed to @ref Y2RU_SetInputFormainput_format101,3895
	Y2RU_OutputFormat output_format     : 8;           ///< Value passed to @ref Y2RU_SetOutputFormoutput_format102,3993
	Y2RU_Rotation rotation              : 8;           ///< Value passed to @ref Y2RU_SetRotationrotation103,4092
	Y2RU_BlockAlignment block_alignment : 8;           ///< Value passed to @ref Y2RU_SetBlockAlignblock_alignment104,4187
	s16 input_line_width;                              ///< Value passed to @ref Y2RU_SetInputLineWinput_line_width105,4288
	s16 input_lines;                                   ///< Value passed to @ref Y2RU_SetInputLinesinput_lines106,4389
	Y2RU_StandardCoefficient standard_coefficient : 8; ///< Value passed to @ref Y2RU_SetStandardCostandard_coefficient107,4486
	u8 unused;                                         ///< Unused.unused108,4592
	u16 alpha;                                         ///< Value passed to @ref Y2RU_SetAlphaalpha109,4657
} Y2RU_ConversionParams;Y2RU_ConversionParams110,4749
{__anon9255ccd70808114,4813
	u16 w0_xEven_yEven; ///< Weight 0 for even X, even Y.w0_xEven_yEven115,4815
	u16 w0_xOdd_yEven;  ///< Weight 0 for odd X, even Y.w0_xOdd_yEven116,4870
	u16 w0_xEven_yOdd;  ///< Weight 0 for even X, odd Y.w0_xEven_yOdd117,4924
	u16 w0_xOdd_yOdd;   ///< Weight 0 for odd X, odd Y.w0_xOdd_yOdd118,4978
	u16 w1_xEven_yEven; ///< Weight 1 for even X, even Y.w1_xEven_yEven119,5031
	u16 w1_xOdd_yEven;  ///< Weight 1 for odd X, even Y.w1_xOdd_yEven120,5086
	u16 w1_xEven_yOdd;  ///< Weight 1 for even X, odd Y.w1_xEven_yOdd121,5140
	u16 w1_xOdd_yOdd;   ///< Weight 1 for odd X, odd Y.w1_xOdd_yOdd122,5194
	u16 w2_xEven_yEven; ///< Weight 2 for even X, even Y.w2_xEven_yEven123,5247
	u16 w2_xOdd_yEven;  ///< Weight 2 for odd X, even Y.w2_xOdd_yEven124,5302
	u16 w2_xEven_yOdd;  ///< Weight 2 for even X, odd Y.w2_xEven_yOdd125,5356
	u16 w2_xOdd_yOdd;   ///< Weight 2 for odd X, odd Y.w2_xOdd_yOdd126,5410
	u16 w3_xEven_yEven; ///< Weight 3 for even X, even Y.w3_xEven_yEven127,5463
	u16 w3_xOdd_yEven;  ///< Weight 3 for odd X, even Y.w3_xOdd_yEven128,5518
	u16 w3_xEven_yOdd;  ///< Weight 3 for even X, odd Y.w3_xEven_yOdd129,5572
	u16 w3_xOdd_yOdd;   ///< Weight 3 for odd X, odd Y.w3_xOdd_yOdd130,5626
} Y2RU_DitheringWeightParams;Y2RU_DitheringWeightParams131,5679

include/3ds/services/pmdbg.h,0

include/3ds/services/ptmu.h,0

include/3ds/services/mvd.h,5176
#define MVD_STATUS_OK MVD_STATUS_OK10,189
#define MVD_STATUS_PARAMSET MVD_STATUS_PARAMSET11,219
#define MVD_STATUS_BUSY MVD_STATUS_BUSY12,311
#define MVD_STATUS_FRAMEREADY MVD_STATUS_FRAMEREADY13,343
#define MVD_STATUS_INCOMPLETEPROCESSING MVD_STATUS_INCOMPLETEPROCESSING14,381
#define MVD_STATUS_NALUPROCFLAG MVD_STATUS_NALUPROCFLAG15,500
#define MVD_CHECKNALUPROC_SUCCESS(MVD_CHECKNALUPROC_SUCCESS18,683
#define MVD_DEFAULT_WORKBUF_SIZE MVD_DEFAULT_WORKBUF_SIZE21,995
typedef enum {__anon91a1b501010324,1059
	MVDMODE_COLORFORMATCONV, ///< Converting color formats.MVDMODE_COLORFORMATCONV25,1074
	MVDMODE_VIDEOPROCESSING  ///< Processing video.MVDMODE_VIDEOPROCESSING26,1131
} MVDSTD_Mode;MVDSTD_Mode27,1180
typedef enum {__anon91a1b501020330,1214
	MVD_INPUT_YUYV422 = 0x00010001, ///< YUYV422MVD_INPUT_YUYV42231,1229
	MVD_INPUT_H264 = 0x00020001     ///< H264MVD_INPUT_H26432,1275
} MVDSTD_InputFormat;MVDSTD_InputFormat33,1318
typedef enum {__anon91a1b501030336,1360
	MVD_OUTPUT_YUYV422 = 0x00010001, ///< YUYV422MVD_OUTPUT_YUYV42237,1375
	MVD_OUTPUT_BGR565 = 0x00040002,  ///< BGR565MVD_OUTPUT_BGR56538,1422
	MVD_OUTPUT_RGB565 = 0x00040004   ///< RGB565MVD_OUTPUT_RGB56539,1468
} MVDSTD_OutputFormat;MVDSTD_OutputFormat40,1514
typedef struct {__anon91a1b501040843,1568
	MVDSTD_InputFormat input_type;   ///< Input type.input_type44,1585
	u32 unk_x04;                     ///< Unknown.unk_x0445,1636
	u32 unk_x08;                     ///< Unknown. Referred to as "H264 range" in SKATER.unk_x0846,1684
	u32 inwidth;                     ///< Input width.inwidth47,1771
	u32 inheight;                    ///< Input height.inheight48,1823
	u32 physaddr_colorconv_indata;   ///< Physical address of color conversion input data.physaddr_colorconv_indata49,1876
	u32 physaddr_colorconv_unk0;     ///< Physical address used with color conversion.physaddr_colorconv_unk050,1964
	u32 physaddr_colorconv_unk1;     ///< Physical address used with color conversion.physaddr_colorconv_unk151,2048
	u32 physaddr_colorconv_unk2;     ///< Physical address used with color conversion.physaddr_colorconv_unk252,2132
	u32 physaddr_colorconv_unk3;     ///< Physical address used with color conversion.physaddr_colorconv_unk353,2216
	u32 unk_x28[0x18>>2];            ///< Unknown.unk_x2854,2300
	u32 enable_cropping;             ///< Enables cropping with the input image when non-zero via tenable_cropping55,2348
	u32 input_crop_x_pos;input_crop_x_pos56,2466
	u32 input_crop_y_pos;input_crop_y_pos57,2489
	u32 input_crop_height;input_crop_height58,2512
	u32 input_crop_width;input_crop_width59,2536
	u32 unk_x54;                     ///< Unknown.unk_x5460,2559
	MVDSTD_OutputFormat output_type; ///< Output type.output_type61,2607
	u32 outwidth;                    ///< Output width.outwidth62,2659
	u32 outheight;                   ///< Output height.outheight63,2712
	u32 physaddr_outdata0;           ///< Physical address of output data.physaddr_outdata064,2766
	u32 physaddr_outdata1;           ///< Additional physical address for output data, only used whphysaddr_outdata165,2838
	u32 unk_x6c[0x98>>2];            ///< Unknown.unk_x6c66,2981
	u32 flag_x104;                   ///< This enables using the following 4 words when non-zero.flag_x10467,3029
	u32 output_x_pos;                ///< Output X position in the output buffer.output_x_pos68,3124
	u32 output_y_pos;                ///< Same as above except for the Y pos.output_y_pos69,3203
	u32 output_width_override;       ///< Used for aligning the output width when larger than the ooutput_width_override70,3278
	u32 output_height_override;      ///< Same as output_width_override except for the output heighoutput_height_override71,3450
	u32 unk_x118;unk_x11872,3549
} MVDSTD_Config;MVDSTD_Config73,3564
typedef struct {__anon91a1b501050875,3582
	u32 end_vaddr;//"End-address of the processed NAL-unit(internal MVD heap vaddr)."end_vaddr76,3599
	u32 end_physaddr;//"End-address of the processed NAL-unit(physaddr following the input physaddrend_physaddr77,3682
	u32 remaining_size;//"Total remaining unprocessed input data. Buffer_end_pos=bufsize-<this valuremaining_size78,3782
} MVDSTD_ProcessNALUnitOut;MVDSTD_ProcessNALUnitOut79,3883
typedef struct {__anon91a1b501060881,3912
	void* outdata0;//Linearmem vaddr equivalent to config *_outdata0.outdata082,3929
	void* outdata1;//Linearmem vaddr equivalent to config *_outdata1.outdata183,3996
} MVDSTD_OutputBuffersEntry;MVDSTD_OutputBuffersEntry84,4063
typedef struct {__anon91a1b501070886,4093
	u32 total_entries;//Total actual used entries below.total_entries87,4110
	MVDSTD_OutputBuffersEntry entries[17];entries88,4164
} MVDSTD_OutputBuffersEntryList;MVDSTD_OutputBuffersEntryList89,4204
typedef struct {__anon91a1b501080892,4495
	s8 cmd5_inval0, cmd5_inval1, cmd5_inval2;cmd5_inval093,4512
	s8 cmd5_inval0, cmd5_inval1, cmd5_inval2;cmd5_inval193,4512
	s8 cmd5_inval0, cmd5_inval1, cmd5_inval2;cmd5_inval293,4512
	u32 cmd5_inval3;cmd5_inval394,4555
	u8 cmd1b_inval;cmd1b_inval96,4574
} MVDSTD_InitStruct;MVDSTD_InitStruct97,4591

include/3ds/services/sslc.h,2050
typedef struct {__anond3a63ccf01088,122
	Handle servhandle; ///< Service handle.servhandle9,139
	u32 sslchandle;    ///< SSLC handle.sslchandle10,180
	Handle sharedmem_handle;sharedmem_handle11,218
} sslcContext;sslcContext12,244
typedef enum {__anond3a63ccf020314,260
	SSLC_DefaultRootCert_Nintendo_CA = 0x1, //"Nintendo CA"SSLC_DefaultRootCert_Nintendo_CA15,275
	SSLC_DefaultRootCert_Nintendo_CA_G2 = 0x2, //"Nintendo CA - G2"SSLC_DefaultRootCert_Nintendo_CA_G216,332
	SSLC_DefaultRootCert_Nintendo_CA_G3 = 0x3, //"Nintendo CA - G3"SSLC_DefaultRootCert_Nintendo_CA_G317,397
	SSLC_DefaultRootCert_Nintendo_Class2_CA = 0x4, //"Nintendo Class 2 CA"SSLC_DefaultRootCert_Nintendo_Class2_CA18,462
	SSLC_DefaultRootCert_Nintendo_Class2_CA_G2 = 0x5, //"Nintendo Class 2 CA - G2"SSLC_DefaultRootCert_Nintendo_Class2_CA_G219,534
	SSLC_DefaultRootCert_Nintendo_Class2_CA_G3 = 0x6, //"Nintendo Class 2 CA - G3"SSLC_DefaultRootCert_Nintendo_Class2_CA_G320,614
	SSLC_DefaultRootCert_CyberTrust = 0x7, //"GTE CyberTrust Global Root"SSLC_DefaultRootCert_CyberTrust21,694
	SSLC_DefaultRootCert_AddTrust_External_CA = 0x8, //"AddTrust External CA Root"SSLC_DefaultRootCert_AddTrust_External_CA22,765
	SSLC_DefaultRootCert_COMODO = 0x9, //"COMODO RSA Certification Authority"SSLC_DefaultRootCert_COMODO23,845
	SSLC_DefaultRootCert_USERTrust = 0xA, //"USERTrust RSA Certification Authority"SSLC_DefaultRootCert_USERTrust24,920
	SSLC_DefaultRootCert_DigiCert_EV = 0xB //"DigiCert High Assurance EV Root CA"SSLC_DefaultRootCert_DigiCert_EV25,1001
} SSLC_DefaultRootCert;SSLC_DefaultRootCert26,1080
typedef enum {__anond3a63ccf030328,1105
	SSLC_DefaultClientCert_ClCertA = 0x40SSLC_DefaultClientCert_ClCertA29,1120
} SSLC_DefaultClientCert;SSLC_DefaultClientCert30,1159
enum {__anond3a63ccf040333,1252
	SSLCOPT_Default = 0,SSLCOPT_Default34,1259
	SSLCOPT_DisableVerify = BIT(9), // "Disables server cert verification when set."SSLCOPT_DisableVerify35,1281
	SSLCOPT_TLSv10 = BIT(11) // "Use TLSv1.0."SSLCOPT_TLSv1036,1363

include/3ds/services/news.h,470
typedef struct {__anonc70566d701088,107
	bool dataSet;dataSet9,124
	bool unread;unread10,139
	bool enableJPEG;enableJPEG11,153
	bool isSpotPass;isSpotPass12,171
	bool isOptedOut;isOptedOut13,189
	u8 unkData[3];unkData14,207
	u64 processID;processID15,223
	u8 unkData2[8];unkData216,239
	u64 jumpParam;jumpParam17,256
	u8 unkData3[8];unkData318,272
	u64 time;time19,289
	u16 title[32];title20,300
} NotificationHeader;NotificationHeader21,316

include/3ds/services/hid.h,3461
{__anon9140198f010311,171
	KEY_A       = BIT(0),       ///< AKEY_A12,173
	KEY_B       = BIT(1),       ///< BKEY_B13,209
	KEY_SELECT  = BIT(2),       ///< SelectKEY_SELECT14,245
	KEY_START   = BIT(3),       ///< StartKEY_START15,286
	KEY_DRIGHT  = BIT(4),       ///< D-Pad RightKEY_DRIGHT16,326
	KEY_DLEFT   = BIT(5),       ///< D-Pad LeftKEY_DLEFT17,372
	KEY_DUP     = BIT(6),       ///< D-Pad UpKEY_DUP18,417
	KEY_DDOWN   = BIT(7),       ///< D-Pad DownKEY_DDOWN19,460
	KEY_R       = BIT(8),       ///< RKEY_R20,505
	KEY_L       = BIT(9),       ///< LKEY_L21,541
	KEY_X       = BIT(10),      ///< XKEY_X22,577
	KEY_Y       = BIT(11),      ///< YKEY_Y23,613
	KEY_ZL      = BIT(14),      ///< ZL (New 3DS only)KEY_ZL24,649
	KEY_ZR      = BIT(15),      ///< ZR (New 3DS only)KEY_ZR25,701
	KEY_TOUCH   = BIT(20),      ///< Touch (Not actually provided by HID)KEY_TOUCH26,753
	KEY_CSTICK_RIGHT = BIT(24), ///< C-Stick Right (New 3DS only)KEY_CSTICK_RIGHT27,824
	KEY_CSTICK_LEFT  = BIT(25), ///< C-Stick Left (New 3DS only)KEY_CSTICK_LEFT28,887
	KEY_CSTICK_UP    = BIT(26), ///< C-Stick Up (New 3DS only)KEY_CSTICK_UP29,949
	KEY_CSTICK_DOWN  = BIT(27), ///< C-Stick Down (New 3DS only)KEY_CSTICK_DOWN30,1009
	KEY_CPAD_RIGHT = BIT(28),   ///< Circle Pad RightKEY_CPAD_RIGHT31,1071
	KEY_CPAD_LEFT  = BIT(29),   ///< Circle Pad LeftKEY_CPAD_LEFT32,1122
	KEY_CPAD_UP    = BIT(30),   ///< Circle Pad UpKEY_CPAD_UP33,1172
	KEY_CPAD_DOWN  = BIT(31),   ///< Circle Pad DownKEY_CPAD_DOWN34,1220
	KEY_UP    = KEY_DUP    | KEY_CPAD_UP,    ///< D-Pad Up or Circle Pad UpKEY_UP37,1304
	KEY_DOWN  = KEY_DDOWN  | KEY_CPAD_DOWN,  ///< D-Pad Down or Circle Pad DownKEY_DOWN38,1377
	KEY_LEFT  = KEY_DLEFT  | KEY_CPAD_LEFT,  ///< D-Pad Left or Circle Pad LeftKEY_LEFT39,1454
	KEY_RIGHT = KEY_DRIGHT | KEY_CPAD_RIGHT, ///< D-Pad Right or Circle Pad RightKEY_RIGHT40,1531
{__anon9140198f020845,1649
	u16 px; ///< Touch Xpx46,1651
	u16 py; ///< Touch Ypy47,1673
} touchPosition;touchPosition48,1695
{__anon9140198f030852,1753
	s16 dx; ///< Pad Xdx53,1755
	s16 dy; ///< Pad Ydy54,1775
} circlePosition;circlePosition55,1795
{__anon9140198f040859,1855
	s16 x; ///< Accelerometer Xx60,1857
	s16 y; ///< Accelerometer Yy61,1886
	s16 z; ///< Accelerometer Zz62,1915
} accelVector;accelVector63,1944
{__anon9140198f050867,2003
	s16 x; ///< Rollx68,2005
	s16 z; ///< Yawz69,2023
	s16 y; ///< Pitchy70,2040
} angularRate;angularRate71,2059
{__anon9140198f060375,2104
	HIDEVENT_PAD0 = 0, ///< Event signaled by HID-module, when the sharedmem+0(PAD/circle-pad)/+0xAHIDEVENT_PAD076,2106
	HIDEVENT_PAD1,     ///< Event signaled by HID-module, when the sharedmem+0(PAD/circle-pad)/+0xAHIDEVENT_PAD177,2238
	HIDEVENT_Accel,    ///< Event signaled by HID-module, when the sharedmem accelerometer state waHIDEVENT_Accel78,2370
	HIDEVENT_Gyro,     ///< Event signaled by HID-module, when the sharedmem gyroscope state was upHIDEVENT_Gyro79,2477
	HIDEVENT_DebugPad, ///< Event signaled by HID-module, when the sharedmem DebugPad state was updHIDEVENT_DebugPad80,2580
	HIDEVENT_MAX,      ///< Used to know how many events there are.HIDEVENT_MAX82,2683
} HID_Event;HID_Event83,2748
#define scanKeys scanKeys172,5228
#define keysHeld keysHeld174,5301
#define keysDown keysDown176,5373
#define keysUp keysUp178,5443
#define touchRead touchRead180,5514
#define circleRead circleRead182,5589

include/3ds/services/uds.h,5489
#define UDS_MAXNODES UDS_MAXNODES8,191
#define UDS_BROADCAST_NETWORKNODEID UDS_BROADCAST_NETWORKNODEID11,286
#define UDS_HOST_NETWORKNODEID UDS_HOST_NETWORKNODEID14,378
#define UDS_DEFAULT_RECVBUFSIZE UDS_DEFAULT_RECVBUFSIZE17,520
#define UDS_DATAFRAME_MAXSIZE UDS_DATAFRAME_MAXSIZE20,594
#define UDS_CHECK_SENDTO_FATALERROR(UDS_CHECK_SENDTO_FATALERROR23,776
typedef struct {__anon9228da06010826,869
	u64 uds_friendcodeseed;//UDS version of the FriendCodeSeed.uds_friendcodeseed27,886
	union {__anon9228da06020a29,948
		u8 usercfg[0x18];//This is the first 0x18-bytes from this config block: https://www.3dbrew.orgusercfg30,957
		struct {__anon9228da06030832,1093
			u16 username[10];username33,1104
			u16 unk_x1c;//Unknown, normally zero. Set to 0x0 with the output from udsScanBeacons().unk_x1c35,1126
			u8 flag;//"u8 flag, unknown. Originates from the u16 bitmask in the beacon node-list header. flag36,1217
			u8 pad_x1f;//Unknown, normally zero.pad_x1f37,1372
	u16 NetworkNodeID;NetworkNodeID42,1472
	u16 pad_x22;//Unknown, normally zero?pad_x2243,1492
	u32 word_x24;//Normally zero?word_x2444,1531
} udsNodeInfo;udsNodeInfo45,1562
typedef struct {__anon9228da06040848,1608
	u32 status;status49,1625
	u32 unk_x4;unk_x450,1638
	u16 cur_NetworkNodeID;//"u16 NetworkNodeID for this device."cur_NetworkNodeID51,1651
	u16 unk_xa;unk_xa52,1713
	u32 unk_xc[0x20>>2];unk_xc53,1726
	u8 total_nodes;total_nodes55,1749
	u8 max_nodes;max_nodes56,1766
	u16 node_bitmask;//"This is a bitmask of NetworkNodeIDs: bit0 for NetworkNodeID 0x1(host), bit1node_bitmask57,1781
} udsConnectionStatus;udsConnectionStatus58,1936
typedef struct {__anon9228da06050861,2001
	u8 host_macaddress[6];host_macaddress62,2018
	u8 channel;//Wifi channel for this network. If you want to create a network on a specific channchannel63,2042
	u8 pad_x7;pad_x764,2223
	u8 initialized_flag;//Must be non-zero otherwise NWM-module will use zeros internally instead oinitialized_flag66,2236
	u8 unk_x9[3];unk_x968,2404
	u8 oui_value[3];//"This is the OUI value for use with the beacon tags. Normally this is 001F32.oui_value70,2420
	u8 oui_type;//"OUI type (21/0x15)"oui_type71,2518
	u32 wlancommID;//Unique local-WLAN communications ID for each application.wlancommID73,2555
	u8 id8;//Additional ID that can be used by the application for different types of networks.id874,2631
	u8 unk_x15;unk_x1575,2724
	u16 attributes;//See the UDSNETATTR enum values below.attributes77,2738
	u32 networkID;networkID79,2795
	u8 total_nodes;total_nodes81,2812
	u8 max_nodes;max_nodes82,2829
	u8 unk_x1e;unk_x1e83,2844
	u8 unk_x1f;unk_x1f84,2857
	u8 unk_x20[0x1f];unk_x2085,2870
	u8 appdata_size;appdata_size87,2890
	u8 appdata[0xc8];appdata88,2908
} udsNetworkStruct;udsNetworkStruct89,2927
typedef struct {__anon9228da06060891,2948
	u32 BindNodeID;BindNodeID92,2965
	Handle event;event93,2982
	bool spectator;spectator94,2997
} udsBindContext;udsBindContext95,3014
typedef struct {__anon9228da06070898,3087
	u16 unk_x0;unk_x099,3104
	u16 unk_x2;unk_x2100,3117
	u16 unk_x4;unk_x4101,3130
	u16 unk_x6;unk_x6102,3143
	u8 mac_address[6];mac_address104,3157
	u8 unk_xe[0x26];//Not initialized by dlp.unk_xe106,3178
} nwmScanInputStruct;nwmScanInputStruct107,3221
typedef struct {__anon9228da060808110,3295
	u32 maxsize;//"Max output size, from the command request."maxsize111,3312
	u32 size;//"Total amount of output data written relative to struct+0. 0xC when there's no entrisize112,3372
	u32 total_entries;//"Total entries, 0 for none. "total_entries113,3473
} nwmBeaconDataReplyHeader;nwmBeaconDataReplyHeader116,3552
typedef struct {__anon9228da060908119,3648
	u32 size;//"Size of this entire entry. The next entry starts at curentry_startoffset+curentry_ssize120,3665
	u8 unk_x4;unk_x4121,3767
	u8 channel;//Wifi channel for the AP.channel122,3779
	u8 unk_x6;unk_x6123,3818
	u8 unk_x7;unk_x7124,3830
	u8 mac_address[6];//"AP MAC address."mac_address125,3842
	u8 unk_xe[6];unk_xe126,3881
	u32 unk_x14;unk_x14127,3896
	u32 val_x1c;//"Value 0x1C(size of this header and/or offset to the actual beacon data)."val_x1c128,3910
} nwmBeaconDataReplyEntry;nwmBeaconDataReplyEntry131,4040
typedef struct {__anon9228da060a08134,4126
	nwmBeaconDataReplyEntry datareply_entry;datareply_entry135,4143
	udsNetworkStruct network;network136,4185
	udsNodeInfo nodes[UDS_MAXNODES];nodes137,4212
} udsNetworkScanInfo;udsNetworkScanInfo138,4246
enum {__anon9228da060b03140,4269
	UDSNETATTR_DisableConnectSpectators = BIT(0), //When set new Spectators are not allowed to connUDSNETATTR_DisableConnectSpectators141,4276
	UDSNETATTR_DisableConnectClients = BIT(1), //When set new Clients are not allowed to connect.UDSNETATTR_DisableConnectClients142,4377
	UDSNETATTR_x4 = BIT(2), //Unknown what this bit is for.UDSNETATTR_x4143,4472
	UDSNETATTR_Default = BIT(15), //Unknown what this bit is for.UDSNETATTR_Default144,4529
enum {__anon9228da060c03147,4596
	UDS_SENDFLAG_Default = BIT(0), //Unknown what this bit is for.UDS_SENDFLAG_Default148,4603
	UDS_SENDFLAG_Broadcast = BIT(1) //When set, broadcast the data frame via the destination MAC adUDS_SENDFLAG_Broadcast149,4667
typedef enum {__anon9228da060d03152,4823
	UDSCONTYPE_Client = 0x1,UDSCONTYPE_Client153,4838
	UDSCONTYPE_Spectator = 0x2UDSCONTYPE_Spectator154,4864
} udsConnectionType;udsConnectionType155,4892

include/3ds/services/cam.h,14573
enum {__anon90e1624b010311,193
	PORT_NONE = 0x0,    ///< No port.PORT_NONE12,200
	PORT_CAM1 = BIT(0), ///< CAM1 port.PORT_CAM113,235
	PORT_CAM2 = BIT(1), ///< CAM2 port.PORT_CAM214,272
	PORT_BOTH = PORT_CAM1 | PORT_CAM2, ///< Both ports.PORT_BOTH17,333
enum {__anon90e1624b020321,415
	SELECT_NONE = 0x0,    ///< No camera.SELECT_NONE22,422
	SELECT_OUT1 = BIT(0), ///< Outer camera 1.SELECT_OUT123,461
	SELECT_IN1  = BIT(1), ///< Inner camera 1.SELECT_IN124,505
	SELECT_OUT2 = BIT(2), ///< Outer camera 2.SELECT_OUT225,549
	SELECT_IN1_OUT1  = SELECT_OUT1 | SELECT_IN1,               ///< Outer camera 1 and inner cameraSELECT_IN1_OUT128,619
	SELECT_OUT1_OUT2 = SELECT_OUT1 | SELECT_OUT2,              ///< Both outer cameras.SELECT_OUT1_OUT229,719
	SELECT_IN1_OUT2  = SELECT_IN1 | SELECT_OUT2,               ///< Inner camera 1 and outer cameraSELECT_IN1_OUT230,804
	SELECT_ALL       = SELECT_OUT1 | SELECT_IN1 | SELECT_OUT2, ///< All cameras.SELECT_ALL31,904
typedef enum {__anon90e1624b030335,1007
	CONTEXT_NONE = 0x0,    ///< No context.CONTEXT_NONE36,1022
	CONTEXT_A    = BIT(0), ///< Context A.CONTEXT_A37,1063
	CONTEXT_B    = BIT(1), ///< Context B.CONTEXT_B38,1103
	CONTEXT_BOTH = CONTEXT_A | CONTEXT_B, ///< Both contexts.CONTEXT_BOTH41,1170
} CAMU_Context;CAMU_Context42,1229
typedef enum {__anon90e1624b040345,1281
	FLIP_NONE       = 0x0, ///< No flip.FLIP_NONE46,1296
	FLIP_HORIZONTAL = 0x1, ///< Horizontal flip.FLIP_HORIZONTAL47,1334
	FLIP_VERTICAL   = 0x2, ///< Vertical flip.FLIP_VERTICAL48,1380
	FLIP_REVERSE    = 0x3, ///< Reverse flip.FLIP_REVERSE49,1424
} CAMU_Flip;CAMU_Flip50,1467
typedef enum {__anon90e1624b050353,1511
	SIZE_VGA         = 0x0, ///< VGA size.         (640x480)SIZE_VGA54,1526
	SIZE_QVGA        = 0x1, ///< QVGA size.        (320x240)SIZE_QVGA55,1584
	SIZE_QQVGA       = 0x2, ///< QQVGA size.       (160x120)SIZE_QQVGA56,1642
	SIZE_CIF         = 0x3, ///< CIF size.         (352x288)SIZE_CIF57,1700
	SIZE_QCIF        = 0x4, ///< QCIF size.        (176x144)SIZE_QCIF58,1758
	SIZE_DS_LCD      = 0x5, ///< DS LCD size.      (256x192)SIZE_DS_LCD59,1816
	SIZE_DS_LCDx4    = 0x6, ///< DS LCD x4 size.   (512x384)SIZE_DS_LCDx460,1874
	SIZE_CTR_TOP_LCD = 0x7, ///< CTR Top LCD size. (400x240)SIZE_CTR_TOP_LCD61,1932
	SIZE_CTR_BOTTOM_LCD = SIZE_QVGA, ///< CTR Bottom LCD size. (320x240)SIZE_CTR_BOTTOM_LCD64,2047
} CAMU_Size;CAMU_Size65,2117
typedef enum {__anon90e1624b060368,2163
	FRAME_RATE_15       = 0x0, ///< 15 FPS.FRAME_RATE_1569,2178
	FRAME_RATE_15_TO_5  = 0x1, ///< 15-5 FPS.FRAME_RATE_15_TO_570,2219
	FRAME_RATE_15_TO_2  = 0x2, ///< 15-2 FPS.FRAME_RATE_15_TO_271,2262
	FRAME_RATE_10       = 0x3, ///< 10 FPS.FRAME_RATE_1072,2305
	FRAME_RATE_8_5      = 0x4, ///< 8.5 FPS.FRAME_RATE_8_573,2346
	FRAME_RATE_5        = 0x5, ///< 5 FPS.FRAME_RATE_574,2388
	FRAME_RATE_20       = 0x6, ///< 20 FPS.FRAME_RATE_2075,2428
	FRAME_RATE_20_TO_5  = 0x7, ///< 20-5 FPS.FRAME_RATE_20_TO_576,2469
	FRAME_RATE_30       = 0x8, ///< 30 FPS.FRAME_RATE_3077,2512
	FRAME_RATE_30_TO_5  = 0x9, ///< 30-5 FPS.FRAME_RATE_30_TO_578,2553
	FRAME_RATE_15_TO_10 = 0xA, ///< 15-10 FPS.FRAME_RATE_15_TO_1079,2596
	FRAME_RATE_20_TO_10 = 0xB, ///< 20-10 FPS.FRAME_RATE_20_TO_1080,2640
	FRAME_RATE_30_TO_10 = 0xC, ///< 30-10 FPS.FRAME_RATE_30_TO_1081,2684
} CAMU_FrameRate;CAMU_FrameRate82,2728
typedef enum {__anon90e1624b070385,2779
	WHITE_BALANCE_AUTO  = 0x0, ///< Auto white balance.WHITE_BALANCE_AUTO86,2794
	WHITE_BALANCE_3200K = 0x1, ///< 3200K white balance.WHITE_BALANCE_3200K87,2847
	WHITE_BALANCE_4150K = 0x2, ///< 4150K white balance.WHITE_BALANCE_4150K88,2901
	WHITE_BALANCE_5200K = 0x3, ///< 5200K white balance.WHITE_BALANCE_5200K89,2955
	WHITE_BALANCE_6000K = 0x4, ///< 6000K white balance.WHITE_BALANCE_6000K90,3009
	WHITE_BALANCE_7000K = 0x5, ///< 7000K white balance.WHITE_BALANCE_7000K91,3063
	WHITE_BALANCE_NORMAL                  = WHITE_BALANCE_AUTO,  // Normal white balance.      (AUTWHITE_BALANCE_NORMAL94,3145
	WHITE_BALANCE_TUNGSTEN                = WHITE_BALANCE_3200K, // Tungsten white balance.    (320WHITE_BALANCE_TUNGSTEN95,3244
	WHITE_BALANCE_WHITE_FLUORESCENT_LIGHT = WHITE_BALANCE_4150K, // Fluorescent white balance. (415WHITE_BALANCE_WHITE_FLUORESCENT_LIGHT96,3344
	WHITE_BALANCE_DAYLIGHT                = WHITE_BALANCE_5200K, // Daylight white balance.    (520WHITE_BALANCE_DAYLIGHT97,3444
	WHITE_BALANCE_CLOUDY                  = WHITE_BALANCE_6000K, // Cloudy white balance.      (600WHITE_BALANCE_CLOUDY98,3544
	WHITE_BALANCE_HORIZON                 = WHITE_BALANCE_6000K, // Horizon white balance.     (600WHITE_BALANCE_HORIZON99,3644
	WHITE_BALANCE_SHADE                   = WHITE_BALANCE_7000K, // Shade white balance.       (700WHITE_BALANCE_SHADE100,3744
} CAMU_WhiteBalance;CAMU_WhiteBalance101,3844
typedef enum {__anon90e1624b0803104,3890
	PHOTO_MODE_NORMAL    = 0x0, ///< Normal mode.PHOTO_MODE_NORMAL105,3905
	PHOTO_MODE_PORTRAIT  = 0x1, ///< Portrait mode.PHOTO_MODE_PORTRAIT106,3952
	PHOTO_MODE_LANDSCAPE = 0x2, ///< Landscape mode.PHOTO_MODE_LANDSCAPE107,4001
	PHOTO_MODE_NIGHTVIEW = 0x3, ///< Night mode.PHOTO_MODE_NIGHTVIEW108,4051
	PHOTO_MODE_LETTER    = 0x4, ///< Letter mode.PHOTO_MODE_LETTER109,4097
} CAMU_PhotoMode;CAMU_PhotoMode110,4144
typedef enum {__anon90e1624b0903113,4191
	EFFECT_NONE     = 0x0, ///< No effects.EFFECT_NONE114,4206
	EFFECT_MONO     = 0x1, ///< Mono effect.EFFECT_MONO115,4247
	EFFECT_SEPIA    = 0x2, ///< Sepia effect.EFFECT_SEPIA116,4289
	EFFECT_NEGATIVE = 0x3, ///< Negative effect.EFFECT_NEGATIVE117,4332
	EFFECT_NEGAFILM = 0x4, ///< Negative film effect.EFFECT_NEGAFILM118,4378
	EFFECT_SEPIA01  = 0x5, ///< Sepia effect.EFFECT_SEPIA01119,4429
} CAMU_Effect;CAMU_Effect120,4472
typedef enum {__anon90e1624b0a03123,4518
	CONTRAST_PATTERN_01 = 0x0, ///< Pattern 1.CONTRAST_PATTERN_01124,4533
	CONTRAST_PATTERN_02 = 0x1, ///< Pattern 2.CONTRAST_PATTERN_02125,4577
	CONTRAST_PATTERN_03 = 0x2, ///< Pattern 3.CONTRAST_PATTERN_03126,4621
	CONTRAST_PATTERN_04 = 0x3, ///< Pattern 4.CONTRAST_PATTERN_04127,4665
	CONTRAST_PATTERN_05 = 0x4, ///< Pattern 5.CONTRAST_PATTERN_05128,4709
	CONTRAST_PATTERN_06 = 0x5, ///< Pattern 6.CONTRAST_PATTERN_06129,4753
	CONTRAST_PATTERN_07 = 0x6, ///< Pattern 7.CONTRAST_PATTERN_07130,4797
	CONTRAST_PATTERN_08 = 0x7, ///< Pattern 8.CONTRAST_PATTERN_08131,4841
	CONTRAST_PATTERN_09 = 0x8, ///< Pattern 9.CONTRAST_PATTERN_09132,4885
	CONTRAST_PATTERN_10 = 0x9, ///< Pattern 10.CONTRAST_PATTERN_10133,4929
	CONTRAST_PATTERN_11 = 0xA, ///< Pattern 11.CONTRAST_PATTERN_11134,4974
	CONTRAST_LOW    = CONTRAST_PATTERN_05, ///< Low contrast.    (5)CONTRAST_LOW137,5042
	CONTRAST_NORMAL = CONTRAST_PATTERN_06, ///< Normal contrast. (6)CONTRAST_NORMAL138,5108
	CONTRAST_HIGH   = CONTRAST_PATTERN_07, ///< High contrast.   (7)CONTRAST_HIGH139,5174
} CAMU_Contrast;CAMU_Contrast140,5240
typedef enum {__anon90e1624b0b03143,5292
	LENS_CORRECTION_OFF   = 0x0, ///< No lens correction.LENS_CORRECTION_OFF144,5307
	LENS_CORRECTION_ON_70 = 0x1, ///< Edge-to-center brightness ratio of 70.LENS_CORRECTION_ON_70145,5362
	LENS_CORRECTION_ON_90 = 0x2, ///< Edge-to-center brightness ratio of 90.LENS_CORRECTION_ON_90146,5436
	LENS_CORRECTION_DARK   = LENS_CORRECTION_OFF,   ///< Dark lens correction.   (OFF)LENS_CORRECTION_DARK149,5540
	LENS_CORRECTION_NORMAL = LENS_CORRECTION_ON_70, ///< Normal lens correction. (70)LENS_CORRECTION_NORMAL150,5624
	LENS_CORRECTION_BRIGHT = LENS_CORRECTION_ON_90, ///< Bright lens correction. (90)LENS_CORRECTION_BRIGHT151,5707
} CAMU_LensCorrection;CAMU_LensCorrection152,5790
typedef enum {__anon90e1624b0c03155,5847
	OUTPUT_YUV_422 = 0x0, ///< YUV422OUTPUT_YUV_422156,5862
	OUTPUT_RGB_565 = 0x1, ///< RGB565OUTPUT_RGB_565157,5897
} CAMU_OutputFormat;CAMU_OutputFormat158,5932
typedef enum {__anon90e1624b0d03161,5981
	SHUTTER_SOUND_TYPE_NORMAL    = 0x0, ///< Normal shutter sound.SHUTTER_SOUND_TYPE_NORMAL162,5996
	SHUTTER_SOUND_TYPE_MOVIE     = 0x1, ///< Shutter sound to begin a movie.SHUTTER_SOUND_TYPE_MOVIE163,6060
	SHUTTER_SOUND_TYPE_MOVIE_END = 0x2, ///< Shutter sound to end a movie.SHUTTER_SOUND_TYPE_MOVIE_END164,6134
} CAMU_ShutterSoundType;CAMU_ShutterSoundType165,6206
typedef struct {__anon90e1624b0e08168,6268
	s16 aeBaseTarget;   ///< Auto exposure base target brightness.aeBaseTarget169,6285
	s16 kRL;            ///< Left color correction matrix red normalization coefficient.kRL170,6349
	s16 kGL;            ///< Left color correction matrix green normalization coefficient.kGL171,6435
	s16 kBL;            ///< Left color correction matrix blue normalization coefficient.kBL172,6523
	s16 ccmPosition;    ///< Color correction matrix position.ccmPosition173,6610
	u16 awbCcmL9Right;  ///< Right camera, left color correction matrix red/green gain.awbCcmL9Right174,6670
	u16 awbCcmL9Left;   ///< Left camera, left color correction matrix red/green gain.awbCcmL9Left175,6755
	u16 awbCcmL10Right; ///< Right camera, left color correction matrix blue/green gain.awbCcmL10Right176,6839
	u16 awbCcmL10Left;  ///< Left camera, left color correction matrix blue/green gain.awbCcmL10Left177,6925
	u16 awbX0Right;     ///< Right camera, color correction matrix position threshold.awbX0Right178,7010
	u16 awbX0Left;      ///< Left camera, color correction matrix position threshold.awbX0Left179,7094
} CAMU_ImageQualityCalibrationData;CAMU_ImageQualityCalibrationData180,7177
typedef struct {__anon90e1624b0f08183,7250
	u8 isValidRotationXY;   ///< #bool Whether the X and Y rotation data is valid.isValidRotationXY184,7267
	u8 padding[3];          ///< Padding. (Aligns isValidRotationXY to 4 bytes)padding185,7347
	float scale;            ///< Scale to match the left camera image with the right.scale186,7424
	float rotationZ;        ///< Z axis rotation to match the left camera image with the right.rotationZ187,7507
	float translationX;     ///< X axis translation to match the left camera image with the right.translationX188,7600
	float translationY;     ///< Y axis translation to match the left camera image with the right.translationY189,7696
	float rotationX;        ///< X axis rotation to match the left camera image with the right.rotationX190,7792
	float rotationY;        ///< Y axis rotation to match the left camera image with the right.rotationY191,7885
	float angleOfViewRight; ///< Right camera angle of view.angleOfViewRight192,7978
	float angleOfViewLeft;  ///< Left camera angle of view.angleOfViewLeft193,8036
	float distanceToChart;  ///< Distance between cameras and measurement chart.distanceToChart194,8093
	float distanceCameras;  ///< Distance between left and right cameras.distanceCameras195,8171
	s16 imageWidth;         ///< Image width.imageWidth196,8242
	s16 imageHeight;        ///< Image height.imageHeight197,8285
	u8 reserved[16];        ///< Reserved for future use. (unused)reserved198,8329
} CAMU_StereoCameraCalibrationData;CAMU_StereoCameraCalibrationData199,8393
typedef struct {__anon90e1624b1008202,8488
	u8 camera;                        ///< Selected camera.camera203,8505
	s8 exposure;                      ///< Camera exposure.exposure204,8562
	u8 whiteBalance;                  ///< #CAMU_WhiteBalance Camera white balance.whiteBalance205,8619
	s8 sharpness;                     ///< Camera sharpness.sharpness206,8700
	u8 autoExposureOn;                ///< #bool Whether to automatically determine the proper expoautoExposureOn207,8758
	u8 autoWhiteBalanceOn;            ///< #bool Whether to automatically determine the white balanautoWhiteBalanceOn208,8860
	u8 frameRate;                     ///< #CAMU_FrameRate Camera frame rate.frameRate209,8965
	u8 photoMode;                     ///< #CAMU_PhotoMode Camera photo mode.photoMode210,9040
	u8 contrast;                      ///< #CAMU_Contrast Camera contrast.contrast211,9115
	u8 lensCorrection;                ///< #CAMU_LensCorrection Camera lens correction.lensCorrection212,9187
	u8 noiseFilterOn;                 ///< #bool Whether to enable the camera's noise filter.noiseFilterOn213,9272
	u8 padding;                       ///< Padding. (Aligns last 3 fields to 4 bytes)padding214,9363
	s16 autoExposureWindowX;          ///< X of the region to use for auto exposure.autoExposureWindowX215,9446
	s16 autoExposureWindowY;          ///< Y of the region to use for auto exposure.autoExposureWindowY216,9528
	s16 autoExposureWindowWidth;      ///< Width of the region to use for auto exposure.autoExposureWindowWidth217,9610
	s16 autoExposureWindowHeight;     ///< Height of the region to use for auto exposure.autoExposureWindowHeight218,9696
	s16 autoWhiteBalanceWindowX;      ///< X of the region to use for auto white balance.autoWhiteBalanceWindowX219,9783
	s16 autoWhiteBalanceWindowY;      ///< Y of the region to use for auto white balance.autoWhiteBalanceWindowY220,9870
	s16 autoWhiteBalanceWindowWidth;  ///< Width of the region to use for auto white balance.autoWhiteBalanceWindowWidth221,9957
	s16 autoWhiteBalanceWindowHeight; ///< Height of the region to use for auto white balance.autoWhiteBalanceWindowHeight222,10048
} CAMU_PackageParameterCameraSelect;CAMU_PackageParameterCameraSelect223,10140
typedef struct {__anon90e1624b1108226,10233
	u8 camera;  ///< Selected camera.camera227,10250
	u8 context; ///< #CAMU_Context Selected context.context228,10285
	u8 flip;    ///< #CAMU_Flip Camera image flip mode.flip229,10335
	u8 effect;  ///< #CAMU_Effect Camera image special effects.effect230,10388
	u8 size;    ///< #CAMU_Size Camera image resolution.size231,10449
} CAMU_PackageParameterContext;CAMU_PackageParameterContext232,10503
typedef struct {__anon90e1624b1208235,10626
	u8 camera;  ///< Selected camera.camera236,10643
	u8 context; ///< #CAMU_Context Selected context.context237,10678
	u8 flip;    ///< #CAMU_Flip Camera image flip mode.flip238,10728
	u8 effect;  ///< #CAMU_Effect Camera image special effects.effect239,10781
	s16 width;  ///< Image width.width240,10842
	s16 height; ///< Image height.height241,10873
	s16 cropX0; ///< First crop point X.cropX0242,10905
	s16 cropY0; ///< First crop point Y.cropY0243,10943
	s16 cropX1; ///< Second crop point X.cropX1244,10981
	s16 cropY1; ///< Second crop point Y.cropY1245,11020
} CAMU_PackageParameterContextDetail;CAMU_PackageParameterContextDetail246,11059

include/3ds/services/cfgu.h,1707
{__anonad6602df010310,146
	CFG_REGION_JPN = 0, ///< JapanCFG_REGION_JPN11,148
	CFG_REGION_USA = 1, ///< USACFG_REGION_USA12,180
	CFG_REGION_EUR = 2, ///< EuropeCFG_REGION_EUR13,210
	CFG_REGION_AUS = 3, ///< AustraliaCFG_REGION_AUS14,243
	CFG_REGION_CHN = 4, ///< ChinaCFG_REGION_CHN15,279
	CFG_REGION_KOR = 5, ///< KoreaCFG_REGION_KOR16,311
	CFG_REGION_TWN = 6, ///< TaiwanCFG_REGION_TWN17,343
} CFG_Region;CFG_Region18,376
{__anonad6602df020322,439
	CFG_LANGUAGE_JP = 0,  ///< JapaneseCFG_LANGUAGE_JP23,441
	CFG_LANGUAGE_EN = 1,  ///< EnglishCFG_LANGUAGE_EN24,478
	CFG_LANGUAGE_FR = 2,  ///< FrenchCFG_LANGUAGE_FR25,514
	CFG_LANGUAGE_DE = 3,  ///< GermanCFG_LANGUAGE_DE26,549
	CFG_LANGUAGE_IT = 4,  ///< ItalianCFG_LANGUAGE_IT27,584
	CFG_LANGUAGE_ES = 5,  ///< SpanishCFG_LANGUAGE_ES28,620
	CFG_LANGUAGE_ZH = 6,  ///< Simplified ChineseCFG_LANGUAGE_ZH29,656
	CFG_LANGUAGE_KO = 7,  ///< KoreanCFG_LANGUAGE_KO30,703
	CFG_LANGUAGE_NL = 8,  ///< DutchCFG_LANGUAGE_NL31,738
	CFG_LANGUAGE_PT = 9,  ///< PortugeseCFG_LANGUAGE_PT32,772
	CFG_LANGUAGE_RU = 10, ///< RussianCFG_LANGUAGE_RU33,810
	CFG_LANGUAGE_TW = 11, ///< Traditional ChineseCFG_LANGUAGE_TW34,846
} CFG_Language;CFG_Language35,894
{__anonad6602df030339,962
	CFG_MODEL_3DS    = 0, ///< Old 3DS (CTR)CFG_MODEL_3DS40,964
	CFG_MODEL_3DSXL  = 1, ///< Old 3DS XL (SPR)CFG_MODEL_3DSXL41,1006
	CFG_MODEL_N3DS   = 2, ///< New 3DS (KTR)CFG_MODEL_N3DS42,1051
	CFG_MODEL_2DS    = 3, ///< Old 2DS (FTR)CFG_MODEL_2DS43,1093
	CFG_MODEL_N3DSXL = 4, ///< New 3DS XL (RED)CFG_MODEL_N3DSXL44,1135
	CFG_MODEL_N2DSXL = 5, ///< New 2DS XL (JAN)CFG_MODEL_N2DSXL45,1180
} CFG_SystemModel;CFG_SystemModel46,1225

include/3ds/services/ir.h,0

include/3ds/services/pmapp.h,887
enum {__anon52c151b8010311,188
	PMLAUNCHFLAG_NORMAL_APPLICATION            = BIT(0),PMLAUNCHFLAG_NORMAL_APPLICATION12,195
	PMLAUNCHFLAG_LOAD_DEPENDENCIES             = BIT(1),PMLAUNCHFLAG_LOAD_DEPENDENCIES13,249
	PMLAUNCHFLAG_NOTIFY_TERMINATION            = BIT(2),PMLAUNCHFLAG_NOTIFY_TERMINATION14,303
	PMLAUNCHFLAG_QUEUE_DEBUG_APPLICATION       = BIT(3),PMLAUNCHFLAG_QUEUE_DEBUG_APPLICATION15,357
	PMLAUNCHFLAG_TERMINATION_NOTIFICATION_MASK = 0xF0,PMLAUNCHFLAG_TERMINATION_NOTIFICATION_MASK16,411
	PMLAUNCHFLAG_FORCE_USE_O3DS_APP_MEM        = BIT(8),  ///< Forces the usage of the O3DS system PMLAUNCHFLAG_FORCE_USE_O3DS_APP_MEM17,463
	PMLAUNCHFLAG_FORCE_USE_O3DS_MAX_APP_MEM    = BIT(9),  ///< In conjunction with the above, forcePMLAUNCHFLAG_FORCE_USE_O3DS_MAX_APP_MEM18,665
	PMLAUNCHFLAG_USE_UPDATE_TITLE              = BIT(16),PMLAUNCHFLAG_USE_UPDATE_TITLE19,803

include/3ds/services/srvpm.h,0

include/3ds/services/pxipm.h,0

include/3ds/services/am.h,1931
{__anon617a43e8010811,171
	u64 titleID; ///< The title's ID.titleID12,173
	u64 size;    ///< The title's installed size.size13,208
	u16 version; ///< The title's version.version14,255
	u8 unk[6];   ///< Unknown title data.unk15,295
} AM_TitleEntry;AM_TitleEntry16,334
{__anon617a43e8020320,395
	AM_STATUS_MASK_INSTALLING = BIT(0),           ///< Titles currently installing.AM_STATUS_MASK_INSTALLING21,397
	AM_STATUS_MASK_AWAITING_FINALIZATION = BIT(1) ///< Titles awaiting finalization.AM_STATUS_MASK_AWAITING_FINALIZATION22,478
{__anon617a43e8030327,610
	AM_STATUS_ABORTED = 0x0002,              ///< Install aborted.AM_STATUS_ABORTED28,612
	AM_STATUS_SAVED = 0x0003,                ///< Title saved, but not installed.AM_STATUS_SAVED29,676
	AM_STATUS_INSTALL_IN_PROGRESS = 0x0802,  ///< Install in progress.AM_STATUS_INSTALL_IN_PROGRESS30,755
	AM_STATUS_AWAITING_FINALIZATION = 0x0803 ///< Awaiting finalization.AM_STATUS_AWAITING_FINALIZATION31,823
} AM_InstallStatus;AM_InstallStatus32,893
{__anon617a43e8040836,982
	u64 titleId;   ///< Title IDtitleId37,984
	u16 version;   ///< Versionversion38,1014
	u16 status;    ///< @ref AM_InstallStatusstatus39,1043
	u32 titleType; ///< Title TypetitleType40,1086
	u8 unk[0x8];   ///< Unknownunk41,1118
} AM_PendingTitleEntry;AM_PendingTitleEntry42,1147
{__anon617a43e8050346,1211
	AM_DELETE_PENDING_NON_SYSTEM = BIT(0), ///< Non-system titles.AM_DELETE_PENDING_NON_SYSTEM47,1213
	AM_DELETE_PENDING_SYSTEM = BIT(1)      ///< System titles.AM_DELETE_PENDING_SYSTEM48,1277
typedef struct {__anon617a43e8060852,1387
	u64 capacity;        ///< Total capacity.capacity53,1404
	u64 freeSpace;       ///< Total free space.freeSpace54,1447
	u64 titlesCapacity;  ///< Capacity for titles.titlesCapacity55,1492
	u64 titlesFreeSpace; ///< Free space for titles.titlesFreeSpace56,1540
} AM_TWLPartitionInfo;AM_TWLPartitionInfo57,1590

include/3ds/services/gsplcd.h,361
{__anon4d273677010311,144
	GSPLCD_SCREEN_TOP    = BIT(GSP_SCREEN_TOP),                      ///< Top screen.GSPLCD_SCREEN_TOP12,146
	GSPLCD_SCREEN_BOTTOM = BIT(GSP_SCREEN_BOTTOM),                   ///< Bottom screen.GSPLCD_SCREEN_BOTTOM13,229
	GSPLCD_SCREEN_BOTH   = GSPLCD_SCREEN_TOP | GSPLCD_SCREEN_BOTTOM, ///< Both screens.GSPLCD_SCREEN_BOTH14,315

include/3ds/services/ptmsysm.h,2030
typedef struct PtmWakeEvents {PtmWakeEvents10,181
	u32 pdn_wake_events;    ///< Written to PDN_WAKE_EVENTS. Don't select bit26 (MCU), PTM will do pdn_wake_events11,212
	u32 mcu_interupt_mask;  ///< MCU interrupts to check when a MCU wake event happens.mcu_interupt_mask12,326
} PtmWakeEvents;PtmWakeEvents13,411
typedef struct {__anon21ac9317010815,429
	PtmWakeEvents exit_sleep_events;       ///< Wake events for which the system should fully wake exit_sleep_events16,446
	PtmWakeEvents continue_sleep_events;   ///< Wake events for which the system should return to scontinue_sleep_events17,546
} PtmSleepConfig;PtmSleepConfig18,648
enum {__anon21ac9317020320,667
	PTMNOTIFID_SLEEP_REQUESTED  = 0x101, ///< @ref PTMSYSM_RequestSleep has been called (ack = 3)PTMNOTIFID_SLEEP_REQUESTED22,705
	PTMNOTIFID_SLEEP_DENIED     = 0x102, ///< The sleep request has been denied by @ref PTMSYSM_RepPTMNOTIFID_SLEEP_DENIED23,800
	PTMNOTIFID_SLEEP_ALLOWED    = 0x103, ///< The sleep request has been allowed by @ref PTMSYSM_RePTMNOTIFID_SLEEP_ALLOWED24,936
	PTMNOTIFID_GOING_TO_SLEEP   = 0x104, ///< All processes not having "RunnableOnSleep" have been PTMNOTIFID_GOING_TO_SLEEP25,1066
	PTMNOTIFID_FULLY_WAKING_UP  = 0x105, ///< The system has been woken up, and the paused processePTMNOTIFID_FULLY_WAKING_UP26,1217
	PTMNOTIFID_FULLY_AWAKE      = 0x106, ///< The system is fully awake (no ack required).PTMNOTIFID_FULLY_AWAKE27,1351
	PTMNOTIFID_HALF_AWAKE       = 0x107, ///< The system has been woken up but is about to go to slPTMNOTIFID_HALF_AWAKE28,1439
	PTMNOTIFID_SHUTDOWN         = 0x108, ///< The system is about to power off or reboot.PTMNOTIFID_SHUTDOWN30,1557
	PTMNOTIFID_BATTERY_VERY_LOW = 0x211, ///< The battery level has reached 5% or below.PTMNOTIFID_BATTERY_VERY_LOW32,1645
	PTMNOTIFID_BATTERY_LOW      = 0x212, ///< The battery level has reached 10% or below.PTMNOTIFID_BATTERY_LOW33,1731
static inline s32 ptmSysmGetNotificationAckValue(u32 id)ptmSysmGetNotificationAckValue37,1953

include/3ds/services/ampxi.h,0

include/3ds/services/irrst.h,45
#define hidCstickRead hidCstickRead48,1025

include/3ds/services/ns.h,0

include/3ds/services/fspxi.h,142
typedef u64 FSPXI_Archive;FSPXI_Archive10,238
typedef u64 FSPXI_File;FSPXI_File11,265
typedef u64 FSPXI_Directory;FSPXI_Directory12,289

include/3ds/services/ndm.h,2825
typedef enum {__anon91aa14f901038,120
	NDM_EXCLUSIVE_STATE_NONE = 0,NDM_EXCLUSIVE_STATE_NONE9,135
	NDM_EXCLUSIVE_STATE_INFRASTRUCTURE = 1,NDM_EXCLUSIVE_STATE_INFRASTRUCTURE10,166
	NDM_EXCLUSIVE_STATE_LOCAL_COMMUNICATIONS = 2,NDM_EXCLUSIVE_STATE_LOCAL_COMMUNICATIONS11,207
	NDM_EXCLUSIVE_STATE_STREETPASS = 3,NDM_EXCLUSIVE_STATE_STREETPASS12,254
	NDM_EXCLUSIVE_STATE_STREETPASS_DATA = 4,NDM_EXCLUSIVE_STATE_STREETPASS_DATA13,291
} ndmExclusiveState;ndmExclusiveState14,333
typedef enum {__anon91aa14f9020317,375
	NDM_STATE_INITIAL = 0,NDM_STATE_INITIAL18,390
	NDM_STATE_SUSPENDED = 1,NDM_STATE_SUSPENDED19,414
	NDM_STATE_INFRASTRUCTURE_CONNECTING = 2,NDM_STATE_INFRASTRUCTURE_CONNECTING20,440
	NDM_STATE_INFRASTRUCTURE_CONNECTED = 3,NDM_STATE_INFRASTRUCTURE_CONNECTED21,482
	NDM_STATE_INFRASTRUCTURE_WORKING = 4,NDM_STATE_INFRASTRUCTURE_WORKING22,523
	NDM_STATE_INFRASTRUCTURE_SUSPENDING = 5,NDM_STATE_INFRASTRUCTURE_SUSPENDING23,562
	NDM_STATE_INFRASTRUCTURE_FORCE_SUSPENDING = 6,NDM_STATE_INFRASTRUCTURE_FORCE_SUSPENDING24,604
	NDM_STATE_INFRASTRUCTURE_DISCONNECTING = 7,NDM_STATE_INFRASTRUCTURE_DISCONNECTING25,652
	NDM_STATE_INFRASTRUCTURE_FORCE_DISCONNECTING = 8,NDM_STATE_INFRASTRUCTURE_FORCE_DISCONNECTING26,697
	NDM_STATE_CEC_WORKING = 9,NDM_STATE_CEC_WORKING27,748
	NDM_STATE_CEC_FORCE_SUSPENDING = 10,NDM_STATE_CEC_FORCE_SUSPENDING28,776
	NDM_STATE_CEC_SUSPENDING = 11,NDM_STATE_CEC_SUSPENDING29,814
} ndmState;ndmState30,846
typedef enum {__anon91aa14f9030333,871
	NDM_DAEMON_CEC = 0,NDM_DAEMON_CEC34,886
	NDM_DAEMON_BOSS = 1,NDM_DAEMON_BOSS35,907
	NDM_DAEMON_NIM = 2,NDM_DAEMON_NIM36,929
	NDM_DAEMON_FRIENDS = 3,NDM_DAEMON_FRIENDS37,950
} ndmDaemon;ndmDaemon38,975
typedef enum {__anon91aa14f9040341,1027
	NDM_DAEMON_MASK_CEC = BIT(NDM_DAEMON_CEC),NDM_DAEMON_MASK_CEC42,1042
	NDM_DAEMON_MASK_BOSS = BIT(NDM_DAEMON_BOSS),NDM_DAEMON_MASK_BOSS43,1086
	NDM_DAEMON_MASK_NIM = BIT(NDM_DAEMON_NIM),NDM_DAEMON_MASK_NIM44,1132
	NDM_DAEMON_MASK_FRIENDS = BIT(NDM_DAEMON_FRIENDS),NDM_DAEMON_MASK_FRIENDS45,1176
	NDM_DAEMON_MASK_BACKGROUOND = NDM_DAEMON_MASK_CEC | NDM_DAEMON_MASK_BOSS | NDM_DAEMON_MASK_NIM,NDM_DAEMON_MASK_BACKGROUOND46,1228
	NDM_DAEMON_MASK_ALL = NDM_DAEMON_MASK_CEC | NDM_DAEMON_MASK_BOSS | NDM_DAEMON_MASK_NIM | NDM_DANDM_DAEMON_MASK_ALL47,1325
	NDM_DAEMON_MASK_DEFAULT = NDM_DAEMON_MASK_CEC | NDM_DAEMON_MASK_FRIENDS,NDM_DAEMON_MASK_DEFAULT48,1440
} ndmDaemonMask;ndmDaemonMask49,1514
typedef enum {__anon91aa14f9050352,1550
	NDM_DAEMON_STATUS_BUSY = 0,NDM_DAEMON_STATUS_BUSY53,1565
	NDM_DAEMON_STATUS_IDLE = 1,NDM_DAEMON_STATUS_IDLE54,1594
	NDM_DAEMON_STATUS_SUSPENDING = 2,NDM_DAEMON_STATUS_SUSPENDING55,1623
	NDM_DAEMON_STATUS_SUSPENDED = 3,NDM_DAEMON_STATUS_SUSPENDED56,1658
} ndmDaemonStatus;ndmDaemonStatus57,1692

include/3ds/services/gspgpu.h,3303
#define GSP_SCREEN_TOP GSP_SCREEN_TOP7,66
#define GSP_SCREEN_BOTTOM GSP_SCREEN_BOTTOM8,130
#define GSP_SCREEN_WIDTH GSP_SCREEN_WIDTH9,197
#define GSP_SCREEN_HEIGHT_TOP GSP_SCREEN_HEIGHT_TOP10,272
#define GSP_SCREEN_HEIGHT_TOP_2X GSP_SCREEN_HEIGHT_TOP_2X11,340
#define GSP_SCREEN_HEIGHT_BOTTOM GSP_SCREEN_HEIGHT_BOTTOM12,413
{__anon4cd42530010816,529
	u32 active_framebuf;        ///< Active framebuffer. (0 = first, 1 = second)active_framebuf17,531
	u32 *framebuf0_vaddr;       ///< Framebuffer virtual address, for the main screen this is the 3framebuf0_vaddr18,609
	u32 *framebuf1_vaddr;       ///< For the main screen: 3D right framebuffer address.framebuf1_vaddr19,725
	u32 framebuf_widthbytesize; ///< Value for 0x1EF00X90, controls framebuffer width.framebuf_widthbytesize20,810
	u32 format;                 ///< Framebuffer format, this u16 is written to the low u16 for LCDformat21,894
	u32 framebuf_dispselect;    ///< Value for 0x1EF00X78, controls which framebuffer is displayed.framebuf_dispselect22,1012
	u32 unk;                    ///< Unknown.unk23,1109
} GSPGPU_FramebufferInfo;GSPGPU_FramebufferInfo24,1152
{__anon4cd42530020328,1216
	GSP_RGBA8_OES=0,   ///< RGBA8. (4 bytes)GSP_RGBA8_OES29,1218
	GSP_BGR8_OES=1,    ///< BGR8. (3 bytes)GSP_BGR8_OES30,1260
	GSP_RGB565_OES=2,  ///< RGB565. (2 bytes)GSP_RGB565_OES31,1301
	GSP_RGB5_A1_OES=3, ///< RGB5A1. (2 bytes)GSP_RGB5_A1_OES32,1344
	GSP_RGBA4_OES=4    ///< RGBA4. (2 bytes)GSP_RGBA4_OES33,1387
} GSPGPU_FramebufferFormat;GSPGPU_FramebufferFormat34,1429
{__anon4cd42530030838,1497
	u32 *framebuf0_vaddr;       ///< Left framebuffer.framebuf0_vaddr39,1499
	u32 *framebuf1_vaddr;       ///< Right framebuffer.framebuf1_vaddr40,1551
	u32 format;                 ///< Framebuffer format.format41,1604
	u32 framebuf_widthbytesize; ///< Framebuffer pitch.framebuf_widthbytesize42,1658
} GSPGPU_CaptureInfoEntry;GSPGPU_CaptureInfoEntry43,1711
{__anon4cd42530040847,1772
	GSPGPU_CaptureInfoEntry screencapture[2]; ///< Capture info entries, one for each screen.screencapture48,1774
} GSPGPU_CaptureInfo;GSPGPU_CaptureInfo49,1865
{__anon4cd42530050353,1920
	GSPGPU_EVENT_PSC0 = 0, ///< Memory fill completed.GSPGPU_EVENT_PSC054,1922
	GSPGPU_EVENT_PSC1,     ///< TODOGSPGPU_EVENT_PSC155,1974
	GSPGPU_EVENT_VBlank0,  ///< TODOGSPGPU_EVENT_VBlank056,2008
	GSPGPU_EVENT_VBlank1,  ///< TODOGSPGPU_EVENT_VBlank157,2042
	GSPGPU_EVENT_PPF,      ///< Display transfer finished.GSPGPU_EVENT_PPF58,2076
	GSPGPU_EVENT_P3D,      ///< Command list processing finished.GSPGPU_EVENT_P3D59,2132
	GSPGPU_EVENT_DMA,      ///< TODOGSPGPU_EVENT_DMA60,2195
	GSPGPU_EVENT_MAX,      ///< Used to know how many events there are.GSPGPU_EVENT_MAX62,2230
} GSPGPU_Event;GSPGPU_Event63,2299
static inline unsigned gspGetBytesPerPixel(GSPGPU_FramebufferFormat format)gspGetBytesPerPixel70,2475
#define gspWaitForPSC0(gspWaitForPSC0132,4580
#define gspWaitForPSC1(gspWaitForPSC1135,4667
#define gspWaitForVBlank(gspWaitForVBlank138,4757
#define gspWaitForVBlank0(gspWaitForVBlank0141,4828
#define gspWaitForVBlank1(gspWaitForVBlank1144,4924
#define gspWaitForPPF(gspWaitForPPF147,5016
#define gspWaitForP3D(gspWaitForP3D150,5101
#define gspWaitForDMA(gspWaitForDMA153,5186

include/3ds/services/dsp.h,741
{__anon90fd6661010312,276
	DSP_INTERRUPT_PIPE = 2 ///< Pipe interrupt.DSP_INTERRUPT_PIPE13,278
} DSP_InterruptType;DSP_InterruptType14,323
{__anon90fd6661020318,378
	DSPHOOK_ONSLEEP  = 0, ///< DSP is going to sleep.DSPHOOK_ONSLEEP19,380
	DSPHOOK_ONWAKEUP = 1, ///< DSP is waking up.DSPHOOK_ONWAKEUP20,431
	DSPHOOK_ONCANCEL = 2, ///< DSP was sleeping and the app was cancelled.DSPHOOK_ONCANCEL21,477
} DSP_HookType;DSP_HookType22,549
typedef void (* dspHookFn)(DSP_HookType hook);dspHookFn25,589
typedef struct tag_dspHookCookietag_dspHookCookie28,658
	struct tag_dspHookCookie* next; ///< Next cookie.next30,693
	dspHookFn callback;             ///< Hook callback.callback31,744
} dspHookCookie;dspHookCookie32,797

include/3ds/services/csnd.h,3575
#define CSND_NUM_CHANNELS CSND_NUM_CHANNELS10,177
#define CSND_TIMER(CSND_TIMER13,258
static inline u32 CSND_VOL(float vol, float pan)CSND_VOL21,512
{__anonae54cfc2010340,862
	CSND_ENCODING_PCM8 = 0, ///< PCM8CSND_ENCODING_PCM841,864
	CSND_ENCODING_PCM16,    ///< PCM16CSND_ENCODING_PCM1642,899
	CSND_ENCODING_ADPCM,    ///< IMA-ADPCMCSND_ENCODING_ADPCM43,935
	CSND_ENCODING_PSG,      ///< PSG (Similar to DS?)CSND_ENCODING_PSG44,975
{__anonae54cfc2020349,1056
	CSND_LOOPMODE_MANUAL = 0, ///< Manual loop.CSND_LOOPMODE_MANUAL50,1058
	CSND_LOOPMODE_NORMAL,     ///< Normal loop.CSND_LOOPMODE_NORMAL51,1103
	CSND_LOOPMODE_ONESHOT,    ///< Do not loop.CSND_LOOPMODE_ONESHOT52,1148
	CSND_LOOPMODE_NORELOAD,   ///< Don't reload.CSND_LOOPMODE_NORELOAD53,1193
#define SOUND_CHANNEL(SOUND_CHANNEL57,1300
#define SOUND_FORMAT(SOUND_FORMAT60,1395
#define SOUND_LOOPMODE(SOUND_LOOPMODE63,1491
{__anonae54cfc2030367,1557
	SOUND_LINEAR_INTERP = BIT(6),                           ///< Linear interpolation.SOUND_LINEAR_INTERP68,1559
	SOUND_REPEAT = SOUND_LOOPMODE(CSND_LOOPMODE_NORMAL),    ///< Repeat the sound.SOUND_REPEAT69,1643
	SOUND_ONE_SHOT = SOUND_LOOPMODE(CSND_LOOPMODE_ONESHOT), ///< Play the sound once.SOUND_ONE_SHOT70,1723
	SOUND_FORMAT_8BIT = SOUND_FORMAT(CSND_ENCODING_PCM8),   ///< PCM8SOUND_FORMAT_8BIT71,1806
	SOUND_FORMAT_16BIT = SOUND_FORMAT(CSND_ENCODING_PCM16), ///< PCM16SOUND_FORMAT_16BIT72,1873
	SOUND_FORMAT_ADPCM = SOUND_FORMAT(CSND_ENCODING_ADPCM), ///< ADPCMSOUND_FORMAT_ADPCM73,1941
	SOUND_FORMAT_PSG = SOUND_FORMAT(CSND_ENCODING_PSG),     ///< PSGSOUND_FORMAT_PSG74,2009
	SOUND_ENABLE = BIT(14),                                 ///< Enable sound.SOUND_ENABLE75,2075
{__anonae54cfc2040380,2179
	CAPTURE_REPEAT = 0,           ///< Repeat capture.CAPTURE_REPEAT81,2181
	CAPTURE_ONE_SHOT = BIT(0),    ///< Capture once.CAPTURE_ONE_SHOT82,2233
	CAPTURE_FORMAT_16BIT = 0,     ///< PCM16CAPTURE_FORMAT_16BIT83,2283
	CAPTURE_FORMAT_8BIT = BIT(1), ///< PCM8CAPTURE_FORMAT_8BIT84,2325
	CAPTURE_ENABLE = BIT(15),     ///< Enable capture.CAPTURE_ENABLE85,2366
{__anonae54cfc2050390,2470
	DutyCycle_0  = 7, ///< 0.0% duty cycleDutyCycle_091,2472
	DutyCycle_12 = 0, ///< 12.5% duty cycleDutyCycle_1292,2512
	DutyCycle_25 = 1, ///< 25.0% duty cycleDutyCycle_2593,2553
	DutyCycle_37 = 2, ///< 37.5% duty cycleDutyCycle_3794,2594
	DutyCycle_50 = 3, ///< 50.0% duty cycleDutyCycle_5095,2635
	DutyCycle_62 = 4, ///< 62.5% duty cycleDutyCycle_6296,2676
	DutyCycle_75 = 5, ///< 75.0% duty cycleDutyCycle_7597,2717
	DutyCycle_87 = 6  ///< 87.5% duty cycleDutyCycle_8798,2758
} CSND_DutyCycle;CSND_DutyCycle99,2799
{__anonae54cfc2060a103,2850
	u32 value[3]; ///< Raw values.value104,2852
	{__anonae54cfc20708106,2892
		u8 active;       ///< Channel active.active107,2895
		u8 _pad1;        ///< Padding._pad1108,2935
		u16 _pad2;       ///< Padding._pad2109,2968
		s16 adpcmSample; ///< Current ADPCM sample.adpcmSample110,3001
		u8 adpcmIndex;   ///< Current ADPCM index.adpcmIndex111,3047
		u8 _pad3;        ///< Padding._pad3112,3092
		u32 unknownZero; ///< Unknown.unknownZero113,3125
} CSND_ChnInfo;CSND_ChnInfo115,3162
{__anonae54cfc2080a119,3211
	u32 value[2]; ///< Raw values.value120,3213
	{__anonae54cfc20908122,3253
		u8 active;       ///< Capture active.active123,3256
		u8 _pad1;        ///< Padding._pad1124,3296
		u16 _pad2;       ///< Padding._pad2125,3329
		u32 unknownZero; ///< Unknown.unknownZero126,3362
} CSND_CapInfo;CSND_CapInfo128,3399

include/3ds/services/boss.h,1444
{__anonabba42d101089,147
	u32 property[0x7];property10,149
	char url[0x200];url12,170
	u32 property_x8;property_x814,189
	u8 property_x9;property_x915,207
	u8 property_xa[0x100];property_xa17,225
	u8 property_xb[0x200];property_xb19,250
	char property_xd[0x360];//Additonal optional HTTP request headers.property_xd21,275
	u32 property_xe;property_xe23,344
	u32 property_xf[0xc>>2];property_xf25,363
	u8 property_x10;property_x1027,390
	u8 property_x11;property_x1128,408
	u8 property_x12;property_x1229,426
	u32 property_x13;property_x1330,444
	u32 property_x14;property_x1431,463
	u8 property_x15[0x40];property_x1533,483
	u32 property_x16;property_x1635,508
	u32 property_x3b;property_x3b37,528
	u8 property_x3e[0x200];property_x3e39,548
} bossContext;bossContext40,573
typedef enum {__anonabba42d1020343,611
	BOSSTASKSTATUS_STARTED = 0x2,BOSSTASKSTATUS_STARTED44,626
	BOSSTASKSTATUS_ERROR = 0x7,BOSSTASKSTATUS_ERROR45,657
} bossTaskStatus;bossTaskStatus46,686
typedef enum {__anonabba42d1030349,752
	bossNsDataHeaderInfoType_ContentSize = 0x3 /// Size of the content.bossNsDataHeaderInfoType_ContentSize50,767
} bossNsDataHeaderInfoTypes;bossNsDataHeaderInfoTypes51,836
typedef enum {__anonabba42d1040354,925
	bossNsDataHeaderInfoTypeSize_ContentSize = 0x4 ///Type2bossNsDataHeaderInfoTypeSize_ContentSize55,940
} bossNsDataHeaderInfoTypeSizes;bossNsDataHeaderInfoTypeSizes56,997

include/3ds/services/ac.h,744
typedef enum {__anon617a195e01038,83
	AC_OPEN = 0,       ///< Open authentication.AC_OPEN9,98
	AC_WEP_40BIT = 1,  ///< WEP 40-bit authentication.AC_WEP_40BIT10,144
	AC_WEP_104BIT = 2, ///< WEP 104-bit authentication.AC_WEP_104BIT11,196
	AC_WEP_128BIT = 3, ///< WEP 128-bit authentication.AC_WEP_128BIT12,249
	AC_WPA_TKIP = 4,   ///< WPA TKIP authentication.AC_WPA_TKIP13,302
	AC_WPA2_TKIP = 5,  ///< WPA2 TKIP authentication.AC_WPA2_TKIP14,352
	AC_WPA_AES = 6,    ///< WPA AES authentication.AC_WPA_AES15,403
	AC_WPA2_AES = 7,   ///< WPA2 AES authentication.AC_WPA2_AES16,452
} acSecurityMode;acSecurityMode17,502
typedef struct {__anon617a195e020820,605
	u8 reserved[0x200];reserved21,622
} acuConfig;acuConfig22,643

include/3ds/services/fs.h,9797
{__anon617d1b53010311,111
	FS_OPEN_READ   = BIT(0), ///< Open for reading.FS_OPEN_READ12,113
	FS_OPEN_WRITE  = BIT(1), ///< Open for writing.FS_OPEN_WRITE13,162
	FS_OPEN_CREATE = BIT(2), ///< Create file.FS_OPEN_CREATE14,211
{__anon617d1b53020319,281
	FS_WRITE_FLUSH       = BIT(0), ///< Flush.FS_WRITE_FLUSH20,283
	FS_WRITE_UPDATE_TIME = BIT(8), ///< Update file timestamp.FS_WRITE_UPDATE_TIME21,327
{__anon617d1b53030326,417
	FS_ATTRIBUTE_DIRECTORY = BIT(0),  ///< Directory.FS_ATTRIBUTE_DIRECTORY27,419
	FS_ATTRIBUTE_HIDDEN    = BIT(8),  ///< Hidden.FS_ATTRIBUTE_HIDDEN28,470
	FS_ATTRIBUTE_ARCHIVE   = BIT(16), ///< Archive.FS_ATTRIBUTE_ARCHIVE29,518
	FS_ATTRIBUTE_READ_ONLY = BIT(24), ///< Read-only.FS_ATTRIBUTE_READ_ONLY30,567
{__anon617d1b53040335,652
	MEDIATYPE_NAND      = 0, ///< NAND.MEDIATYPE_NAND36,654
	MEDIATYPE_SD        = 1, ///< SD card.MEDIATYPE_SD37,691
	MEDIATYPE_GAME_CARD = 2, ///< Game card.MEDIATYPE_GAME_CARD38,731
} FS_MediaType;FS_MediaType39,773
{__anon617d1b53050343,827
	SYSTEM_MEDIATYPE_CTR_NAND  = 0, ///< CTR NAND.SYSTEM_MEDIATYPE_CTR_NAND44,829
	SYSTEM_MEDIATYPE_TWL_NAND  = 1, ///< TWL NAND.SYSTEM_MEDIATYPE_TWL_NAND45,877
	SYSTEM_MEDIATYPE_SD        = 2, ///< SD card.SYSTEM_MEDIATYPE_SD46,925
	SYSTEM_MEDIATYPE_TWL_PHOTO = 3, ///< TWL Photo.SYSTEM_MEDIATYPE_TWL_PHOTO47,972
} FS_SystemMediaType;FS_SystemMediaType48,1021
{__anon617d1b53060352,1074
	ARCHIVE_ROMFS                    = 0x00000003, ///< RomFS archive.ARCHIVE_ROMFS53,1076
	ARCHIVE_SAVEDATA                 = 0x00000004, ///< Save data archive.ARCHIVE_SAVEDATA54,1144
	ARCHIVE_EXTDATA                  = 0x00000006, ///< Ext data archive.ARCHIVE_EXTDATA55,1216
	ARCHIVE_SHARED_EXTDATA           = 0x00000007, ///< Shared ext data archive.ARCHIVE_SHARED_EXTDATA56,1287
	ARCHIVE_SYSTEM_SAVEDATA          = 0x00000008, ///< System save data archive.ARCHIVE_SYSTEM_SAVEDATA57,1365
	ARCHIVE_SDMC                     = 0x00000009, ///< SDMC archive.ARCHIVE_SDMC58,1444
	ARCHIVE_SDMC_WRITE_ONLY          = 0x0000000A, ///< Write-only SDMC archive.ARCHIVE_SDMC_WRITE_ONLY59,1511
	ARCHIVE_BOSS_EXTDATA             = 0x12345678, ///< BOSS ext data archive.ARCHIVE_BOSS_EXTDATA60,1589
	ARCHIVE_CARD_SPIFS               = 0x12345679, ///< Card SPI FS archive.ARCHIVE_CARD_SPIFS61,1665
	ARCHIVE_EXTDATA_AND_BOSS_EXTDATA = 0x1234567B, ///< Ext data and BOSS ext data archive.ARCHIVE_EXTDATA_AND_BOSS_EXTDATA62,1739
	ARCHIVE_SYSTEM_SAVEDATA2         = 0x1234567C, ///< System save data archive.ARCHIVE_SYSTEM_SAVEDATA263,1828
	ARCHIVE_NAND_RW                  = 0x1234567D, ///< Read-write NAND archive.ARCHIVE_NAND_RW64,1907
	ARCHIVE_NAND_RO                  = 0x1234567E, ///< Read-only NAND archive.ARCHIVE_NAND_RO65,1985
	ARCHIVE_NAND_RO_WRITE_ACCESS     = 0x1234567F, ///< Read-only write access NAND archive.ARCHIVE_NAND_RO_WRITE_ACCESS66,2062
	ARCHIVE_SAVEDATA_AND_CONTENT     = 0x2345678A, ///< User save data and ExeFS/RomFS archive.ARCHIVE_SAVEDATA_AND_CONTENT67,2152
	ARCHIVE_SAVEDATA_AND_CONTENT2    = 0x2345678E, ///< User save data and ExeFS/RomFS archive (onlARCHIVE_SAVEDATA_AND_CONTENT268,2245
	ARCHIVE_NAND_CTR_FS              = 0x567890AB, ///< NAND CTR FS archive.ARCHIVE_NAND_CTR_FS69,2362
	ARCHIVE_TWL_PHOTO                = 0x567890AC, ///< TWL PHOTO archive.ARCHIVE_TWL_PHOTO70,2436
	ARCHIVE_TWL_SOUND                = 0x567890AD, ///< TWL SOUND archive.ARCHIVE_TWL_SOUND71,2508
	ARCHIVE_NAND_TWL_FS              = 0x567890AE, ///< NAND TWL FS archive.ARCHIVE_NAND_TWL_FS72,2580
	ARCHIVE_NAND_W_FS                = 0x567890AF, ///< NAND W FS archive.ARCHIVE_NAND_W_FS73,2654
	ARCHIVE_GAMECARD_SAVEDATA        = 0x567890B1, ///< Game card save data archive.ARCHIVE_GAMECARD_SAVEDATA74,2726
	ARCHIVE_USER_SAVEDATA            = 0x567890B2, ///< User save data archive.ARCHIVE_USER_SAVEDATA75,2808
	ARCHIVE_DEMO_SAVEDATA            = 0x567890B4, ///< Demo save data archive.ARCHIVE_DEMO_SAVEDATA76,2885
} FS_ArchiveID;FS_ArchiveID77,2962
{__anon617d1b53070381,3008
	PATH_INVALID = 0, ///< Invalid path.PATH_INVALID82,3010
	PATH_EMPTY   = 1, ///< Empty path.PATH_EMPTY83,3048
	PATH_BINARY  = 2, ///< Binary path. Meaning is per-archive.PATH_BINARY84,3084
	PATH_ASCII   = 3, ///< ASCII text path.PATH_ASCII85,3145
	PATH_UTF16   = 4, ///< UTF-16 text path.PATH_UTF1686,3186
} FS_PathType;FS_PathType87,3228
{__anon617d1b53080391,3280
	SECUREVALUE_SLOT_SD = 0x1000, ///< SD application.SECUREVALUE_SLOT_SD92,3282
} FS_SecureValueSlot;FS_SecureValueSlot93,3334
{__anon617d1b53090397,3394
	BAUDRATE_512KHZ = 0, ///< 512KHz.BAUDRATE_512KHZ98,3396
	BAUDRATE_1MHZ   = 1, ///< 1MHz.BAUDRATE_1MHZ99,3431
	BAUDRATE_2MHZ   = 2, ///< 2MHz.BAUDRATE_2MHZ100,3464
	BAUDRATE_4MHZ   = 3, ///< 4MHz.BAUDRATE_4MHZ101,3497
	BAUDRATE_8MHZ   = 4, ///< 8MHz.BAUDRATE_8MHZ102,3530
	BAUDRATE_16MHZ  = 5, ///< 16MHz.BAUDRATE_16MHZ103,3563
} FS_CardSpiBaudRate;FS_CardSpiBaudRate104,3597
{__anon617d1b530a03108,3656
	BUSMODE_1BIT = 0, ///< 1-bit.BUSMODE_1BIT109,3658
	BUSMODE_4BIT = 1, ///< 4-bit.BUSMODE_4BIT110,3689
} FS_CardSpiBusMode;FS_CardSpiBusMode111,3720
{__anon617d1b530b03115,3778
	SPECIALCONTENT_UPDATE    = 1, ///< Update.SPECIALCONTENT_UPDATE116,3780
	SPECIALCONTENT_MANUAL    = 2, ///< Manual.SPECIALCONTENT_MANUAL117,3824
	SPECIALCONTENT_DLP_CHILD = 3, ///< DLP child.SPECIALCONTENT_DLP_CHILD118,3868
} FS_SpecialContentType;FS_SpecialContentType119,3915
{__anon617d1b530c03122,3954
	CARD_CTR = 0, ///< CTR card.CARD_CTR123,3956
	CARD_TWL = 1, ///< TWL card.CARD_TWL124,3986
} FS_CardType;FS_CardType125,4016
{__anon617d1b530d03129,4069
	FS_ACTION_UNKNOWN = 0,FS_ACTION_UNKNOWN130,4071
} FS_Action;FS_Action131,4095
{__anon617d1b530e03135,4151
	ARCHIVE_ACTION_COMMIT_SAVE_DATA = 0, ///< Commits save data changes. No inputs/outputs.ARCHIVE_ACTION_COMMIT_SAVE_DATA136,4153
	ARCHIVE_ACTION_GET_TIMESTAMP    = 1, ///< Retrieves a file's last-modified timestamp. In: "u16*ARCHIVE_ACTION_GET_TIMESTAMP137,4242
	ARCHIVE_ACTION_UNKNOWN          = 0x789D, //< Unknown action; calls FSPXI command 0x56. In: "FSARCHIVE_ACTION_UNKNOWN138,4378
} FS_ArchiveAction;FS_ArchiveAction139,4514
{__anon617d1b530f03143,4581
	SECURESAVE_ACTION_DELETE = 0, ///< Deletes a save's secure value. In: "u64, ((SecureValueSlot <SECURESAVE_ACTION_DELETE144,4583
	SECURESAVE_ACTION_FORMAT = 1, ///< Formats a save. No inputs/outputs.SECURESAVE_ACTION_FORMAT145,4753
} FS_SecureSaveAction;FS_SecureSaveAction146,4824
{__anon617d1b531003150,4887
	FILE_ACTION_UNKNOWN = 0,FILE_ACTION_UNKNOWN151,4889
} FS_FileAction;FS_FileAction152,4915
{__anon617d1b531103156,4977
	DIRECTORY_ACTION_UNKNOWN = 0,DIRECTORY_ACTION_UNKNOWN157,4979
} FS_DirectoryAction;FS_DirectoryAction158,5010
{__anon617d1b531208162,5069
	u16 name[0x106];      ///< UTF-16 directory name.name163,5071
	char shortName[0x0A]; ///< File name.shortName164,5122
	char shortExt[0x04];  ///< File extension.shortExt165,5161
	u8 valid;             ///< Valid flag. (Always 1)valid166,5205
	u8 reserved;          ///< Reserved.reserved167,5256
	u32 attributes;       ///< Attributes.attributes168,5294
	u64 fileSize;         ///< File size.fileSize169,5334
} FS_DirectoryEntry;FS_DirectoryEntry170,5373
{__anon617d1b531308174,5444
	u32 sectorSize;    ///< Size of each sector, in bytes.sectorSize175,5446
	u32 clusterSize;   ///< Size of each cluster, in bytes.clusterSize176,5502
	u32 totalClusters; ///< Total number of clusters.totalClusters177,5559
	u32 freeClusters;  ///< Number of free clusters.freeClusters178,5610
} FS_ArchiveResource;FS_ArchiveResource179,5660
{__anon617d1b531408183,5723
	u64 programId;              ///< Program ID.programId184,5725
	FS_MediaType mediaType : 8; ///< Media type.mediaType185,5771
	u8 padding[7];              ///< Padding.padding186,5817
} FS_ProgramInfo;FS_ProgramInfo187,5860
{__anon617d1b531508191,5919
	char productCode[0x10]; ///< Product code.productCode192,5921
	char companyCode[0x2];  ///< Company code.companyCode193,5965
	u16 remasterVersion;    ///< Remaster version.remasterVersion194,6009
} FS_ProductInfo;FS_ProductInfo195,6057
{__anon617d1b531608199,6124
	u8 aesCbcMac[0x10];   ///< AES-CBC MAC over a SHA256 hash, which hashes the first 0x110-bytes oaesCbcMac200,6126
	u8 movableSed[0x120]; ///< The "nand/private/movable.sed", encrypted with AES-CTR using the abomovableSed201,6244
} FS_IntegrityVerificationSeed;FS_IntegrityVerificationSeed202,6364
typedef struct PACKEDPACKED205,6428
	FS_MediaType mediaType : 8; ///< Media type.mediaType207,6452
	u8 unknown;                 ///< Unknown.unknown208,6498
	u16 reserved1;              ///< Reserved.reserved1209,6541
	u64 saveId;                 ///< Save ID.saveId210,6585
	u32 reserved2;              ///< Reserved.reserved2211,6628
} FS_ExtSaveDataInfo;FS_ExtSaveDataInfo212,6672
{__anon617d1b531708216,6744
	FS_MediaType mediaType : 8; ///< Media type.mediaType217,6746
	u8 unknown;                 ///< Unknown.unknown218,6792
	u16 reserved;               ///< Reserved.reserved219,6835
	u32 saveId;                 ///< Save ID.saveId220,6879
} FS_SystemSaveDataInfo;FS_SystemSaveDataInfo221,6922
{__anon617d1b531808225,6988
	u8 ivs[0x10];              ///< IVs.ivs226,6990
	u8 encryptParameter[0x10]; ///< Encrypt parameter.encryptParameter227,7028
} FS_DeviceMoveContext;FS_DeviceMoveContext228,7080
{__anon617d1b531908232,7193
	FS_PathType type; ///< FS path type.type233,7195
	u32 size;         ///< FS path size.size234,7233
	const void* data; ///< Pointer to FS path data.data235,7271
} FS_Path;FS_Path236,7320
typedef u64 FS_Archive;FS_Archive239,7408

include/3ds/services/loader.h,0

include/3ds/services/ps.h,1512
{__anon6182971d01039,94
	PS_ALGORITHM_CBC_ENC, ///< CBC encryption.PS_ALGORITHM_CBC_ENC10,96
	PS_ALGORITHM_CBC_DEC, ///< CBC decryption.PS_ALGORITHM_CBC_DEC11,140
	PS_ALGORITHM_CTR_ENC, ///< CTR encryption.PS_ALGORITHM_CTR_ENC12,184
	PS_ALGORITHM_CTR_DEC, ///< CTR decryption(same as PS_ALGORITHM_CTR_ENC).PS_ALGORITHM_CTR_DEC13,228
	PS_ALGORITHM_CCM_ENC, ///< CCM encryption.PS_ALGORITHM_CCM_ENC14,302
	PS_ALGORITHM_CCM_DEC, ///< CCM decryption.PS_ALGORITHM_CCM_DEC15,346
} PS_AESAlgorithm;PS_AESAlgorithm16,390
{__anon6182971d020320,441
	PS_KEYSLOT_0D,      ///< Key slot 0x0D.PS_KEYSLOT_0D21,443
	PS_KEYSLOT_2D,      ///< Key slot 0x2D.PS_KEYSLOT_2D22,484
	PS_KEYSLOT_31,      ///< Key slot 0x31.PS_KEYSLOT_3123,525
	PS_KEYSLOT_38,      ///< Key slot 0x38.PS_KEYSLOT_3824,566
	PS_KEYSLOT_32,      ///< Key slot 0x32.PS_KEYSLOT_3225,607
	PS_KEYSLOT_39_DLP,  ///< Key slot 0x39. (DLP)PS_KEYSLOT_39_DLP26,648
	PS_KEYSLOT_2E,      ///< Key slot 0x2E.PS_KEYSLOT_2E27,695
	PS_KEYSLOT_INVALID, ///< Invalid key slot.PS_KEYSLOT_INVALID28,736
	PS_KEYSLOT_36,      ///< Key slot 0x36.PS_KEYSLOT_3629,780
	PS_KEYSLOT_39_NFC   ///< Key slot 0x39. (NFC)PS_KEYSLOT_39_NFC30,821
} PS_AESKeyType;PS_AESKeyType31,868
typedef struct {__anon6182971d030834,903
	u8 modulo[0x100];modulo35,920
	u8 exponent[0x100];exponent36,939
	u32 rsa_bitsize;//The signature byte size is rsa_bitsize>>3.rsa_bitsize37,960
	u32 unk;//Normally zero?unk38,1022
} psRSAContext;psRSAContext39,1048

include/3ds/services/fsreg.h,0

include/3ds/services/soc.h,3733
#define SOL_CONFIG SOL_CONFIG12,302
{__anon920a6d1f010316,394
	NETOPT_MAC_ADDRESS     = 0x1004, ///< The mac address of the interface (u32 mac[6])NETOPT_MAC_ADDRESS17,396
	NETOPT_ARP_TABLE       = 0x3002, ///< The ARP table @see SOCU_ARPTableEntryNETOPT_ARP_TABLE18,481
	NETOPT_IP_INFO         = 0x4003, ///< The cureent IP setup @see SOCU_IPInfoNETOPT_IP_INFO19,558
	NETOPT_IP_MTU          = 0x4004, ///< The value of the IP MTU (u32)NETOPT_IP_MTU20,635
	NETOPT_ROUTING_TABLE   = 0x4006, ///< The routing table @see SOCU_RoutingTableEntryNETOPT_ROUTING_TABLE21,704
	NETOPT_UDP_NUMBER      = 0x8002, ///< The number of sockets in the UDP table (u32)NETOPT_UDP_NUMBER22,789
	NETOPT_UDP_TABLE       = 0x8003, ///< The table of opened UDP sockets @see SOCU_UDPTableEntryNETOPT_UDP_TABLE23,873
	NETOPT_TCP_NUMBER      = 0x9002, ///< The number of sockets in the TCP table (u32)NETOPT_TCP_NUMBER24,968
	NETOPT_TCP_TABLE       = 0x9003, ///< The table of opened TCP sockets @see SOCU_TCPTableEntryNETOPT_TCP_TABLE25,1052
	NETOPT_DNS_TABLE       = 0xB003, ///< The table of the DNS servers @see SOCU_DNSTableEntry -- RNETOPT_DNS_TABLE26,1147
	NETOPT_DHCP_LEASE_TIME = 0xC001, ///< The DHCP lease time remaining, in secondsNETOPT_DHCP_LEASE_TIME27,1300
} NetworkOpt;NetworkOpt28,1381
{__anon920a6d1f020832,1511
	u32 unk0; // often 2 ? state ?unk033,1513
	struct in_addr ip; ///< The IPv4 address associated to the entryip34,1545
	u8 mac[6];         ///< The MAC address of associated to the entrymac35,1611
	u8 padding[2];padding36,1679
} SOCU_ARPTableEntry;SOCU_ARPTableEntry37,1695
{__anon920a6d1f030841,1814
	struct in_addr ip;        ///< Current IPv4 addressip42,1816
	struct in_addr netmask;   ///< Current network masknetmask43,1869
	struct in_addr broadcast; ///< Current network broadcast addressbroadcast44,1922
} SOCU_IPInfo;SOCU_IPInfo45,1988
#define ROUTING_FLAG_G ROUTING_FLAG_G51,2174
{__anon920a6d1f040855,2326
	struct in_addr dest_ip; ///< Destination IP address of the routedest_ip56,2328
	struct in_addr netmask; ///< Mask used for this routenetmask57,2394
	struct in_addr gateway; ///< Gateway address to reach the networkgateway58,2449
	u32 flags;              ///< Linux netstat flags @see ROUTING_FLAG_Gflags59,2516
	u64 time;               ///< number of milliseconds since 1st Jan 1900 00:00.time60,2586
} SOCU_RoutingTableEntry;SOCU_RoutingTableEntry61,2665
{__anon920a6d1f050865,2815
	struct sockaddr_storage local;  ///< Local address informationlocal66,2817
	struct sockaddr_storage remote; ///< Remote address informationremote67,2881
} SOCU_UDPTableEntry;SOCU_UDPTableEntry68,2946
#define TCP_STATE_CLOSED TCP_STATE_CLOSED72,2995
#define TCP_STATE_LISTEN TCP_STATE_LISTEN73,3027
#define TCP_STATE_ESTABLISHED TCP_STATE_ESTABLISHED74,3059
#define TCP_STATE_FINWAIT1 TCP_STATE_FINWAIT175,3091
#define TCP_STATE_FINWAIT2 TCP_STATE_FINWAIT276,3123
#define TCP_STATE_CLOSE_WAIT TCP_STATE_CLOSE_WAIT77,3155
#define TCP_STATE_LAST_ACK TCP_STATE_LAST_ACK78,3187
#define TCP_STATE_TIME_WAIT TCP_STATE_TIME_WAIT79,3219
{__anon920a6d1f060884,3382
	u32 state;                      ///< @see TCP states definesstate85,3384
	struct sockaddr_storage local;  ///< Local address informationlocal86,3446
	struct sockaddr_storage remote; ///< Remote address informationremote87,3510
} SOCU_TCPTableEntry;SOCU_TCPTableEntry88,3575
{__anon920a6d1f070892,3721
	u32 family;        /// Family of the address of the DNS serverfamily93,3723
	struct in_addr ip; /// IP of the DNS serverip94,3787
	u8 padding[12];    // matches the length required for IPv6 addressespadding95,3832
} SOCU_DNSTableEntry;SOCU_DNSTableEntry96,3902

include/3ds/services/httpc.h,1258
typedef struct {__anonfc9b225d01088,81
	Handle servhandle; ///< Service handle.servhandle9,98
	u32 httphandle;    ///< HTTP handle.httphandle10,139
} httpcContext;httpcContext11,177
typedef enum {__anonfc9b225d020314,219
	HTTPC_METHOD_GET = 0x1,HTTPC_METHOD_GET15,234
	HTTPC_METHOD_POST = 0x2,HTTPC_METHOD_POST16,259
	HTTPC_METHOD_HEAD = 0x3,HTTPC_METHOD_HEAD17,285
	HTTPC_METHOD_PUT = 0x4,HTTPC_METHOD_PUT18,311
	HTTPC_METHOD_DELETE = 0x5HTTPC_METHOD_DELETE19,336
} HTTPC_RequestMethod;HTTPC_RequestMethod20,363
typedef enum {__anonfc9b225d030323,412
	HTTPC_STATUS_REQUEST_IN_PROGRESS = 0x5, ///< Request in progress.HTTPC_STATUS_REQUEST_IN_PROGRESS24,427
	HTTPC_STATUS_DOWNLOAD_READY = 0x7       ///< Download ready.HTTPC_STATUS_DOWNLOAD_READY25,494
} HTTPC_RequestStatus;HTTPC_RequestStatus26,556
typedef enum {__anonfc9b225d040329,607
	HTTPC_KEEPALIVE_DISABLED = 0x0,HTTPC_KEEPALIVE_DISABLED30,622
	HTTPC_KEEPALIVE_ENABLED = 0x1HTTPC_KEEPALIVE_ENABLED31,655
} HTTPC_KeepAlive;HTTPC_KeepAlive32,686
#define HTTPC_RESULTCODE_DOWNLOADPENDING HTTPC_RESULTCODE_DOWNLOADPENDING35,759
#define HTTPC_RESULTCODE_NOTFOUND HTTPC_RESULTCODE_NOTFOUND38,876
#define HTTPC_RESULTCODE_TIMEDOUT HTTPC_RESULTCODE_TIMEDOUT41,983

include/3ds/services/apt.h,7248
typedef enum {__anon90c588bf010312,178
	APPID_NONE = 0,APPID_NONE13,193
	APPID_HOMEMENU = 0x101,           ///< Home MenuAPPID_HOMEMENU14,210
	APPID_CAMERA = 0x110,             ///< Camera appletAPPID_CAMERA15,260
	APPID_FRIENDS_LIST = 0x112,       ///< Friends List appletAPPID_FRIENDS_LIST16,314
	APPID_GAME_NOTES = 0x113,         ///< Game Notes appletAPPID_GAME_NOTES17,374
	APPID_WEB = 0x114,                ///< Internet BrowserAPPID_WEB18,432
	APPID_INSTRUCTION_MANUAL = 0x115, ///< Instruction Manual appletAPPID_INSTRUCTION_MANUAL19,489
	APPID_NOTIFICATIONS = 0x116,      ///< Notifications appletAPPID_NOTIFICATIONS20,555
	APPID_MIIVERSE = 0x117,           ///< Miiverse applet (olv)APPID_MIIVERSE21,616
	APPID_MIIVERSE_POSTING = 0x118,   ///< Miiverse posting applet (solv3)APPID_MIIVERSE_POSTING22,678
	APPID_AMIIBO_SETTINGS = 0x119,    ///< Amiibo settings applet (cabinet)APPID_AMIIBO_SETTINGS23,750
	APPID_APPLICATION = 0x300,        ///< ApplicationAPPID_APPLICATION24,823
	APPID_ESHOP = 0x301,              ///< eShop (tiger)APPID_ESHOP25,875
	APPID_SOFTWARE_KEYBOARD = 0x401,  ///< Software KeyboardAPPID_SOFTWARE_KEYBOARD26,929
	APPID_APPLETED = 0x402,           ///< appletEdAPPID_APPLETED27,987
	APPID_PNOTE_AP = 0x404,           ///< PNOTE_APAPPID_PNOTE_AP28,1036
	APPID_SNOTE_AP = 0x405,           ///< SNOTE_APAPPID_SNOTE_AP29,1085
	APPID_ERROR = 0x406,              ///< errorAPPID_ERROR30,1134
	APPID_MINT = 0x407,               ///< mintAPPID_MINT31,1180
	APPID_EXTRAPAD = 0x408,           ///< extrapadAPPID_EXTRAPAD32,1225
	APPID_MEMOLIB = 0x409,            ///< memolibAPPID_MEMOLIB33,1274
} NS_APPID;NS_APPID34,1322
typedef enum {__anon90c588bf020337,1360
	APTPOS_NONE     = -1, ///< No position specified.APTPOS_NONE38,1375
	APTPOS_APP      = 0,  ///< Application.APTPOS_APP39,1426
	APTPOS_APPLIB   = 1,  ///< Application library (?).APTPOS_APPLIB40,1467
	APTPOS_SYS      = 2,  ///< System applet.APTPOS_SYS41,1520
	APTPOS_SYSLIB   = 3,  ///< System library (?).APTPOS_SYSLIB42,1563
	APTPOS_RESIDENT = 4,  ///< Resident applet.APTPOS_RESIDENT43,1611
} APT_AppletPos;APT_AppletPos44,1656
typedef u8 APT_AppletAttr;APT_AppletAttr46,1674
static inline APT_AppletAttr aptMakeAppletAttr(APT_AppletPos pos, bool manualGpuRights, bool manaptMakeAppletAttr51,1784
typedef enum {__anon90c588bf030357,2003
	APTREPLY_REJECT = 0,APTREPLY_REJECT58,2018
	APTREPLY_ACCEPT = 1,APTREPLY_ACCEPT59,2040
	APTREPLY_LATER  = 2,APTREPLY_LATER60,2062
} APT_QueryReply;APT_QueryReply61,2084
typedef enum {__anon90c588bf040364,2120
	APTSIGNAL_NONE         = 0,  ///< No signal received.APTSIGNAL_NONE65,2135
	APTSIGNAL_HOMEBUTTON   = 1,  ///< HOME button pressed.APTSIGNAL_HOMEBUTTON66,2190
	APTSIGNAL_HOMEBUTTON2  = 2,  ///< HOME button pressed (again?).APTSIGNAL_HOMEBUTTON267,2246
	APTSIGNAL_SLEEP_QUERY  = 3,  ///< Prepare to enter sleep mode.APTSIGNAL_SLEEP_QUERY68,2311
	APTSIGNAL_SLEEP_CANCEL = 4,  ///< Triggered when ptm:s GetShellStatus() returns 5.APTSIGNAL_SLEEP_CANCEL69,2375
	APTSIGNAL_SLEEP_ENTER  = 5,  ///< Enter sleep mode.APTSIGNAL_SLEEP_ENTER70,2459
	APTSIGNAL_SLEEP_WAKEUP = 6,  ///< Wake from sleep mode.APTSIGNAL_SLEEP_WAKEUP71,2512
	APTSIGNAL_SHUTDOWN     = 7,  ///< Shutdown.APTSIGNAL_SHUTDOWN72,2569
	APTSIGNAL_POWERBUTTON  = 8,  ///< POWER button pressed.APTSIGNAL_POWERBUTTON73,2614
	APTSIGNAL_POWERBUTTON2 = 9,  ///< POWER button cleared (?).APTSIGNAL_POWERBUTTON274,2671
	APTSIGNAL_TRY_SLEEP    = 10, ///< System sleeping (?).APTSIGNAL_TRY_SLEEP75,2732
	APTSIGNAL_ORDERTOCLOSE = 11, ///< Order to close (such as when an error happens?).APTSIGNAL_ORDERTOCLOSE76,2788
} APT_Signal;APT_Signal77,2872
typedef enum {__anon90c588bf050380,2905
	APTCMD_NONE               = 0,  ///< No command received.APTCMD_NONE81,2920
	APTCMD_WAKEUP             = 1,  ///< Applet should wake up.APTCMD_WAKEUP82,2979
	APTCMD_REQUEST            = 2,  ///< Source applet sent us a parameter.APTCMD_REQUEST83,3040
	APTCMD_RESPONSE           = 3,  ///< Target applet replied to our parameter.APTCMD_RESPONSE84,3113
	APTCMD_EXIT               = 4,  ///< Exit (??)APTCMD_EXIT85,3191
	APTCMD_MESSAGE            = 5,  ///< Message (??)APTCMD_MESSAGE86,3239
	APTCMD_HOMEBUTTON_ONCE    = 6,  ///< HOME button pressed once.APTCMD_HOMEBUTTON_ONCE87,3290
	APTCMD_HOMEBUTTON_TWICE   = 7,  ///< HOME button pressed twice (double-pressed).APTCMD_HOMEBUTTON_TWICE88,3354
	APTCMD_DSP_SLEEP          = 8,  ///< DSP should sleep (manual DSP rights related?).APTCMD_DSP_SLEEP89,3436
	APTCMD_DSP_WAKEUP         = 9,  ///< DSP should wake up (manual DSP rights related?).APTCMD_DSP_WAKEUP90,3521
	APTCMD_WAKEUP_EXIT        = 10, ///< Applet wakes up due to a different applet exiting.APTCMD_WAKEUP_EXIT91,3608
	APTCMD_WAKEUP_PAUSE       = 11, ///< Applet wakes up after being paused through HOME menu.APTCMD_WAKEUP_PAUSE92,3697
	APTCMD_WAKEUP_CANCEL      = 12, ///< Applet wakes up due to being cancelled.APTCMD_WAKEUP_CANCEL93,3789
	APTCMD_WAKEUP_CANCELALL   = 13, ///< Applet wakes up due to all applets being cancelled.APTCMD_WAKEUP_CANCELALL94,3867
	APTCMD_WAKEUP_POWERBUTTON = 14, ///< Applet wakes up due to POWER button being pressed (?).APTCMD_WAKEUP_POWERBUTTON95,3957
	APTCMD_WAKEUP_JUMPTOHOME  = 15, ///< Applet wakes up and is instructed to jump to HOME menu (?)APTCMD_WAKEUP_JUMPTOHOME96,4050
	APTCMD_SYSAPPLET_REQUEST  = 16, ///< Request for sysapplet (?).APTCMD_SYSAPPLET_REQUEST97,4148
	APTCMD_WAKEUP_LAUNCHAPP   = 17, ///< Applet wakes up and is instructed to launch another appletAPTCMD_WAKEUP_LAUNCHAPP98,4213
} APT_Command;APT_Command99,4315
{__anon90c588bf0608103,4382
	u32 size;size104,4384
	u32 is3D;is3D105,4395
	{__anon90c588bf0708107,4414
		u32 leftOffset;leftOffset108,4417
		u32 rightOffset;rightOffset109,4435
		u32 format;format110,4454
	} top, bottom;top111,4468
	} top, bottom;bottom111,4468
} aptCaptureBufInfo;aptCaptureBufInfo112,4484
typedef enum {__anon90c588bf0803115,4526
	APTHOOK_ONSUSPEND = 0, ///< App suspended.APTHOOK_ONSUSPEND116,4541
	APTHOOK_ONRESTORE,     ///< App restored.APTHOOK_ONRESTORE117,4585
	APTHOOK_ONSLEEP,       ///< App sleeping.APTHOOK_ONSLEEP118,4628
	APTHOOK_ONWAKEUP,      ///< App waking up.APTHOOK_ONWAKEUP119,4671
	APTHOOK_ONEXIT,        ///< App exiting.APTHOOK_ONEXIT120,4715
	APTHOOK_COUNT,         ///< Number of APT hook types.APTHOOK_COUNT122,4758
} APT_HookType;APT_HookType123,4813
typedef void (*aptHookFn)(APT_HookType hook, void* param);aptHookFn126,4853
typedef struct tag_aptHookCookietag_aptHookCookie129,4934
	struct tag_aptHookCookie* next; ///< Next cookie.next131,4969
	aptHookFn callback;             ///< Hook callback.callback132,5020
	void* param;                    ///< Callback parameter.param133,5073
} aptHookCookie;aptHookCookie134,5131
typedef void (*aptMessageCb)(void* user, NS_APPID sender, void* msg, size_t msgsize);aptMessageCb137,5175
static inline DEPRECATED bool aptIsHomePressed(void)aptIsHomePressed179,6769
static inline void aptHandleJumpToHome(void)aptHandleJumpToHome188,6972
static inline NS_APPID aptGetMenuAppID(void)aptGetMenuAppID288,10350

include/3ds/services/cfgnor.h,0

include/3ds/services/nfc.h,4292
#define NFC_ERR_INVALID_STATE NFC_ERR_INVALID_STATE8,186
#define NFC_ERR_APPDATA_UNINITIALIZED NFC_ERR_APPDATA_UNINITIALIZED11,361
#define NFC_ERR_AMIIBO_NOTSETUP NFC_ERR_AMIIBO_NOTSETUP14,518
#define NFC_ERR_APPID_MISMATCH NFC_ERR_APPID_MISMATCH17,663
#define NFC_ERR_DATACORRUPTION0 NFC_ERR_DATACORRUPTION020,808
#define NFC_ERR_DATACORRUPTION1 NFC_ERR_DATACORRUPTION123,950
#define NFC_STARTSCAN_DEFAULTINPUT NFC_STARTSCAN_DEFAULTINPUT26,1039
typedef enum {__anon91ab0331010329,1101
	NFC_OpType_1 = 1, /// Unknown.NFC_OpType_130,1116
	NFC_OpType_NFCTag = 2, /// This is the default.NFC_OpType_NFCTag31,1148
	NFC_OpType_RawNFC = 3  /// Use Raw NFC tag commands. Only available with >=10.0.0-X.NFC_OpType_RawNFC32,1197
} NFC_OpType;NFC_OpType33,1283
typedef enum {__anon91ab0331020335,1298
	NFC_TagState_Uninitialized = 0, /// nfcInit() was not used yet.NFC_TagState_Uninitialized36,1313
	NFC_TagState_ScanningStopped = 1, /// Not currently scanning for NFC tags. Set by nfcStopScanniNFC_TagState_ScanningStopped37,1378
	NFC_TagState_Scanning = 2, /// Currently scanning for NFC tags. Set by nfcStartScanning() when NFC_TagState_Scanning38,1511
	NFC_TagState_InRange = 3, /// NFC tag is in range. The state automatically changes to this whenNFC_TagState_InRange39,1619
	NFC_TagState_OutOfRange = 4, /// NFC tag is now out of range, where the NFC tag was previously NFC_TagState_OutOfRange40,1790
	NFC_TagState_DataReady = 5 /// NFC tag data was successfully loaded. This is set by nfcLoadAmiiNFC_TagState_DataReady41,2163
} NFC_TagState;NFC_TagState42,2285
enum {__anon91ab0331030345,2374
	NFC_amiiboFlag_Setup = BIT(4), /// This indicates that the amiibo was setup with amiibo SettingNFC_amiiboFlag_Setup46,2381
	NFC_amiiboFlag_AppDataSetup = BIT(5) /// This indicates that the AppData was previously initialNFC_amiiboFlag_AppDataSetup47,2556
typedef struct {__anon91ab0331040850,2756
	u16 id_offset_size;/// "u16 size/offset of the below ID data. Normally this is 0x7. When this iid_offset_size51,2773
	u8 unk_x2;//"Unknown u8, normally 0x0."unk_x252,3085
	u8 unk_x3;//"Unknown u8, normally 0x2."unk_x353,3126
	u8 id[0x28];//"ID data. When the above size field is 0x7, this is the 7-byte NFC tag UID, folloid54,3167
} NFC_TagInfo;NFC_TagInfo55,3282
typedef struct {__anon91ab0331050858,3389
	u8 mii[0x60];/// "Owner Mii."mii59,3406
	u16 nickname[11];/// "UTF-16BE Amiibo nickname."nickname60,3437
	u8 flags;/// "This is plaintext_amiibosettingsdata[0] & 0xF." See also the NFC_amiiboFlag enumsflags61,3487
	u8 countrycodeid;/// "This is plaintext_amiibosettingsdata[1]." "Country Code ID, from the systcountrycodeid62,3585
	u16 setupdate_year;setupdate_year63,3710
	u8 setupdate_month;setupdate_month64,3731
	u8 setupdate_day;setupdate_day65,3752
	u8 unk_x7c[0x2c];//Normally all-zero?unk_x7c66,3771
} NFC_AmiiboSettings;NFC_AmiiboSettings67,3810
typedef struct {__anon91ab0331060870,3920
	u16 lastwritedate_year;lastwritedate_year71,3937
	u8 lastwritedate_month;lastwritedate_month72,3962
	u8 lastwritedate_day;lastwritedate_day73,3987
	u16 write_counter;write_counter74,4010
	u8 characterID[3];/// the first element is the collection ID, the second the character in this characterID75,4030
	u8 series;/// ID of the seriesseries76,4160
	u16 amiiboID;/// ID shared by all exact same amiibo. Some amiibo are only distinguished by thisamiiboID77,4192
	u8 type;/// Type of amiibo 0 = figure, 1 = card, 2 = plushtype78,4340
	u8 pagex4_byte3;pagex4_byte379,4400
	u16 appdata_size;/// "NFC module writes hard-coded u8 value 0xD8 here. This is the size of the appdata_size80,4418
	u8 zeros[0x30];/// "Unused / reserved: this is cleared by NFC module but never written after thzeros81,4584
} NFC_AmiiboConfig;NFC_AmiiboConfig82,4685
typedef struct {__anon91ab0331070885,4822
	u8 data_x0[0xC];data_x086,4839
	u8 data_xc[0x30];/// "The data starting at struct offset 0xC is the 0x30-byte struct used by NFdata_xc87,4857
} NFC_AppDataInitStruct;NFC_AppDataInitStruct88,5006
typedef struct {__anon91ab0331080891,5125
	u8 id[10];//7-byte UID normally.id92,5142
	u8 id_size;id_size93,5176
	u8 unused_xb[0x15];unused_xb94,5189
} NFC_AppDataWriteStruct;NFC_AppDataWriteStruct95,5210

include/3ds/services/frd.h,1963
#define FRIEND_SCREEN_NAME_SIZE FRIEND_SCREEN_NAME_SIZE8,84
#define FRIEND_COMMENT_SIZE FRIEND_COMMENT_SIZE9,154
#define FRIEND_LIST_SIZE FRIEND_LIST_SIZE10,220
{__anon9120d7f6010816,350
	u32 principalId;principalId17,352
	u32 padding;padding18,370
	u64 localFriendCode;localFriendCode19,384
} FriendKey;FriendKey20,406
{__anon9120d7f6020824,457
	u64 tid;tid25,459
	u32 version;version26,469
	u32 unk;unk27,483
} TitleData;TitleData28,493
{__anon9120d7f6030832,546
	u8 region;      ///< The region code for the hardware.region33,548
	u8 country;     ///< Country code.country34,604
	u8 area;        ///< Area code.area35,640
	u8 language;    ///< Language code.language36,673
	u8 platform;    ///< Platform code.platform37,710
	u32 padding;padding38,747
} FriendProfile;FriendProfile39,761
{__anon9120d7f6040843,825
	TitleData data;data44,827
	u16 desc[128];desc45,844
} GameDescription;GameDescription46,860
{__anon9120d7f6050850,935
	u8 type;type51,937
	u8 padding3[3];padding352,947
	u32 padding;padding53,964
	FriendKey key;key54,978
} NotificationEvent;NotificationEvent55,994
{__anon9120d7f6060361,1095
	USER_WENT_ONLINE = 1,     ///< Self went onlineUSER_WENT_ONLINE62,1097
	USER_WENT_OFFLINE,        ///< Self went offlineUSER_WENT_OFFLINE63,1146
	FRIEND_WENT_ONLINE,       ///< Friend Went Online FRIEND_WENT_ONLINE64,1196
	FRIEND_UPDATED_PRESENCE,  ///< Friend Presence changedFRIEND_UPDATED_PRESENCE65,1248
	FRIEND_UPDATED_MII,       ///< Friend Mii changedFRIEND_UPDATED_MII66,1304
	FRIEND_UPDATED_PROFILE,   ///< Friend Profile changedFRIEND_UPDATED_PROFILE67,1355
	FRIEND_WENT_OFFLINE,      ///< Friend went offlineFRIEND_WENT_OFFLINE68,1410
	FRIEND_REGISTERED_USER,   ///< Friend registered self as friendFRIEND_REGISTERED_USER69,1462
	FRIEND_SENT_INVITATION    ///< Friend Sent invitationFRIEND_SENT_INVITATION70,1527
} NotificationTypes;NotificationTypes71,1582

include/3ds/services/pxidev.h,1385
typedef enum {__anon0b77670a010310,136
	WAIT_NONE          = 0, ///< Do not wait.WAIT_NONE11,151
	WAIT_SLEEP         = 1, ///< Sleep for the specified number of nanoseconds.WAIT_SLEEP12,194
	WAIT_IREQ_RETURN   = 2, ///< Wait for IREQ, return if timeout.WAIT_IREQ_RETURN13,271
	WAIT_IREQ_CONTINUE = 3  ///< Wait for IREQ, continue if timeout.WAIT_IREQ_CONTINUE14,335
} PXIDEV_WaitType;PXIDEV_WaitType15,401
typedef enum {__anon0b77670a020318,461
	DEASSERT_NONE        = 0, ///< Do not deassert.DEASSERT_NONE19,476
	DEASSERT_BEFORE_WAIT = 1, ///< Deassert before waiting.DEASSERT_BEFORE_WAIT20,525
	DEASSERT_AFTER_WAIT  = 2  ///< Deassert after waiting.DEASSERT_AFTER_WAIT21,582
} PXIDEV_DeassertType;PXIDEV_DeassertType22,638
typedef struct {__anon0b77670a030825,692
	void* ptr;         ///< Data pointer.ptr26,709
	u32 size;          ///< Data size.size27,748
	u8 transferOption; ///< Transfer options. See @ref pxiDevMakeTransferOptiontransferOption28,784
	u64 waitOperation; ///< Wait operation. See @ref pxiDevMakeWaitOperationwaitOperation29,861
} PXIDEV_SPIBuffer;PXIDEV_SPIBuffer30,935
static inline u8 pxiDevMakeTransferOption(FS_CardSpiBaudRate baudRate, FS_CardSpiBusMode busModepxiDevMakeTransferOption44,1282
static inline u64 pxiDevMakeWaitOperation(PXIDEV_WaitType waitType, PXIDEV_DeassertType deassertpxiDevMakeWaitOperation56,1729

include/3ds/services/nim.h,2356
{__anon91acd2de010319,656
	IM_DEFAULT = 0, ///< Initial installationIM_DEFAULT20,658
	IM_UNKNOWN1,    ///< UnknownIM_UNKNOWN121,701
	IM_UNKNOWN2,    ///< UnknownIM_UNKNOWN222,731
	IM_REINSTALL,   ///< Reinstall currently installed title; use this if the title is already instIM_REINSTALL23,761
} NIM_InstallationMode;NIM_InstallationMode24,883
{__anon91acd2de020328,971
	DS_NOT_INITIALIZED = 0, ///< Download not yet initializedDS_NOT_INITIALIZED29,973
	DS_INITIALIZED,         ///< Download initializedDS_INITIALIZED30,1032
	DS_DOWNLOAD_TMD,        ///< Downloading and installing TMDDS_DOWNLOAD_TMD31,1083
	DS_PREPARE_SAVE_DATA,   ///< Initializing save dataDS_PREPARE_SAVE_DATA32,1144
	DS_DOWNLOAD_CONTENTS,   ///< Downloading and installing contentsDS_DOWNLOAD_CONTENTS33,1197
	DS_WAIT_COMMIT,         ///< Waiting before calling AM_CommitImportTitlesDS_WAIT_COMMIT34,1263
	DS_COMMITTING,          ///< Running AM_CommitImportTitlesDS_COMMITTING35,1338
	DS_FINISHED,            ///< Title installation finishedDS_FINISHED36,1398
	DS_VERSION_ERROR,       ///< (unknown error regarding title version)DS_VERSION_ERROR37,1456
	DS_CREATE_CONTEXT,      ///< Creating the .ctx file?DS_CREATE_CONTEXT38,1526
	DS_CANNOT_RECOVER,      ///< Irrecoverable error encountered (e.g. out of space)DS_CANNOT_RECOVER39,1580
	DS_INVALID,             ///< Invalid stateDS_INVALID40,1662
} NIM_DownloadState;NIM_DownloadState41,1706
{__anon91acd2de030845,1804
	u64 titleId;   ///< Title IDtitleId46,1806
	u32 version;   ///< Title versionversion47,1836
	u32 unknown_0; ///< Always 0unknown_048,1871
	u8 ratingAge;  ///< Age for the HOME Menu parental controlsratingAge49,1901
	u8 mediaType;  ///< Media type, see @ref FS_MediaType enummediaType50,1962
	u8 padding[2]; ///< Paddingpadding51,2022
	u32 unknown_1; ///< Unknown input, seems to be always 0unknown_152,2051
} NIM_TitleConfig;NIM_TitleConfig53,2108
{__anon91acd2de040857,2206
	u32 state;          ///< State, see NIM_DownloadState enumstate58,2208
	Result lastResult;  ///< Last result code in NIMlastResult59,2268
	u64 downloadedSize; ///< Amount of bytes that have been downloadeddownloadedSize60,2318
	u64 totalSize;      ///< Amount of bytes that need to be downloaded in totaltotalSize61,2386
} NIM_TitleProgress;NIM_TitleProgress62,2464

include/3ds/services/qtm.h,681
typedef struct {__anon91e9248c010810,144
	float x; ///< X coordinate.x11,161
	float y; ///< Y coordinate.y12,190
} QTM_HeadTrackingInfoCoord;QTM_HeadTrackingInfoCoord13,219
typedef struct {__anon91e9248c020816,273
	u8 flags[5];                         ///< Flags.flags17,290
	u8 padding[3];                       ///< Padding.padding18,340
	float floatdata_x08;                 ///< Unknown. Not used by System_Settings.floatdata_x0819,392
	QTM_HeadTrackingInfoCoord coords0[4]; ///< Head coordinates.coords020,473
	u32 unk_x2c[5];                      ///< Unknown. Not used by System_Settings.unk_x2c21,535
} QTM_HeadTrackingInfo;QTM_HeadTrackingInfo22,616

include/3ds/gpu/shbin.h,4903
typedef enum{__anonf8ce21d6010310,113
	VERTEX_SHDR=GPU_VERTEX_SHADER,    ///< Vertex shader.VERTEX_SHDR11,127
	GEOMETRY_SHDR=GPU_GEOMETRY_SHADER ///< Geometry shader.GEOMETRY_SHDR12,182
}DVLE_type;DVLE_type13,239
typedef enum{__anonf8ce21d6020316,271
	DVLE_CONST_BOOL=0x0,    ///< Bool.DVLE_CONST_BOOL17,285
	DVLE_CONST_u8=0x1,      ///< Unsigned 8-bit integer.DVLE_CONST_u818,321
	DVLE_CONST_FLOAT24=0x2, ///< 24-bit float.DVLE_CONST_FLOAT2419,375
}DVLE_constantType;DVLE_constantType20,419
typedef enum{__anonf8ce21d6030323,462
	RESULT_POSITION = 0x0,   ///< Position.RESULT_POSITION24,476
	RESULT_NORMALQUAT = 0x1, ///< Normal Quaternion.RESULT_NORMALQUAT25,517
	RESULT_COLOR = 0x2,      ///< Color.RESULT_COLOR26,567
	RESULT_TEXCOORD0 = 0x3,  ///< Texture coordinate 0.RESULT_TEXCOORD027,605
	RESULT_TEXCOORD0W = 0x4, ///< Texture coordinate 0 W.RESULT_TEXCOORD0W28,658
	RESULT_TEXCOORD1 = 0x5,  ///< Texture coordinate 1.RESULT_TEXCOORD129,713
	RESULT_TEXCOORD2 = 0x6,  ///< Texture coordinate 2.RESULT_TEXCOORD230,766
	RESULT_VIEW = 0x8,       ///< View.RESULT_VIEW31,819
	RESULT_DUMMY = 0x9,      ///< Dummy attribute (used as passthrough for geometry shader input).RESULT_DUMMY32,856
}DVLE_outputAttribute_t;DVLE_outputAttribute_t33,952
{__anonf8ce21d6040337,1028
	GSH_POINT         = 0, ///< Point processing mode.GSH_POINT38,1030
	GSH_VARIABLE_PRIM = 1, ///< Variable-size primitive processing mode.GSH_VARIABLE_PRIM39,1082
	GSH_FIXED_PRIM    = 2, ///< Fixed-size primitive processing mode.GSH_FIXED_PRIM40,1152
} DVLE_geoShaderMode;DVLE_geoShaderMode41,1219
typedef struct{__anonf8ce21d6050844,1257
	u32 codeSize;     ///< Code size.codeSize45,1273
	u32* codeData;    ///< Code data.codeData46,1308
	u32 opdescSize;   ///< Operand description size.opdescSize47,1343
	u32* opcdescData; ///< Operand description data.opcdescData48,1393
}DVLP_s;DVLP_s49,1443
typedef struct{__anonf8ce21d6060852,1483
	u16 type;    ///< Constant type. See @ref DVLE_constantTypetype53,1499
	u16 id;      ///< Constant ID.id54,1560
	u32 data[4]; ///< Constant data.data55,1592
}DVLE_constEntry_s;DVLE_constEntry_s56,1626
typedef struct{__anonf8ce21d6070859,1675
	u16 type;  ///< Output type. See @ref DVLE_outputAttribute_ttype60,1691
	u16 regID; ///< Output register ID.regID61,1753
	u8 mask;   ///< Output mask.mask62,1790
	u8 unk[3]; ///< Unknown.unk63,1820
}DVLE_outEntry_s;DVLE_outEntry_s64,1846
typedef struct{__anonf8ce21d6080867,1894
	u32 symbolOffset; ///< Symbol offset.symbolOffset68,1910
	u16 startReg;     ///< Start register.startReg69,1949
	u16 endReg;       ///< End register.endReg70,1989
}DVLE_uniformEntry_s;DVLE_uniformEntry_s71,2027
typedef struct{__anonf8ce21d6090874,2065
	DVLE_type type;                        ///< DVLE type.type75,2081
	bool mergeOutmaps;                     ///< true = merge vertex/geometry shader outmaps ('dummymergeOutmaps76,2137
	DVLE_geoShaderMode gshMode;            ///< Geometry shader operation mode.gshMode77,2265
	u8 gshFixedVtxStart;                   ///< Starting float uniform register number for storing gshFixedVtxStart78,2342
	u8 gshVariableVtxNum;                  ///< Number of fully-defined vertices in the variable-sigshVariableVtxNum79,2477
	u8 gshFixedVtxNum;                     ///< Number of vertices in the fixed-size primitive vertgshFixedVtxNum80,2600
	DVLP_s* dvlp;                          ///< Contained DVLPs.dvlp81,2706
	u32 mainOffset;                        ///< Offset of the start of the main function.mainOffset82,2768
	u32 endmainOffset;                     ///< Offset of the end of the main function.endmainOffset83,2855
	u32 constTableSize;                    ///< Constant table size.constTableSize84,2940
	DVLE_constEntry_s* constTableData;     ///< Constant table data.constTableData85,3006
	u32 outTableSize;                      ///< Output table size.outTableSize86,3072
	DVLE_outEntry_s* outTableData;         ///< Output table data.outTableData87,3136
	u32 uniformTableSize;                  ///< Uniform table size.uniformTableSize88,3200
	DVLE_uniformEntry_s* uniformTableData; ///< Uniform table data.uniformTableData89,3265
	char* symbolTableData;                 ///< Symbol table data.symbolTableData90,3330
	u8 outmapMask;                         ///< Output map mask.outmapMask91,3394
	u32 outmapData[8];                     ///< Output map data.outmapData92,3456
	u32 outmapMode;                        ///< Output map mode.outmapMode93,3518
	u32 outmapClock;                       ///< Output map attribute clock.outmapClock94,3580
}DVLE_s;DVLE_s95,3653
typedef struct{__anonf8ce21d60a0898,3678
	u32 numDVLE;  ///< DVLE count.numDVLE99,3694
	DVLP_s DVLP;  ///< Primary DVLP.DVLP100,3726
	DVLE_s* DVLE; ///< Contained DVLE.DVLE101,3760
}DVLB_s;DVLB_s102,3796

include/3ds/gpu/enums.h,23038
#define GPU_TEXTURE_MAG_FILTER(GPU_TEXTURE_MAG_FILTER8,163
#define GPU_TEXTURE_MIN_FILTER(GPU_TEXTURE_MIN_FILTER10,301
#define GPU_TEXTURE_MIP_FILTER(GPU_TEXTURE_MIP_FILTER12,433
#define GPU_TEXTURE_WRAP_S(GPU_TEXTURE_WRAP_S14,557
#define GPU_TEXTURE_WRAP_T(GPU_TEXTURE_WRAP_T16,681
#define GPU_TEXTURE_MODE(GPU_TEXTURE_MODE18,802
#define GPU_TEXTURE_ETC1_PARAM GPU_TEXTURE_ETC1_PARAM20,899
#define GPU_TEXTURE_SHADOW_PARAM GPU_TEXTURE_SHADOW_PARAM22,989
#define GPU_TEV_BUFFER_WRITE_CONFIG(GPU_TEV_BUFFER_WRITE_CONFIG25,1083
{__anond277db6a010329,1251
	GPU_NEAREST = 0x0, ///< Nearest-neighbor interpolation.GPU_NEAREST30,1253
	GPU_LINEAR  = 0x1, ///< Linear interpolation.GPU_LINEAR31,1310
} GPU_TEXTURE_FILTER_PARAM;GPU_TEXTURE_FILTER_PARAM32,1357
{__anond277db6a020336,1423
	GPU_CLAMP_TO_EDGE   = 0x0, ///< Clamps to edge.GPU_CLAMP_TO_EDGE37,1425
	GPU_CLAMP_TO_BORDER = 0x1, ///< Clamps to border.GPU_CLAMP_TO_BORDER38,1474
	GPU_REPEAT          = 0x2, ///< Repeats texture.GPU_REPEAT39,1525
	GPU_MIRRORED_REPEAT = 0x3, ///< Repeats with mirrored texture.GPU_MIRRORED_REPEAT40,1575
} GPU_TEXTURE_WRAP_PARAM;GPU_TEXTURE_WRAP_PARAM41,1639
{__anond277db6a030345,1698
	GPU_TEX_2D          = 0x0, ///< 2D textureGPU_TEX_2D46,1700
	GPU_TEX_CUBE_MAP    = 0x1, ///< Cube mapGPU_TEX_CUBE_MAP47,1744
	GPU_TEX_SHADOW_2D   = 0x2, ///< 2D Shadow textureGPU_TEX_SHADOW_2D48,1786
	GPU_TEX_PROJECTION  = 0x3, ///< Projection textureGPU_TEX_PROJECTION49,1837
	GPU_TEX_SHADOW_CUBE = 0x4, ///< Shadow cube mapGPU_TEX_SHADOW_CUBE50,1889
	GPU_TEX_DISABLED    = 0x5, ///< DisabledGPU_TEX_DISABLED51,1938
} GPU_TEXTURE_MODE_PARAM;GPU_TEXTURE_MODE_PARAM52,1980
{__anond277db6a040356,2049
	GPU_TEXUNIT0 = 0x1, ///< Texture unit 0.GPU_TEXUNIT057,2051
	GPU_TEXUNIT1 = 0x2, ///< Texture unit 1.GPU_TEXUNIT158,2093
	GPU_TEXUNIT2 = 0x4, ///< Texture unit 2.GPU_TEXUNIT259,2135
} GPU_TEXUNIT;GPU_TEXUNIT60,2177
{__anond277db6a050364,2237
	GPU_RGBA8    = 0x0, ///< 8-bit Red + 8-bit Green + 8-bit Blue + 8-bit AlphaGPU_RGBA865,2239
	GPU_RGB8     = 0x1, ///< 8-bit Red + 8-bit Green + 8-bit BlueGPU_RGB866,2316
	GPU_RGBA5551 = 0x2, ///< 5-bit Red + 5-bit Green + 5-bit Blue + 1-bit AlphaGPU_RGBA555167,2379
	GPU_RGB565   = 0x3, ///< 5-bit Red + 6-bit Green + 5-bit BlueGPU_RGB56568,2456
	GPU_RGBA4    = 0x4, ///< 4-bit Red + 4-bit Green + 4-bit Blue + 4-bit AlphaGPU_RGBA469,2519
	GPU_LA8      = 0x5, ///< 8-bit Luminance + 8-bit AlphaGPU_LA870,2596
	GPU_HILO8    = 0x6, ///< 8-bit Hi + 8-bit LoGPU_HILO871,2652
	GPU_L8       = 0x7, ///< 8-bit LuminanceGPU_L872,2698
	GPU_A8       = 0x8, ///< 8-bit AlphaGPU_A873,2740
	GPU_LA4      = 0x9, ///< 4-bit Luminance + 4-bit AlphaGPU_LA474,2778
	GPU_L4       = 0xA, ///< 4-bit LuminanceGPU_L475,2834
	GPU_A4       = 0xB, ///< 4-bit AlphaGPU_A476,2876
	GPU_ETC1     = 0xC, ///< ETC1 texture compressionGPU_ETC177,2914
	GPU_ETC1A4   = 0xD, ///< ETC1 texture compression + 4-bit AlphaGPU_ETC1A478,2965
} GPU_TEXCOLOR;GPU_TEXCOLOR79,3030
{__anond277db6a060383,3078
	GPU_TEXFACE_2D = 0, // 2D faceGPU_TEXFACE_2D84,3080
	GPU_POSITIVE_X = 0, // +X faceGPU_POSITIVE_X85,3112
	GPU_NEGATIVE_X = 1, // -X faceGPU_NEGATIVE_X86,3144
	GPU_POSITIVE_Y = 2, // +Y faceGPU_POSITIVE_Y87,3176
	GPU_NEGATIVE_Y = 3, // -Y faceGPU_NEGATIVE_Y88,3208
	GPU_POSITIVE_Z = 4, // +Z faceGPU_POSITIVE_Z89,3240
	GPU_NEGATIVE_Z = 5, // -Z faceGPU_NEGATIVE_Z90,3272
} GPU_TEXFACE;GPU_TEXFACE91,3304
{__anond277db6a070395,3369
	GPU_PT_CLAMP_TO_ZERO   = 0, ///< Clamp to zero.GPU_PT_CLAMP_TO_ZERO96,3371
	GPU_PT_CLAMP_TO_EDGE   = 1, ///< Clamp to edge.GPU_PT_CLAMP_TO_EDGE97,3420
	GPU_PT_REPEAT          = 2, ///< Symmetrical repeat.GPU_PT_REPEAT98,3469
	GPU_PT_MIRRORED_REPEAT = 3, ///< Mirrored repeat.GPU_PT_MIRRORED_REPEAT99,3523
	GPU_PT_PULSE           = 4, ///< Pulse.GPU_PT_PULSE100,3574
} GPU_PROCTEX_CLAMP;GPU_PROCTEX_CLAMP101,3615
{__anond277db6a0803105,3692
	GPU_PT_U     = 0, ///< UGPU_PT_U106,3694
	GPU_PT_U2    = 1, ///< U2GPU_PT_U2107,3720
	GPU_PT_V     = 2, ///< VGPU_PT_V108,3747
	GPU_PT_V2    = 3, ///< V2GPU_PT_V2109,3773
	GPU_PT_ADD   = 4, ///< U+VGPU_PT_ADD110,3800
	GPU_PT_ADD2  = 5, ///< U2+V2GPU_PT_ADD2111,3828
	GPU_PT_SQRT2 = 6, ///< sqrt(U2+V2)GPU_PT_SQRT2112,3858
	GPU_PT_MIN   = 7, ///< minGPU_PT_MIN113,3894
	GPU_PT_MAX   = 8, ///< maxGPU_PT_MAX114,3922
	GPU_PT_RMAX  = 9, ///< rmaxGPU_PT_RMAX115,3950
} GPU_PROCTEX_MAPFUNC;GPU_PROCTEX_MAPFUNC116,3979
{__anond277db6a0903120,4053
	GPU_PT_NONE = 0, ///< No shift.GPU_PT_NONE121,4055
	GPU_PT_ODD  = 1, ///< Odd shift.GPU_PT_ODD122,4088
	GPU_PT_EVEN = 2, ///< Even shift.GPU_PT_EVEN123,4122
} GPU_PROCTEX_SHIFT;GPU_PROCTEX_SHIFT124,4157
{__anond277db6a0a03128,4230
	GPU_PT_NEAREST             = 0, ///< Nearest-neighborGPU_PT_NEAREST129,4232
	GPU_PT_LINEAR              = 1, ///< Linear interpolationGPU_PT_LINEAR130,4287
	GPU_PT_NEAREST_MIP_NEAREST = 2, ///< Nearest-neighbor with mipmap using nearest-neighborGPU_PT_NEAREST_MIP_NEAREST131,4346
	GPU_PT_LINEAR_MIP_NEAREST  = 3, ///< Linear interpolation with mipmap using nearest-neighborGPU_PT_LINEAR_MIP_NEAREST132,4436
	GPU_PT_NEAREST_MIP_LINEAR  = 4, ///< Nearest-neighbor with mipmap using linear interpolationGPU_PT_NEAREST_MIP_LINEAR133,4530
	GPU_PT_LINEAR_MIP_LINEAR   = 5, ///< Linear interpolation with mipmap using linear interpolatioGPU_PT_LINEAR_MIP_LINEAR134,4624
} GPU_PROCTEX_FILTER;GPU_PROCTEX_FILTER135,4722
{__anond277db6a0b03139,4790
	GPU_LUT_NOISE    = 0, ///< Noise tableGPU_LUT_NOISE140,4792
	GPU_LUT_RGBMAP   = 2, ///< RGB mapping function tableGPU_LUT_RGBMAP141,4832
	GPU_LUT_ALPHAMAP = 3, ///< Alpha mapping function tableGPU_LUT_ALPHAMAP142,4887
	GPU_LUT_COLOR    = 4, ///< Color tableGPU_LUT_COLOR143,4944
	GPU_LUT_COLORDIF = 5, ///< Color difference tableGPU_LUT_COLORDIF144,4984
} GPU_PROCTEX_LUTID;GPU_PROCTEX_LUTID145,5035
{__anond277db6a0c03149,5106
	GPU_RB_RGBA8    = 0, ///< 8-bit Red + 8-bit Green + 8-bit Blue + 8-bit AlphaGPU_RB_RGBA8150,5108
	GPU_RB_RGB8     = 1, ///< 8-bit Red + 8-bit Green + 8-bit BlueGPU_RB_RGB8151,5186
	GPU_RB_RGBA5551 = 2, ///< 5-bit Red + 5-bit Green + 5-bit Blue + 1-bit AlphaGPU_RB_RGBA5551152,5250
	GPU_RB_RGB565   = 3, ///< 5-bit Red + 6-bit Green + 5-bit BlueGPU_RB_RGB565153,5328
	GPU_RB_RGBA4    = 4, ///< 4-bit Red + 4-bit Green + 4-bit Blue + 4-bit AlphaGPU_RB_RGBA4154,5392
} GPU_COLORBUF;GPU_COLORBUF155,5470
{__anond277db6a0d03159,5536
	GPU_RB_DEPTH16          = 0, ///< 16-bit DepthGPU_RB_DEPTH16160,5538
	GPU_RB_DEPTH24          = 2, ///< 24-bit DepthGPU_RB_DEPTH24161,5586
	GPU_RB_DEPTH24_STENCIL8 = 3, ///< 24-bit Depth + 8-bit StencilGPU_RB_DEPTH24_STENCIL8162,5634
} GPU_DEPTHBUF;GPU_DEPTHBUF163,5698
{__anond277db6a0e03167,5748
	GPU_NEVER    = 0, ///< Never pass.GPU_NEVER168,5750
	GPU_ALWAYS   = 1, ///< Always pass.GPU_ALWAYS169,5786
	GPU_EQUAL    = 2, ///< Pass if equal.GPU_EQUAL170,5823
	GPU_NOTEQUAL = 3, ///< Pass if not equal.GPU_NOTEQUAL171,5862
	GPU_LESS     = 4, ///< Pass if less than.GPU_LESS172,5905
	GPU_LEQUAL   = 5, ///< Pass if less than or equal.GPU_LEQUAL173,5948
	GPU_GREATER  = 6, ///< Pass if greater than.GPU_GREATER174,6000
	GPU_GEQUAL   = 7, ///< Pass if greater than or equal.GPU_GEQUAL175,6046
} GPU_TESTFUNC;GPU_TESTFUNC176,6101
{__anond277db6a0f03180,6163
	GPU_EARLYDEPTH_GEQUAL  = 0, ///< Pass if greater than or equal.GPU_EARLYDEPTH_GEQUAL181,6165
	GPU_EARLYDEPTH_GREATER = 1, ///< Pass if greater than.GPU_EARLYDEPTH_GREATER182,6230
	GPU_EARLYDEPTH_LEQUAL  = 2, ///< Pass if less than or equal.GPU_EARLYDEPTH_LEQUAL183,6286
	GPU_EARLYDEPTH_LESS    = 3, ///< Pass if less than.GPU_EARLYDEPTH_LESS184,6348
} GPU_EARLYDEPTHFUNC;GPU_EARLYDEPTHFUNC185,6401
{__anond277db6a1003189,6462
	GPU_GAS_NEVER    = 0, ///< Never pass (0).GPU_GAS_NEVER190,6464
	GPU_GAS_ALWAYS   = 1, ///< Always pass (1).GPU_GAS_ALWAYS191,6508
	GPU_GAS_GREATER  = 2, ///< Pass if greater than (1-X).GPU_GAS_GREATER192,6553
	GPU_GAS_LESS     = 3, ///< Pass if less than (X).GPU_GAS_LESS193,6609
} GPU_GASDEPTHFUNC;GPU_GASDEPTHFUNC194,6660
#define GPU_MAKEGASDEPTHFUNC(GPU_MAKEGASDEPTHFUNC197,6740
{__anond277db6a1103201,6856
	GPU_SCISSOR_DISABLE = 0, ///< Disable.GPU_SCISSOR_DISABLE202,6858
	GPU_SCISSOR_INVERT  = 1, ///< Exclude pixels inside the scissor box.GPU_SCISSOR_INVERT203,6898
	GPU_SCISSOR_NORMAL  = 3, ///< Exclude pixels outside of the scissor box.GPU_SCISSOR_NORMAL205,6991
} GPU_SCISSORMODE;GPU_SCISSORMODE206,7065
{__anond277db6a1203210,7122
	GPU_STENCIL_KEEP      = 0, ///< Keep old value. (old_stencil)GPU_STENCIL_KEEP211,7124
	GPU_STENCIL_ZERO      = 1, ///< Zero. (0)GPU_STENCIL_ZERO212,7187
	GPU_STENCIL_REPLACE   = 2, ///< Replace value. (ref)GPU_STENCIL_REPLACE213,7230
	GPU_STENCIL_INCR      = 3, ///< Increment value. (old_stencil + 1 saturated to [0, 255])GPU_STENCIL_INCR214,7284
	GPU_STENCIL_DECR      = 4, ///< Decrement value. (old_stencil - 1 saturated to [0, 255])GPU_STENCIL_DECR215,7374
	GPU_STENCIL_INVERT    = 5, ///< Invert value. (~old_stencil)GPU_STENCIL_INVERT216,7464
	GPU_STENCIL_INCR_WRAP = 6, ///< Increment value. (old_stencil + 1)GPU_STENCIL_INCR_WRAP217,7526
	GPU_STENCIL_DECR_WRAP = 7, ///< Decrement value. (old_stencil - 1)GPU_STENCIL_DECR_WRAP218,7594
} GPU_STENCILOP;GPU_STENCILOP219,7662
{__anond277db6a1303223,7715
	GPU_WRITE_RED   = 0x01, ///< Write red.GPU_WRITE_RED224,7717
	GPU_WRITE_GREEN = 0x02, ///< Write green.GPU_WRITE_GREEN225,7758
	GPU_WRITE_BLUE  = 0x04, ///< Write blue.GPU_WRITE_BLUE226,7801
	GPU_WRITE_ALPHA = 0x08, ///< Write alpha.GPU_WRITE_ALPHA227,7843
	GPU_WRITE_DEPTH = 0x10, ///< Write depth.GPU_WRITE_DEPTH228,7886
	GPU_WRITE_COLOR = 0x0F, ///< Write all color components.GPU_WRITE_COLOR230,7930
	GPU_WRITE_ALL   = 0x1F, ///< Write all components.GPU_WRITE_ALL231,7988
} GPU_WRITEMASK;GPU_WRITEMASK232,8040
{__anond277db6a1403236,8088
	GPU_BLEND_ADD              = 0, ///< Add colors.GPU_BLEND_ADD237,8090
	GPU_BLEND_SUBTRACT         = 1, ///< Subtract colors.GPU_BLEND_SUBTRACT238,8140
	GPU_BLEND_REVERSE_SUBTRACT = 2, ///< Reverse-subtract colors.GPU_BLEND_REVERSE_SUBTRACT239,8195
	GPU_BLEND_MIN              = 3, ///< Use the minimum color.GPU_BLEND_MIN240,8258
	GPU_BLEND_MAX              = 4, ///< Use the maximum color.GPU_BLEND_MAX241,8319
} GPU_BLENDEQUATION;GPU_BLENDEQUATION242,8380
{__anond277db6a1503246,8434
	GPU_ZERO                     = 0,  ///< Zero.GPU_ZERO247,8436
	GPU_ONE                      = 1,  ///< One.GPU_ONE248,8483
	GPU_SRC_COLOR                = 2,  ///< Source color.GPU_SRC_COLOR249,8529
	GPU_ONE_MINUS_SRC_COLOR      = 3,  ///< Source color - 1.GPU_ONE_MINUS_SRC_COLOR250,8584
	GPU_DST_COLOR                = 4,  ///< Destination color.GPU_DST_COLOR251,8643
	GPU_ONE_MINUS_DST_COLOR      = 5,  ///< Destination color - 1.GPU_ONE_MINUS_DST_COLOR252,8703
	GPU_SRC_ALPHA                = 6,  ///< Source alpha.GPU_SRC_ALPHA253,8767
	GPU_ONE_MINUS_SRC_ALPHA      = 7,  ///< Source alpha - 1.GPU_ONE_MINUS_SRC_ALPHA254,8822
	GPU_DST_ALPHA                = 8,  ///< Destination alpha.GPU_DST_ALPHA255,8881
	GPU_ONE_MINUS_DST_ALPHA      = 9,  ///< Destination alpha - 1.GPU_ONE_MINUS_DST_ALPHA256,8941
	GPU_CONSTANT_COLOR           = 10, ///< Constant color.GPU_CONSTANT_COLOR257,9005
	GPU_ONE_MINUS_CONSTANT_COLOR = 11, ///< Constant color - 1.GPU_ONE_MINUS_CONSTANT_COLOR258,9062
	GPU_CONSTANT_ALPHA           = 12, ///< Constant alpha.GPU_CONSTANT_ALPHA259,9123
	GPU_ONE_MINUS_CONSTANT_ALPHA = 13, ///< Constant alpha - 1.GPU_ONE_MINUS_CONSTANT_ALPHA260,9180
	GPU_SRC_ALPHA_SATURATE       = 14, ///< Saturated alpha.GPU_SRC_ALPHA_SATURATE261,9241
} GPU_BLENDFACTOR;GPU_BLENDFACTOR262,9299
{__anond277db6a1603266,9356
	GPU_LOGICOP_CLEAR         = 0,  ///< Clear.GPU_LOGICOP_CLEAR267,9358
	GPU_LOGICOP_AND           = 1,  ///< Bitwise AND.GPU_LOGICOP_AND268,9403
	GPU_LOGICOP_AND_REVERSE   = 2,  ///< Reverse bitwise AND.GPU_LOGICOP_AND_REVERSE269,9454
	GPU_LOGICOP_COPY          = 3,  ///< Copy.GPU_LOGICOP_COPY270,9513
	GPU_LOGICOP_SET           = 4,  ///< Set.GPU_LOGICOP_SET271,9557
	GPU_LOGICOP_COPY_INVERTED = 5,  ///< Inverted copy.GPU_LOGICOP_COPY_INVERTED272,9600
	GPU_LOGICOP_NOOP          = 6,  ///< No operation.GPU_LOGICOP_NOOP273,9653
	GPU_LOGICOP_INVERT        = 7,  ///< Invert.GPU_LOGICOP_INVERT274,9705
	GPU_LOGICOP_NAND          = 8,  ///< Bitwise NAND.GPU_LOGICOP_NAND275,9751
	GPU_LOGICOP_OR            = 9,  ///< Bitwise OR.GPU_LOGICOP_OR276,9803
	GPU_LOGICOP_NOR           = 10, ///< Bitwise NOR.GPU_LOGICOP_NOR277,9853
	GPU_LOGICOP_XOR           = 11, ///< Bitwise XOR.GPU_LOGICOP_XOR278,9904
	GPU_LOGICOP_EQUIV         = 12, ///< Equivalent.GPU_LOGICOP_EQUIV279,9955
	GPU_LOGICOP_AND_INVERTED  = 13, ///< Inverted bitwise AND.GPU_LOGICOP_AND_INVERTED280,10005
	GPU_LOGICOP_OR_REVERSE    = 14, ///< Reverse bitwise OR.GPU_LOGICOP_OR_REVERSE281,10065
	GPU_LOGICOP_OR_INVERTED   = 15, ///< Inverted bitwize OR.GPU_LOGICOP_OR_INVERTED282,10123
} GPU_LOGICOP;GPU_LOGICOP283,10182
{__anond277db6a1703287,10241
	GPU_FRAGOPMODE_GL      = 0, ///< OpenGL mode.GPU_FRAGOPMODE_GL288,10243
	GPU_FRAGOPMODE_GAS_ACC = 1, ///< Gas mode (?).GPU_FRAGOPMODE_GAS_ACC289,10290
	GPU_FRAGOPMODE_SHADOW  = 3, ///< Shadow mode (?).GPU_FRAGOPMODE_SHADOW290,10338
} GPU_FRAGOPMODE;GPU_FRAGOPMODE291,10389
{__anond277db6a1803295,10454
	GPU_BYTE          = 0, ///< 8-bit byte.GPU_BYTE296,10456
	GPU_UNSIGNED_BYTE = 1, ///< 8-bit unsigned byte.GPU_UNSIGNED_BYTE297,10497
	GPU_SHORT         = 2, ///< 16-bit short.GPU_SHORT298,10547
	GPU_FLOAT         = 3, ///< 32-bit float.GPU_FLOAT299,10590
} GPU_FORMATS;GPU_FORMATS300,10633
{__anond277db6a1903304,10678
	GPU_CULL_NONE      = 0, ///< Disabled.GPU_CULL_NONE305,10680
	GPU_CULL_FRONT_CCW = 1, ///< Front, counter-clockwise.GPU_CULL_FRONT_CCW306,10720
	GPU_CULL_BACK_CCW  = 2, ///< Back, counter-clockwise.GPU_CULL_BACK_CCW307,10776
} GPU_CULLMODE;GPU_CULLMODE308,10831
#define GPU_ATTRIBFMT(GPU_ATTRIBFMT311,10920
{__anond277db6a1a03315,11029
	GPU_PRIMARY_COLOR            = 0x00, ///< Primary color.GPU_PRIMARY_COLOR316,11031
	GPU_FRAGMENT_PRIMARY_COLOR   = 0x01, ///< Primary fragment color.GPU_FRAGMENT_PRIMARY_COLOR317,11089
	GPU_FRAGMENT_SECONDARY_COLOR = 0x02, ///< Secondary fragment color.GPU_FRAGMENT_SECONDARY_COLOR318,11156
	GPU_TEXTURE0                 = 0x03, ///< Texture unit 0.GPU_TEXTURE0319,11225
	GPU_TEXTURE1                 = 0x04, ///< Texture unit 1.GPU_TEXTURE1320,11284
	GPU_TEXTURE2                 = 0x05, ///< Texture unit 2.GPU_TEXTURE2321,11343
	GPU_TEXTURE3                 = 0x06, ///< Texture unit 3.GPU_TEXTURE3322,11402
	GPU_PREVIOUS_BUFFER          = 0x0D, ///< Previous buffer.GPU_PREVIOUS_BUFFER323,11461
	GPU_CONSTANT                 = 0x0E, ///< Constant value.GPU_CONSTANT324,11521
	GPU_PREVIOUS                 = 0x0F, ///< Previous value.GPU_PREVIOUS325,11580
} GPU_TEVSRC;GPU_TEVSRC326,11639
{__anond277db6a1b03330,11702
	GPU_TEVOP_RGB_SRC_COLOR           = 0x00, ///< Source color.GPU_TEVOP_RGB_SRC_COLOR331,11704
	GPU_TEVOP_RGB_ONE_MINUS_SRC_COLOR = 0x01, ///< Source color - 1.GPU_TEVOP_RGB_ONE_MINUS_SRC_COLOR332,11766
	GPU_TEVOP_RGB_SRC_ALPHA           = 0x02, ///< Source alpha.GPU_TEVOP_RGB_SRC_ALPHA333,11832
	GPU_TEVOP_RGB_ONE_MINUS_SRC_ALPHA = 0x03, ///< Source alpha - 1.GPU_TEVOP_RGB_ONE_MINUS_SRC_ALPHA334,11894
	GPU_TEVOP_RGB_SRC_R               = 0x04, ///< Source red.GPU_TEVOP_RGB_SRC_R335,11960
	GPU_TEVOP_RGB_ONE_MINUS_SRC_R     = 0x05, ///< Source red - 1.GPU_TEVOP_RGB_ONE_MINUS_SRC_R336,12020
	GPU_TEVOP_RGB_0x06                = 0x06, ///< Unknown.GPU_TEVOP_RGB_0x06337,12084
	GPU_TEVOP_RGB_0x07                = 0x07, ///< Unknown.GPU_TEVOP_RGB_0x07338,12141
	GPU_TEVOP_RGB_SRC_G               = 0x08, ///< Source green.GPU_TEVOP_RGB_SRC_G339,12198
	GPU_TEVOP_RGB_ONE_MINUS_SRC_G     = 0x09, ///< Source green - 1.GPU_TEVOP_RGB_ONE_MINUS_SRC_G340,12260
	GPU_TEVOP_RGB_0x0A                = 0x0A, ///< Unknown.GPU_TEVOP_RGB_0x0A341,12326
	GPU_TEVOP_RGB_0x0B                = 0x0B, ///< Unknown.GPU_TEVOP_RGB_0x0B342,12383
	GPU_TEVOP_RGB_SRC_B               = 0x0C, ///< Source blue.GPU_TEVOP_RGB_SRC_B343,12440
	GPU_TEVOP_RGB_ONE_MINUS_SRC_B     = 0x0D, ///< Source blue - 1.GPU_TEVOP_RGB_ONE_MINUS_SRC_B344,12501
	GPU_TEVOP_RGB_0x0E                = 0x0E, ///< Unknown.GPU_TEVOP_RGB_0x0E345,12566
	GPU_TEVOP_RGB_0x0F                = 0x0F, ///< Unknown.GPU_TEVOP_RGB_0x0F346,12623
} GPU_TEVOP_RGB;GPU_TEVOP_RGB347,12680
{__anond277db6a1c03351,12748
	GPU_TEVOP_A_SRC_ALPHA           = 0x00, ///< Source alpha.GPU_TEVOP_A_SRC_ALPHA352,12750
	GPU_TEVOP_A_ONE_MINUS_SRC_ALPHA = 0x01, ///< Source alpha - 1.GPU_TEVOP_A_ONE_MINUS_SRC_ALPHA353,12810
	GPU_TEVOP_A_SRC_R               = 0x02, ///< Source red.GPU_TEVOP_A_SRC_R354,12874
	GPU_TEVOP_A_ONE_MINUS_SRC_R     = 0x03, ///< Source red - 1.GPU_TEVOP_A_ONE_MINUS_SRC_R355,12932
	GPU_TEVOP_A_SRC_G               = 0x04, ///< Source green.GPU_TEVOP_A_SRC_G356,12994
	GPU_TEVOP_A_ONE_MINUS_SRC_G     = 0x05, ///< Source green - 1.GPU_TEVOP_A_ONE_MINUS_SRC_G357,13054
	GPU_TEVOP_A_SRC_B               = 0x06, ///< Source blue.GPU_TEVOP_A_SRC_B358,13118
	GPU_TEVOP_A_ONE_MINUS_SRC_B     = 0x07, ///< Source blue - 1.GPU_TEVOP_A_ONE_MINUS_SRC_B359,13177
} GPU_TEVOP_A;GPU_TEVOP_A360,13240
{__anond277db6a1d03364,13301
	GPU_REPLACE      = 0x00, ///< Replace.GPU_REPLACE365,13303
	GPU_MODULATE     = 0x01, ///< Modulate.GPU_MODULATE366,13343
	GPU_ADD          = 0x02, ///< Add.GPU_ADD367,13384
	GPU_ADD_SIGNED   = 0x03, ///< Signed add.GPU_ADD_SIGNED368,13420
	GPU_INTERPOLATE  = 0x04, ///< Interpolate.GPU_INTERPOLATE369,13463
	GPU_SUBTRACT     = 0x05, ///< Subtract.GPU_SUBTRACT370,13507
	GPU_DOT3_RGB     = 0x06, ///< Dot3. RGB only.GPU_DOT3_RGB371,13548
	GPU_MULTIPLY_ADD = 0x08, ///< Multiply then add.GPU_MULTIPLY_ADD372,13595
	GPU_ADD_MULTIPLY = 0x09, ///< Add then multiply.GPU_ADD_MULTIPLY373,13645
} GPU_COMBINEFUNC;GPU_COMBINEFUNC374,13695
{__anond277db6a1e03378,13755
	GPU_TEVSCALE_1 = 0x0, ///< 1xGPU_TEVSCALE_1379,13757
	GPU_TEVSCALE_2 = 0x1, ///< 2xGPU_TEVSCALE_2380,13788
	GPU_TEVSCALE_4 = 0x2, ///< 4xGPU_TEVSCALE_4381,13819
} GPU_TEVSCALE;GPU_TEVSCALE382,13850
#define GPU_TEVSOURCES(GPU_TEVSOURCES385,13935
#define GPU_TEVOPERANDS(GPU_TEVOPERANDS387,14062
#define GPU_LIGHT_ENV_LAYER_CONFIG(GPU_LIGHT_ENV_LAYER_CONFIG390,14183
#define GPU_LC1_SHADOWBIT(GPU_LC1_SHADOWBIT392,14291
#define GPU_LC1_SPOTBIT(GPU_LC1_SPOTBIT394,14382
#define GPU_LC1_LUTBIT(GPU_LC1_LUTBIT396,14470
#define GPU_LC1_ATTNBIT(GPU_LC1_ATTNBIT398,14582
#define GPU_LIGHTPERM(GPU_LIGHTPERM400,14668
#define GPU_LIGHTLUTINPUT(GPU_LIGHTLUTINPUT402,14757
#define GPU_LIGHTLUTIDX(GPU_LIGHTLUTIDX404,14846
#define GPU_LIGHTCOLOR(GPU_LIGHTCOLOR406,14984
{__anond277db6a1f03410,15111
	GPU_NO_FRESNEL            = 0, ///< None.GPU_NO_FRESNEL411,15113
	GPU_PRI_ALPHA_FRESNEL     = 1, ///< Primary alpha.GPU_PRI_ALPHA_FRESNEL412,15156
	GPU_SEC_ALPHA_FRESNEL     = 2, ///< Secondary alpha.GPU_SEC_ALPHA_FRESNEL413,15208
	GPU_PRI_SEC_ALPHA_FRESNEL = 3, ///< Primary and secondary alpha.GPU_PRI_SEC_ALPHA_FRESNEL414,15262
} GPU_FRESNELSEL;GPU_FRESNELSEL415,15328
{__anond277db6a2003419,15380
	GPU_BUMP_NOT_USED = 0, ///< Disabled.GPU_BUMP_NOT_USED420,15382
	GPU_BUMP_AS_BUMP  = 1, ///< Bump as bump mapping.GPU_BUMP_AS_BUMP421,15421
	GPU_BUMP_AS_TANG  = 2, ///< Bump as tangent/normal mapping.GPU_BUMP_AS_TANG422,15472
} GPU_BUMPMODE;GPU_BUMPMODE423,15533
{__anond277db6a2103427,15576
	GPU_LUT_D0 = 0, ///< D0 LUT.GPU_LUT_D0428,15578
	GPU_LUT_D1 = 1, ///< D1 LUT.GPU_LUT_D1429,15608
	GPU_LUT_SP = 2, ///< Spotlight LUT.GPU_LUT_SP430,15638
	GPU_LUT_FR = 3, ///< Fresnel LUT.GPU_LUT_FR431,15675
	GPU_LUT_RB = 4, ///< Reflection-Blue LUT.GPU_LUT_RB432,15710
	GPU_LUT_RG = 5, ///< Reflection-Green LUT.GPU_LUT_RG433,15753
	GPU_LUT_RR = 6, ///< Reflection-Red LUT.GPU_LUT_RR434,15797
	GPU_LUT_DA = 7, ///< Distance attenuation LUT.GPU_LUT_DA435,15839
} GPU_LIGHTLUTID;GPU_LIGHTLUTID436,15887
{__anond277db6a2203440,15935
	GPU_LUTINPUT_NH = 0, ///< Normal*HalfVectorGPU_LUTINPUT_NH441,15937
	GPU_LUTINPUT_VH = 1, ///< View*HalfVectorGPU_LUTINPUT_VH442,15982
	GPU_LUTINPUT_NV = 2, ///< Normal*ViewGPU_LUTINPUT_NV443,16025
	GPU_LUTINPUT_LN = 3, ///< LightVector*NormalGPU_LUTINPUT_LN444,16064
	GPU_LUTINPUT_SP = 4, ///< -LightVector*SpotlightVectorGPU_LUTINPUT_SP445,16110
	GPU_LUTINPUT_CP = 5, ///< cosine of phiGPU_LUTINPUT_CP446,16166
} GPU_LIGHTLUTINPUT;GPU_LIGHTLUTINPUT447,16207
{__anond277db6a2303451,16259
	GPU_LUTSCALER_1x    = 0, ///< 1x scale.GPU_LUTSCALER_1x452,16261
	GPU_LUTSCALER_2x    = 1, ///< 2x scale.GPU_LUTSCALER_2x453,16302
	GPU_LUTSCALER_4x    = 2, ///< 4x scale.GPU_LUTSCALER_4x454,16343
	GPU_LUTSCALER_8x    = 3, ///< 8x scale.GPU_LUTSCALER_8x455,16384
	GPU_LUTSCALER_0_25x = 6, ///< 0.25x scale.GPU_LUTSCALER_0_25x456,16425
	GPU_LUTSCALER_0_5x  = 7, ///< 0.5x scale.GPU_LUTSCALER_0_5x457,16469
} GPU_LIGHTLUTSCALER;GPU_LIGHTLUTSCALER458,16512
{__anond277db6a2403462,16567
	GPU_LUTSELECT_COMMON = 0, ///< LUTs that are common to all lights.GPU_LUTSELECT_COMMON463,16569
	GPU_LUTSELECT_SP     = 1, ///< Spotlight LUT.GPU_LUTSELECT_SP464,16637
	GPU_LUTSELECT_DA     = 2, ///< Distance attenuation LUT.GPU_LUTSELECT_DA465,16684
} GPU_LIGHTLUTSELECT;GPU_LIGHTLUTSELECT466,16742
{__anond277db6a2503470,16793
	GPU_NO_FOG = 0, ///< Fog/Gas unit disabled.GPU_NO_FOG471,16795
	GPU_FOG    = 5, ///< Fog/Gas unit configured in Fog mode.GPU_FOG472,16840
	GPU_GAS    = 7, ///< Fog/Gas unit configured in Gas mode.GPU_GAS473,16899
} GPU_FOGMODE;GPU_FOGMODE474,16958
{__anond277db6a2603478,17026
	GPU_PLAIN_DENSITY = 0, ///< Plain density.GPU_PLAIN_DENSITY479,17028
	GPU_DEPTH_DENSITY = 1, ///< Depth density.GPU_DEPTH_DENSITY480,17072
} GPU_GASMODE;GPU_GASMODE481,17116
{__anond277db6a2703485,17171
	GPU_GAS_DENSITY      = 0, ///< Gas density used as input.GPU_GAS_DENSITY486,17173
	GPU_GAS_LIGHT_FACTOR = 1, ///< Light factor used as input.GPU_GAS_LIGHT_FACTOR487,17232
} GPU_GASLUTINPUT;GPU_GASLUTINPUT488,17292
{__anond277db6a2803492,17351
	GPU_TRIANGLES      = 0x0000, ///< Triangles.GPU_TRIANGLES493,17353
	GPU_TRIANGLE_STRIP = 0x0100, ///< Triangle strip.GPU_TRIANGLE_STRIP494,17399
	GPU_TRIANGLE_FAN   = 0x0200, ///< Triangle fan.GPU_TRIANGLE_FAN495,17450
	GPU_GEOMETRY_PRIM  = 0x0300, ///< Geometry shader primitive.GPU_GEOMETRY_PRIM496,17499
} GPU_Primitive_t;GPU_Primitive_t497,17561
{__anond277db6a2903501,17612
	GPU_VERTEX_SHADER   = 0x0, ///< Vertex shader.GPU_VERTEX_SHADER502,17614
	GPU_GEOMETRY_SHADER = 0x1, ///< Geometry shader.GPU_GEOMETRY_SHADER503,17662
} GPU_SHADER_TYPE;GPU_SHADER_TYPE504,17712

include/3ds/gpu/shaderProgram.h,1238
{__anon1281bdb1010812,186
	u32 id;      ///< Uniform ID.id13,188
	u32 data[3]; ///< Uniform data.data14,219
}float24Uniform_s;float24Uniform_s15,252
{__anon1281bdb1020819,352
	DVLE_s* dvle;                      ///< Shader DVLE.dvle20,354
	u16 boolUniforms;                  ///< Boolean uniforms.boolUniforms21,408
	u16 boolUniformMask;               ///< Used boolean uniform mask.boolUniformMask22,467
	u32 intUniforms[4];                ///< Integer uniforms.intUniforms23,535
	float24Uniform_s* float24Uniforms; ///< 24-bit float uniforms.float24Uniforms24,594
	u8 intUniformMask;                 ///< Used integer uniform mask.intUniformMask25,658
	u8 numFloat24Uniforms;             ///< Float uniform count.numFloat24Uniforms26,726
}shaderInstance_s;shaderInstance_s27,788
{__anon1281bdb1030831,875
	shaderInstance_s* vertexShader;   ///< Vertex shader.vertexShader32,877
	shaderInstance_s* geometryShader; ///< Geometry shader.geometryShader33,932
	u32 geoShaderInputPermutation[2]; ///< Geometry shader input permutation.geoShaderInputPermutation34,989
	u8 geoShaderInputStride;          ///< Geometry shader input stride.geoShaderInputStride35,1064
}shaderProgram_s;shaderProgram_s36,1134

include/3ds/gpu/registers.h,39517
#define GPUREG_0000 GPUREG_00009,127
#define GPUREG_0001 GPUREG_000110,172
#define GPUREG_0002 GPUREG_000211,217
#define GPUREG_0003 GPUREG_000312,262
#define GPUREG_0004 GPUREG_000413,307
#define GPUREG_0005 GPUREG_000514,352
#define GPUREG_0006 GPUREG_000615,397
#define GPUREG_0007 GPUREG_000716,442
#define GPUREG_0008 GPUREG_000817,487
#define GPUREG_0009 GPUREG_000918,532
#define GPUREG_000A GPUREG_000A19,577
#define GPUREG_000B GPUREG_000B20,622
#define GPUREG_000C GPUREG_000C21,667
#define GPUREG_000D GPUREG_000D22,712
#define GPUREG_000E GPUREG_000E23,757
#define GPUREG_000F GPUREG_000F24,802
#define GPUREG_FINALIZE GPUREG_FINALIZE25,847
#define GPUREG_0011 GPUREG_001126,913
#define GPUREG_0012 GPUREG_001227,958
#define GPUREG_0013 GPUREG_001328,1003
#define GPUREG_0014 GPUREG_001429,1048
#define GPUREG_0015 GPUREG_001530,1093
#define GPUREG_0016 GPUREG_001631,1138
#define GPUREG_0017 GPUREG_001732,1183
#define GPUREG_0018 GPUREG_001833,1228
#define GPUREG_0019 GPUREG_001934,1273
#define GPUREG_001A GPUREG_001A35,1318
#define GPUREG_001B GPUREG_001B36,1363
#define GPUREG_001C GPUREG_001C37,1408
#define GPUREG_001D GPUREG_001D38,1453
#define GPUREG_001E GPUREG_001E39,1498
#define GPUREG_001F GPUREG_001F40,1543
#define GPUREG_0020 GPUREG_002041,1588
#define GPUREG_0021 GPUREG_002142,1633
#define GPUREG_0022 GPUREG_002243,1678
#define GPUREG_0023 GPUREG_002344,1723
#define GPUREG_0024 GPUREG_002445,1768
#define GPUREG_0025 GPUREG_002546,1813
#define GPUREG_0026 GPUREG_002647,1858
#define GPUREG_0027 GPUREG_002748,1903
#define GPUREG_0028 GPUREG_002849,1948
#define GPUREG_0029 GPUREG_002950,1993
#define GPUREG_002A GPUREG_002A51,2038
#define GPUREG_002B GPUREG_002B52,2083
#define GPUREG_002C GPUREG_002C53,2128
#define GPUREG_002D GPUREG_002D54,2173
#define GPUREG_002E GPUREG_002E55,2218
#define GPUREG_002F GPUREG_002F56,2263
#define GPUREG_0030 GPUREG_003057,2308
#define GPUREG_0031 GPUREG_003158,2353
#define GPUREG_0032 GPUREG_003259,2398
#define GPUREG_0033 GPUREG_003360,2443
#define GPUREG_0034 GPUREG_003461,2488
#define GPUREG_0035 GPUREG_003562,2533
#define GPUREG_0036 GPUREG_003663,2578
#define GPUREG_0037 GPUREG_003764,2623
#define GPUREG_0038 GPUREG_003865,2668
#define GPUREG_0039 GPUREG_003966,2713
#define GPUREG_003A GPUREG_003A67,2758
#define GPUREG_003B GPUREG_003B68,2803
#define GPUREG_003C GPUREG_003C69,2848
#define GPUREG_003D GPUREG_003D70,2893
#define GPUREG_003E GPUREG_003E71,2938
#define GPUREG_003F GPUREG_003F72,2983
#define GPUREG_FACECULLING_CONFIG GPUREG_FACECULLING_CONFIG77,3085
#define GPUREG_VIEWPORT_WIDTH GPUREG_VIEWPORT_WIDTH78,3159
#define GPUREG_VIEWPORT_INVW GPUREG_VIEWPORT_INVW79,3221
#define GPUREG_VIEWPORT_HEIGHT GPUREG_VIEWPORT_HEIGHT80,3292
#define GPUREG_VIEWPORT_INVH GPUREG_VIEWPORT_INVH81,3355
#define GPUREG_0045 GPUREG_004582,3427
#define GPUREG_0046 GPUREG_004683,3481
#define GPUREG_FRAGOP_CLIP GPUREG_FRAGOP_CLIP84,3535
#define GPUREG_FRAGOP_CLIP_DATA0 GPUREG_FRAGOP_CLIP_DATA085,3589
#define GPUREG_FRAGOP_CLIP_DATA1 GPUREG_FRAGOP_CLIP_DATA186,3643
#define GPUREG_FRAGOP_CLIP_DATA2 GPUREG_FRAGOP_CLIP_DATA287,3697
#define GPUREG_FRAGOP_CLIP_DATA3 GPUREG_FRAGOP_CLIP_DATA388,3751
#define GPUREG_004C GPUREG_004C89,3805
#define GPUREG_DEPTHMAP_SCALE GPUREG_DEPTHMAP_SCALE90,3859
#define GPUREG_DEPTHMAP_OFFSET GPUREG_DEPTHMAP_OFFSET91,3922
#define GPUREG_SH_OUTMAP_TOTAL GPUREG_SH_OUTMAP_TOTAL92,3986
#define GPUREG_SH_OUTMAP_O0 GPUREG_SH_OUTMAP_O093,4057
#define GPUREG_SH_OUTMAP_O1 GPUREG_SH_OUTMAP_O194,4124
#define GPUREG_SH_OUTMAP_O2 GPUREG_SH_OUTMAP_O295,4191
#define GPUREG_SH_OUTMAP_O3 GPUREG_SH_OUTMAP_O396,4258
#define GPUREG_SH_OUTMAP_O4 GPUREG_SH_OUTMAP_O497,4325
#define GPUREG_SH_OUTMAP_O5 GPUREG_SH_OUTMAP_O598,4392
#define GPUREG_SH_OUTMAP_O6 GPUREG_SH_OUTMAP_O699,4459
#define GPUREG_0057 GPUREG_0057100,4526
#define GPUREG_0058 GPUREG_0058101,4580
#define GPUREG_0059 GPUREG_0059102,4634
#define GPUREG_005A GPUREG_005A103,4688
#define GPUREG_005B GPUREG_005B104,4742
#define GPUREG_005C GPUREG_005C105,4796
#define GPUREG_005D GPUREG_005D106,4850
#define GPUREG_005E GPUREG_005E107,4904
#define GPUREG_005F GPUREG_005F108,4958
#define GPUREG_0060 GPUREG_0060109,5012
#define GPUREG_EARLYDEPTH_FUNC GPUREG_EARLYDEPTH_FUNC110,5066
#define GPUREG_EARLYDEPTH_TEST1 GPUREG_EARLYDEPTH_TEST1111,5120
#define GPUREG_EARLYDEPTH_CLEAR GPUREG_EARLYDEPTH_CLEAR112,5174
#define GPUREG_SH_OUTATTR_MODE GPUREG_SH_OUTATTR_MODE113,5228
#define GPUREG_SCISSORTEST_MODE GPUREG_SCISSORTEST_MODE114,5305
#define GPUREG_SCISSORTEST_POS GPUREG_SCISSORTEST_POS115,5370
#define GPUREG_SCISSORTEST_DIM GPUREG_SCISSORTEST_DIM116,5439
#define GPUREG_VIEWPORT_XY GPUREG_VIEWPORT_XY117,5510
#define GPUREG_0069 GPUREG_0069118,5574
#define GPUREG_EARLYDEPTH_DATA GPUREG_EARLYDEPTH_DATA119,5628
#define GPUREG_006B GPUREG_006B120,5682
#define GPUREG_006C GPUREG_006C121,5736
#define GPUREG_DEPTHMAP_ENABLE GPUREG_DEPTHMAP_ENABLE122,5790
#define GPUREG_RENDERBUF_DIM GPUREG_RENDERBUF_DIM123,5854
#define GPUREG_SH_OUTATTR_CLOCK GPUREG_SH_OUTATTR_CLOCK124,5925
#define GPUREG_0070 GPUREG_0070125,6010
#define GPUREG_0071 GPUREG_0071126,6064
#define GPUREG_0072 GPUREG_0072127,6118
#define GPUREG_0073 GPUREG_0073128,6172
#define GPUREG_0074 GPUREG_0074129,6226
#define GPUREG_0075 GPUREG_0075130,6280
#define GPUREG_0076 GPUREG_0076131,6334
#define GPUREG_0077 GPUREG_0077132,6388
#define GPUREG_0078 GPUREG_0078133,6442
#define GPUREG_0079 GPUREG_0079134,6496
#define GPUREG_007A GPUREG_007A135,6550
#define GPUREG_007B GPUREG_007B136,6604
#define GPUREG_007C GPUREG_007C137,6658
#define GPUREG_007D GPUREG_007D138,6712
#define GPUREG_007E GPUREG_007E139,6766
#define GPUREG_007F GPUREG_007F140,6820
#define GPUREG_TEXUNIT_CONFIG GPUREG_TEXUNIT_CONFIG145,6930
#define GPUREG_TEXUNIT0_BORDER_COLOR GPUREG_TEXUNIT0_BORDER_COLOR146,7007
#define GPUREG_TEXUNIT0_DIM GPUREG_TEXUNIT0_DIM147,7085
#define GPUREG_TEXUNIT0_PARAM GPUREG_TEXUNIT0_PARAM148,7161
#define GPUREG_TEXUNIT0_LOD GPUREG_TEXUNIT0_LOD149,7237
#define GPUREG_TEXUNIT0_ADDR1 GPUREG_TEXUNIT0_ADDR1150,7306
#define GPUREG_TEXUNIT0_ADDR2 GPUREG_TEXUNIT0_ADDR2151,7379
#define GPUREG_TEXUNIT0_ADDR3 GPUREG_TEXUNIT0_ADDR3152,7437
#define GPUREG_TEXUNIT0_ADDR4 GPUREG_TEXUNIT0_ADDR4153,7495
#define GPUREG_TEXUNIT0_ADDR5 GPUREG_TEXUNIT0_ADDR5154,7553
#define GPUREG_TEXUNIT0_ADDR6 GPUREG_TEXUNIT0_ADDR6155,7611
#define GPUREG_TEXUNIT0_SHADOW GPUREG_TEXUNIT0_SHADOW156,7669
#define GPUREG_008C GPUREG_008C157,7727
#define GPUREG_008D GPUREG_008D158,7785
#define GPUREG_TEXUNIT0_TYPE GPUREG_TEXUNIT0_TYPE159,7843
#define GPUREG_LIGHTING_ENABLE0 GPUREG_LIGHTING_ENABLE0160,7913
#define GPUREG_0090 GPUREG_0090161,7979
#define GPUREG_TEXUNIT1_BORDER_COLOR GPUREG_TEXUNIT1_BORDER_COLOR162,8037
#define GPUREG_TEXUNIT1_DIM GPUREG_TEXUNIT1_DIM163,8115
#define GPUREG_TEXUNIT1_PARAM GPUREG_TEXUNIT1_PARAM164,8191
#define GPUREG_TEXUNIT1_LOD GPUREG_TEXUNIT1_LOD165,8267
#define GPUREG_TEXUNIT1_ADDR GPUREG_TEXUNIT1_ADDR166,8336
#define GPUREG_TEXUNIT1_TYPE GPUREG_TEXUNIT1_TYPE167,8409
#define GPUREG_0097 GPUREG_0097168,8479
#define GPUREG_0098 GPUREG_0098169,8537
#define GPUREG_TEXUNIT2_BORDER_COLOR GPUREG_TEXUNIT2_BORDER_COLOR170,8595
#define GPUREG_TEXUNIT2_DIM GPUREG_TEXUNIT2_DIM171,8673
#define GPUREG_TEXUNIT2_PARAM GPUREG_TEXUNIT2_PARAM172,8749
#define GPUREG_TEXUNIT2_LOD GPUREG_TEXUNIT2_LOD173,8825
#define GPUREG_TEXUNIT2_ADDR GPUREG_TEXUNIT2_ADDR174,8894
#define GPUREG_TEXUNIT2_TYPE GPUREG_TEXUNIT2_TYPE175,8967
#define GPUREG_009F GPUREG_009F176,9037
#define GPUREG_00A0 GPUREG_00A0177,9095
#define GPUREG_00A1 GPUREG_00A1178,9153
#define GPUREG_00A2 GPUREG_00A2179,9211
#define GPUREG_00A3 GPUREG_00A3180,9269
#define GPUREG_00A4 GPUREG_00A4181,9327
#define GPUREG_00A5 GPUREG_00A5182,9385
#define GPUREG_00A6 GPUREG_00A6183,9443
#define GPUREG_00A7 GPUREG_00A7184,9501
#define GPUREG_TEXUNIT3_PROCTEX0 GPUREG_TEXUNIT3_PROCTEX0185,9559
#define GPUREG_TEXUNIT3_PROCTEX1 GPUREG_TEXUNIT3_PROCTEX1186,9617
#define GPUREG_TEXUNIT3_PROCTEX2 GPUREG_TEXUNIT3_PROCTEX2187,9675
#define GPUREG_TEXUNIT3_PROCTEX3 GPUREG_TEXUNIT3_PROCTEX3188,9733
#define GPUREG_TEXUNIT3_PROCTEX4 GPUREG_TEXUNIT3_PROCTEX4189,9791
#define GPUREG_TEXUNIT3_PROCTEX5 GPUREG_TEXUNIT3_PROCTEX5190,9849
#define GPUREG_00AE GPUREG_00AE191,9907
#define GPUREG_PROCTEX_LUT GPUREG_PROCTEX_LUT192,9965
#define GPUREG_PROCTEX_LUT_DATA0 GPUREG_PROCTEX_LUT_DATA0193,10023
#define GPUREG_PROCTEX_LUT_DATA1 GPUREG_PROCTEX_LUT_DATA1194,10081
#define GPUREG_PROCTEX_LUT_DATA2 GPUREG_PROCTEX_LUT_DATA2195,10139
#define GPUREG_PROCTEX_LUT_DATA3 GPUREG_PROCTEX_LUT_DATA3196,10197
#define GPUREG_PROCTEX_LUT_DATA4 GPUREG_PROCTEX_LUT_DATA4197,10255
#define GPUREG_PROCTEX_LUT_DATA5 GPUREG_PROCTEX_LUT_DATA5198,10313
#define GPUREG_PROCTEX_LUT_DATA6 GPUREG_PROCTEX_LUT_DATA6199,10371
#define GPUREG_PROCTEX_LUT_DATA7 GPUREG_PROCTEX_LUT_DATA7200,10429
#define GPUREG_00B8 GPUREG_00B8201,10487
#define GPUREG_00B9 GPUREG_00B9202,10545
#define GPUREG_00BA GPUREG_00BA203,10603
#define GPUREG_00BB GPUREG_00BB204,10661
#define GPUREG_00BC GPUREG_00BC205,10719
#define GPUREG_00BD GPUREG_00BD206,10777
#define GPUREG_00BE GPUREG_00BE207,10835
#define GPUREG_00BF GPUREG_00BF208,10893
#define GPUREG_TEXENV0_SOURCE GPUREG_TEXENV0_SOURCE209,10951
#define GPUREG_TEXENV0_OPERAND GPUREG_TEXENV0_OPERAND210,11022
#define GPUREG_TEXENV0_COMBINER GPUREG_TEXENV0_COMBINER211,11094
#define GPUREG_TEXENV0_COLOR GPUREG_TEXENV0_COLOR212,11167
#define GPUREG_TEXENV0_SCALE GPUREG_TEXENV0_SCALE213,11237
#define GPUREG_00C5 GPUREG_00C5214,11307
#define GPUREG_00C6 GPUREG_00C6215,11365
#define GPUREG_00C7 GPUREG_00C7216,11423
#define GPUREG_TEXENV1_SOURCE GPUREG_TEXENV1_SOURCE217,11481
#define GPUREG_TEXENV1_OPERAND GPUREG_TEXENV1_OPERAND218,11552
#define GPUREG_TEXENV1_COMBINER GPUREG_TEXENV1_COMBINER219,11624
#define GPUREG_TEXENV1_COLOR GPUREG_TEXENV1_COLOR220,11697
#define GPUREG_TEXENV1_SCALE GPUREG_TEXENV1_SCALE221,11767
#define GPUREG_00CD GPUREG_00CD222,11837
#define GPUREG_00CE GPUREG_00CE223,11895
#define GPUREG_00CF GPUREG_00CF224,11953
#define GPUREG_TEXENV2_SOURCE GPUREG_TEXENV2_SOURCE225,12011
#define GPUREG_TEXENV2_OPERAND GPUREG_TEXENV2_OPERAND226,12082
#define GPUREG_TEXENV2_COMBINER GPUREG_TEXENV2_COMBINER227,12154
#define GPUREG_TEXENV2_COLOR GPUREG_TEXENV2_COLOR228,12227
#define GPUREG_TEXENV2_SCALE GPUREG_TEXENV2_SCALE229,12297
#define GPUREG_00D5 GPUREG_00D5230,12367
#define GPUREG_00D6 GPUREG_00D6231,12425
#define GPUREG_00D7 GPUREG_00D7232,12483
#define GPUREG_TEXENV3_SOURCE GPUREG_TEXENV3_SOURCE233,12541
#define GPUREG_TEXENV3_OPERAND GPUREG_TEXENV3_OPERAND234,12612
#define GPUREG_TEXENV3_COMBINER GPUREG_TEXENV3_COMBINER235,12684
#define GPUREG_TEXENV3_COLOR GPUREG_TEXENV3_COLOR236,12757
#define GPUREG_TEXENV3_SCALE GPUREG_TEXENV3_SCALE237,12827
#define GPUREG_00DD GPUREG_00DD238,12897
#define GPUREG_00DE GPUREG_00DE239,12955
#define GPUREG_00DF GPUREG_00DF240,13013
#define GPUREG_TEXENV_UPDATE_BUFFER GPUREG_TEXENV_UPDATE_BUFFER241,13071
#define GPUREG_FOG_COLOR GPUREG_FOG_COLOR242,13152
#define GPUREG_00E2 GPUREG_00E2243,13210
#define GPUREG_00E3 GPUREG_00E3244,13268
#define GPUREG_GAS_ATTENUATION GPUREG_GAS_ATTENUATION245,13326
#define GPUREG_GAS_ACCMAX GPUREG_GAS_ACCMAX246,13384
#define GPUREG_FOG_LUT_INDEX GPUREG_FOG_LUT_INDEX247,13442
#define GPUREG_00E7 GPUREG_00E7248,13500
#define GPUREG_FOG_LUT_DATA0 GPUREG_FOG_LUT_DATA0249,13558
#define GPUREG_FOG_LUT_DATA1 GPUREG_FOG_LUT_DATA1250,13616
#define GPUREG_FOG_LUT_DATA2 GPUREG_FOG_LUT_DATA2251,13674
#define GPUREG_FOG_LUT_DATA3 GPUREG_FOG_LUT_DATA3252,13732
#define GPUREG_FOG_LUT_DATA4 GPUREG_FOG_LUT_DATA4253,13790
#define GPUREG_FOG_LUT_DATA5 GPUREG_FOG_LUT_DATA5254,13848
#define GPUREG_FOG_LUT_DATA6 GPUREG_FOG_LUT_DATA6255,13906
#define GPUREG_FOG_LUT_DATA7 GPUREG_FOG_LUT_DATA7256,13964
#define GPUREG_TEXENV4_SOURCE GPUREG_TEXENV4_SOURCE257,14022
#define GPUREG_TEXENV4_OPERAND GPUREG_TEXENV4_OPERAND258,14093
#define GPUREG_TEXENV4_COMBINER GPUREG_TEXENV4_COMBINER259,14165
#define GPUREG_TEXENV4_COLOR GPUREG_TEXENV4_COLOR260,14238
#define GPUREG_TEXENV4_SCALE GPUREG_TEXENV4_SCALE261,14308
#define GPUREG_00F5 GPUREG_00F5262,14378
#define GPUREG_00F6 GPUREG_00F6263,14436
#define GPUREG_00F7 GPUREG_00F7264,14494
#define GPUREG_TEXENV5_SOURCE GPUREG_TEXENV5_SOURCE265,14552
#define GPUREG_TEXENV5_OPERAND GPUREG_TEXENV5_OPERAND266,14623
#define GPUREG_TEXENV5_COMBINER GPUREG_TEXENV5_COMBINER267,14695
#define GPUREG_TEXENV5_COLOR GPUREG_TEXENV5_COLOR268,14768
#define GPUREG_TEXENV5_SCALE GPUREG_TEXENV5_SCALE269,14838
#define GPUREG_TEXENV_BUFFER_COLOR GPUREG_TEXENV_BUFFER_COLOR270,14908
#define GPUREG_00FE GPUREG_00FE271,14983
#define GPUREG_00FF GPUREG_00FF272,15041
#define GPUREG_COLOR_OPERATION GPUREG_COLOR_OPERATION277,15157
#define GPUREG_BLEND_FUNC GPUREG_BLEND_FUNC278,15253
#define GPUREG_LOGIC_OP GPUREG_LOGIC_OP279,15333
#define GPUREG_BLEND_COLOR GPUREG_BLEND_COLOR280,15415
#define GPUREG_FRAGOP_ALPHA_TEST GPUREG_FRAGOP_ALPHA_TEST281,15478
#define GPUREG_STENCIL_TEST GPUREG_STENCIL_TEST282,15554
#define GPUREG_STENCIL_OP GPUREG_STENCIL_OP283,15632
#define GPUREG_DEPTH_COLOR_MASK GPUREG_DEPTH_COLOR_MASK284,15706
#define GPUREG_0108 GPUREG_0108285,15797
#define GPUREG_0109 GPUREG_0109286,15856
#define GPUREG_010A GPUREG_010A287,15915
#define GPUREG_010B GPUREG_010B288,15974
#define GPUREG_010C GPUREG_010C289,16033
#define GPUREG_010D GPUREG_010D290,16092
#define GPUREG_010E GPUREG_010E291,16151
#define GPUREG_010F GPUREG_010F292,16210
#define GPUREG_FRAMEBUFFER_INVALIDATE GPUREG_FRAMEBUFFER_INVALIDATE293,16269
#define GPUREG_FRAMEBUFFER_FLUSH GPUREG_FRAMEBUFFER_FLUSH294,16349
#define GPUREG_COLORBUFFER_READ GPUREG_COLORBUFFER_READ295,16425
#define GPUREG_COLORBUFFER_WRITE GPUREG_COLORBUFFER_WRITE296,16504
#define GPUREG_DEPTHBUFFER_READ GPUREG_DEPTHBUFFER_READ297,16582
#define GPUREG_DEPTHBUFFER_WRITE GPUREG_DEPTHBUFFER_WRITE298,16661
#define GPUREG_DEPTHBUFFER_FORMAT GPUREG_DEPTHBUFFER_FORMAT299,16739
#define GPUREG_COLORBUFFER_FORMAT GPUREG_COLORBUFFER_FORMAT300,16810
#define GPUREG_EARLYDEPTH_TEST2 GPUREG_EARLYDEPTH_TEST2301,16881
#define GPUREG_0119 GPUREG_0119302,16940
#define GPUREG_011A GPUREG_011A303,16999
#define GPUREG_FRAMEBUFFER_BLOCK32 GPUREG_FRAMEBUFFER_BLOCK32304,17058
#define GPUREG_DEPTHBUFFER_LOC GPUREG_DEPTHBUFFER_LOC305,17131
#define GPUREG_COLORBUFFER_LOC GPUREG_COLORBUFFER_LOC306,17204
#define GPUREG_FRAMEBUFFER_DIM GPUREG_FRAMEBUFFER_DIM307,17277
#define GPUREG_011F GPUREG_011F308,17352
#define GPUREG_GAS_LIGHT_XY GPUREG_GAS_LIGHT_XY309,17411
#define GPUREG_GAS_LIGHT_Z GPUREG_GAS_LIGHT_Z310,17470
#define GPUREG_GAS_LIGHT_Z_COLOR GPUREG_GAS_LIGHT_Z_COLOR311,17529
#define GPUREG_GAS_LUT_INDEX GPUREG_GAS_LUT_INDEX312,17588
#define GPUREG_GAS_LUT_DATA GPUREG_GAS_LUT_DATA313,17647
#define GPUREG_GAS_ACCMAX_FEEDBACK GPUREG_GAS_ACCMAX_FEEDBACK314,17706
#define GPUREG_GAS_DELTAZ_DEPTH GPUREG_GAS_DELTAZ_DEPTH315,17765
#define GPUREG_0127 GPUREG_0127316,17824
#define GPUREG_0128 GPUREG_0128317,17883
#define GPUREG_0129 GPUREG_0129318,17942
#define GPUREG_012A GPUREG_012A319,18001
#define GPUREG_012B GPUREG_012B320,18060
#define GPUREG_012C GPUREG_012C321,18119
#define GPUREG_012D GPUREG_012D322,18178
#define GPUREG_012E GPUREG_012E323,18237
#define GPUREG_012F GPUREG_012F324,18296
#define GPUREG_FRAGOP_SHADOW GPUREG_FRAGOP_SHADOW325,18355
#define GPUREG_0131 GPUREG_0131326,18414
#define GPUREG_0132 GPUREG_0132327,18473
#define GPUREG_0133 GPUREG_0133328,18532
#define GPUREG_0134 GPUREG_0134329,18591
#define GPUREG_0135 GPUREG_0135330,18650
#define GPUREG_0136 GPUREG_0136331,18709
#define GPUREG_0137 GPUREG_0137332,18768
#define GPUREG_0138 GPUREG_0138333,18827
#define GPUREG_0139 GPUREG_0139334,18886
#define GPUREG_013A GPUREG_013A335,18945
#define GPUREG_013B GPUREG_013B336,19004
#define GPUREG_013C GPUREG_013C337,19063
#define GPUREG_013D GPUREG_013D338,19122
#define GPUREG_013E GPUREG_013E339,19181
#define GPUREG_013F GPUREG_013F340,19240
#define GPUREG_LIGHT0_SPECULAR0 GPUREG_LIGHT0_SPECULAR0345,19363
#define GPUREG_LIGHT0_SPECULAR1 GPUREG_LIGHT0_SPECULAR1346,19444
#define GPUREG_LIGHT0_DIFFUSE GPUREG_LIGHT0_DIFFUSE347,19525
#define GPUREG_LIGHT0_AMBIENT GPUREG_LIGHT0_AMBIENT348,19605
#define GPUREG_LIGHT0_XY GPUREG_LIGHT0_XY349,19685
#define GPUREG_LIGHT0_Z GPUREG_LIGHT0_Z350,19756
#define GPUREG_LIGHT0_SPOTDIR_XY GPUREG_LIGHT0_SPOTDIR_XY351,19821
#define GPUREG_LIGHT0_SPOTDIR_Z GPUREG_LIGHT0_SPOTDIR_Z352,19912
#define GPUREG_0148 GPUREG_0148353,19997
#define GPUREG_LIGHT0_CONFIG GPUREG_LIGHT0_CONFIG354,20060
#define GPUREG_LIGHT0_ATTENUATION_BIAS GPUREG_LIGHT0_ATTENUATION_BIAS355,20137
#define GPUREG_LIGHT0_ATTENUATION_SCALE GPUREG_LIGHT0_ATTENUATION_SCALE356,20217
#define GPUREG_014C GPUREG_014C357,20298
#define GPUREG_014D GPUREG_014D358,20361
#define GPUREG_014E GPUREG_014E359,20424
#define GPUREG_014F GPUREG_014F360,20487
#define GPUREG_LIGHT1_SPECULAR0 GPUREG_LIGHT1_SPECULAR0361,20550
#define GPUREG_LIGHT1_SPECULAR1 GPUREG_LIGHT1_SPECULAR1362,20631
#define GPUREG_LIGHT1_DIFFUSE GPUREG_LIGHT1_DIFFUSE363,20712
#define GPUREG_LIGHT1_AMBIENT GPUREG_LIGHT1_AMBIENT364,20792
#define GPUREG_LIGHT1_XY GPUREG_LIGHT1_XY365,20872
#define GPUREG_LIGHT1_Z GPUREG_LIGHT1_Z366,20943
#define GPUREG_LIGHT1_SPOTDIR_XY GPUREG_LIGHT1_SPOTDIR_XY367,21008
#define GPUREG_LIGHT1_SPOTDIR_Z GPUREG_LIGHT1_SPOTDIR_Z368,21099
#define GPUREG_0158 GPUREG_0158369,21184
#define GPUREG_LIGHT1_CONFIG GPUREG_LIGHT1_CONFIG370,21247
#define GPUREG_LIGHT1_ATTENUATION_BIAS GPUREG_LIGHT1_ATTENUATION_BIAS371,21324
#define GPUREG_LIGHT1_ATTENUATION_SCALE GPUREG_LIGHT1_ATTENUATION_SCALE372,21404
#define GPUREG_015C GPUREG_015C373,21485
#define GPUREG_015D GPUREG_015D374,21548
#define GPUREG_015E GPUREG_015E375,21611
#define GPUREG_015F GPUREG_015F376,21674
#define GPUREG_LIGHT2_SPECULAR0 GPUREG_LIGHT2_SPECULAR0377,21737
#define GPUREG_LIGHT2_SPECULAR1 GPUREG_LIGHT2_SPECULAR1378,21818
#define GPUREG_LIGHT2_DIFFUSE GPUREG_LIGHT2_DIFFUSE379,21899
#define GPUREG_LIGHT2_AMBIENT GPUREG_LIGHT2_AMBIENT380,21979
#define GPUREG_LIGHT2_XY GPUREG_LIGHT2_XY381,22059
#define GPUREG_LIGHT2_Z GPUREG_LIGHT2_Z382,22130
#define GPUREG_LIGHT2_SPOTDIR_XY GPUREG_LIGHT2_SPOTDIR_XY383,22195
#define GPUREG_LIGHT2_SPOTDIR_Z GPUREG_LIGHT2_SPOTDIR_Z384,22286
#define GPUREG_0168 GPUREG_0168385,22371
#define GPUREG_LIGHT2_CONFIG GPUREG_LIGHT2_CONFIG386,22434
#define GPUREG_LIGHT2_ATTENUATION_BIAS GPUREG_LIGHT2_ATTENUATION_BIAS387,22511
#define GPUREG_LIGHT2_ATTENUATION_SCALE GPUREG_LIGHT2_ATTENUATION_SCALE388,22591
#define GPUREG_016C GPUREG_016C389,22672
#define GPUREG_016D GPUREG_016D390,22735
#define GPUREG_016E GPUREG_016E391,22798
#define GPUREG_016F GPUREG_016F392,22861
#define GPUREG_LIGHT3_SPECULAR0 GPUREG_LIGHT3_SPECULAR0393,22924
#define GPUREG_LIGHT3_SPECULAR1 GPUREG_LIGHT3_SPECULAR1394,23005
#define GPUREG_LIGHT3_DIFFUSE GPUREG_LIGHT3_DIFFUSE395,23086
#define GPUREG_LIGHT3_AMBIENT GPUREG_LIGHT3_AMBIENT396,23166
#define GPUREG_LIGHT3_XY GPUREG_LIGHT3_XY397,23246
#define GPUREG_LIGHT3_Z GPUREG_LIGHT3_Z398,23317
#define GPUREG_LIGHT3_SPOTDIR_XY GPUREG_LIGHT3_SPOTDIR_XY399,23382
#define GPUREG_LIGHT3_SPOTDIR_Z GPUREG_LIGHT3_SPOTDIR_Z400,23473
#define GPUREG_0178 GPUREG_0178401,23558
#define GPUREG_LIGHT3_CONFIG GPUREG_LIGHT3_CONFIG402,23621
#define GPUREG_LIGHT3_ATTENUATION_BIAS GPUREG_LIGHT3_ATTENUATION_BIAS403,23698
#define GPUREG_LIGHT3_ATTENUATION_SCALE GPUREG_LIGHT3_ATTENUATION_SCALE404,23778
#define GPUREG_017C GPUREG_017C405,23859
#define GPUREG_017D GPUREG_017D406,23922
#define GPUREG_017E GPUREG_017E407,23985
#define GPUREG_017F GPUREG_017F408,24048
#define GPUREG_LIGHT4_SPECULAR0 GPUREG_LIGHT4_SPECULAR0409,24111
#define GPUREG_LIGHT4_SPECULAR1 GPUREG_LIGHT4_SPECULAR1410,24192
#define GPUREG_LIGHT4_DIFFUSE GPUREG_LIGHT4_DIFFUSE411,24273
#define GPUREG_LIGHT4_AMBIENT GPUREG_LIGHT4_AMBIENT412,24353
#define GPUREG_LIGHT4_XY GPUREG_LIGHT4_XY413,24433
#define GPUREG_LIGHT4_Z GPUREG_LIGHT4_Z414,24504
#define GPUREG_LIGHT4_SPOTDIR_XY GPUREG_LIGHT4_SPOTDIR_XY415,24569
#define GPUREG_LIGHT4_SPOTDIR_Z GPUREG_LIGHT4_SPOTDIR_Z416,24660
#define GPUREG_0188 GPUREG_0188417,24745
#define GPUREG_LIGHT4_CONFIG GPUREG_LIGHT4_CONFIG418,24808
#define GPUREG_LIGHT4_ATTENUATION_BIAS GPUREG_LIGHT4_ATTENUATION_BIAS419,24885
#define GPUREG_LIGHT4_ATTENUATION_SCALE GPUREG_LIGHT4_ATTENUATION_SCALE420,24965
#define GPUREG_018C GPUREG_018C421,25046
#define GPUREG_018D GPUREG_018D422,25109
#define GPUREG_018E GPUREG_018E423,25172
#define GPUREG_018F GPUREG_018F424,25235
#define GPUREG_LIGHT5_SPECULAR0 GPUREG_LIGHT5_SPECULAR0425,25298
#define GPUREG_LIGHT5_SPECULAR1 GPUREG_LIGHT5_SPECULAR1426,25379
#define GPUREG_LIGHT5_DIFFUSE GPUREG_LIGHT5_DIFFUSE427,25460
#define GPUREG_LIGHT5_AMBIENT GPUREG_LIGHT5_AMBIENT428,25540
#define GPUREG_LIGHT5_XY GPUREG_LIGHT5_XY429,25620
#define GPUREG_LIGHT5_Z GPUREG_LIGHT5_Z430,25691
#define GPUREG_LIGHT5_SPOTDIR_XY GPUREG_LIGHT5_SPOTDIR_XY431,25756
#define GPUREG_LIGHT5_SPOTDIR_Z GPUREG_LIGHT5_SPOTDIR_Z432,25847
#define GPUREG_0198 GPUREG_0198433,25932
#define GPUREG_LIGHT5_CONFIG GPUREG_LIGHT5_CONFIG434,25995
#define GPUREG_LIGHT5_ATTENUATION_BIAS GPUREG_LIGHT5_ATTENUATION_BIAS435,26072
#define GPUREG_LIGHT5_ATTENUATION_SCALE GPUREG_LIGHT5_ATTENUATION_SCALE436,26152
#define GPUREG_019C GPUREG_019C437,26233
#define GPUREG_019D GPUREG_019D438,26296
#define GPUREG_019E GPUREG_019E439,26359
#define GPUREG_019F GPUREG_019F440,26422
#define GPUREG_LIGHT6_SPECULAR0 GPUREG_LIGHT6_SPECULAR0441,26485
#define GPUREG_LIGHT6_SPECULAR1 GPUREG_LIGHT6_SPECULAR1442,26566
#define GPUREG_LIGHT6_DIFFUSE GPUREG_LIGHT6_DIFFUSE443,26647
#define GPUREG_LIGHT6_AMBIENT GPUREG_LIGHT6_AMBIENT444,26727
#define GPUREG_LIGHT6_XY GPUREG_LIGHT6_XY445,26807
#define GPUREG_LIGHT6_Z GPUREG_LIGHT6_Z446,26878
#define GPUREG_LIGHT6_SPOTDIR_XY GPUREG_LIGHT6_SPOTDIR_XY447,26943
#define GPUREG_LIGHT6_SPOTDIR_Z GPUREG_LIGHT6_SPOTDIR_Z448,27034
#define GPUREG_01A8 GPUREG_01A8449,27119
#define GPUREG_LIGHT6_CONFIG GPUREG_LIGHT6_CONFIG450,27182
#define GPUREG_LIGHT6_ATTENUATION_BIAS GPUREG_LIGHT6_ATTENUATION_BIAS451,27259
#define GPUREG_LIGHT6_ATTENUATION_SCALE GPUREG_LIGHT6_ATTENUATION_SCALE452,27339
#define GPUREG_01AC GPUREG_01AC453,27420
#define GPUREG_01AD GPUREG_01AD454,27483
#define GPUREG_01AE GPUREG_01AE455,27546
#define GPUREG_01AF GPUREG_01AF456,27609
#define GPUREG_LIGHT7_SPECULAR0 GPUREG_LIGHT7_SPECULAR0457,27672
#define GPUREG_LIGHT7_SPECULAR1 GPUREG_LIGHT7_SPECULAR1458,27753
#define GPUREG_LIGHT7_DIFFUSE GPUREG_LIGHT7_DIFFUSE459,27834
#define GPUREG_LIGHT7_AMBIENT GPUREG_LIGHT7_AMBIENT460,27914
#define GPUREG_LIGHT7_XY GPUREG_LIGHT7_XY461,27994
#define GPUREG_LIGHT7_Z GPUREG_LIGHT7_Z462,28065
#define GPUREG_LIGHT7_SPOTDIR_XY GPUREG_LIGHT7_SPOTDIR_XY463,28130
#define GPUREG_LIGHT7_SPOTDIR_Z GPUREG_LIGHT7_SPOTDIR_Z464,28221
#define GPUREG_01B8 GPUREG_01B8465,28306
#define GPUREG_LIGHT7_CONFIG GPUREG_LIGHT7_CONFIG466,28369
#define GPUREG_LIGHT7_ATTENUATION_BIAS GPUREG_LIGHT7_ATTENUATION_BIAS467,28446
#define GPUREG_LIGHT7_ATTENUATION_SCALE GPUREG_LIGHT7_ATTENUATION_SCALE468,28526
#define GPUREG_01BC GPUREG_01BC469,28607
#define GPUREG_01BD GPUREG_01BD470,28670
#define GPUREG_01BE GPUREG_01BE471,28733
#define GPUREG_01BF GPUREG_01BF472,28796
#define GPUREG_LIGHTING_AMBIENT GPUREG_LIGHTING_AMBIENT473,28859
#define GPUREG_01C1 GPUREG_01C1474,28931
#define GPUREG_LIGHTING_NUM_LIGHTS GPUREG_LIGHTING_NUM_LIGHTS475,28994
#define GPUREG_LIGHTING_CONFIG0 GPUREG_LIGHTING_CONFIG0476,29066
#define GPUREG_LIGHTING_CONFIG1 GPUREG_LIGHTING_CONFIG1477,29144
#define GPUREG_LIGHTING_LUT_INDEX GPUREG_LIGHTING_LUT_INDEX478,29222
#define GPUREG_LIGHTING_ENABLE1 GPUREG_LIGHTING_ENABLE1479,29287
#define GPUREG_01C7 GPUREG_01C7480,29358
#define GPUREG_LIGHTING_LUT_DATA0 GPUREG_LIGHTING_LUT_DATA0481,29421
#define GPUREG_LIGHTING_LUT_DATA1 GPUREG_LIGHTING_LUT_DATA1482,29487
#define GPUREG_LIGHTING_LUT_DATA2 GPUREG_LIGHTING_LUT_DATA2483,29553
#define GPUREG_LIGHTING_LUT_DATA3 GPUREG_LIGHTING_LUT_DATA3484,29619
#define GPUREG_LIGHTING_LUT_DATA4 GPUREG_LIGHTING_LUT_DATA4485,29685
#define GPUREG_LIGHTING_LUT_DATA5 GPUREG_LIGHTING_LUT_DATA5486,29751
#define GPUREG_LIGHTING_LUT_DATA6 GPUREG_LIGHTING_LUT_DATA6487,29817
#define GPUREG_LIGHTING_LUT_DATA7 GPUREG_LIGHTING_LUT_DATA7488,29883
#define GPUREG_LIGHTING_LUTINPUT_ABS GPUREG_LIGHTING_LUTINPUT_ABS489,29949
#define GPUREG_LIGHTING_LUTINPUT_SELECT GPUREG_LIGHTING_LUTINPUT_SELECT490,30018
#define GPUREG_LIGHTING_LUTINPUT_SCALE GPUREG_LIGHTING_LUTINPUT_SCALE491,30092
#define GPUREG_01D3 GPUREG_01D3492,30163
#define GPUREG_01D4 GPUREG_01D4493,30226
#define GPUREG_01D5 GPUREG_01D5494,30289
#define GPUREG_01D6 GPUREG_01D6495,30352
#define GPUREG_01D7 GPUREG_01D7496,30415
#define GPUREG_01D8 GPUREG_01D8497,30478
#define GPUREG_LIGHTING_LIGHT_PERMUTATION GPUREG_LIGHTING_LIGHT_PERMUTATION498,30541
#define GPUREG_01DA GPUREG_01DA499,30614
#define GPUREG_01DB GPUREG_01DB500,30677
#define GPUREG_01DC GPUREG_01DC501,30740
#define GPUREG_01DD GPUREG_01DD502,30803
#define GPUREG_01DE GPUREG_01DE503,30866
#define GPUREG_01DF GPUREG_01DF504,30929
#define GPUREG_01E0 GPUREG_01E0505,30992
#define GPUREG_01E1 GPUREG_01E1506,31055
#define GPUREG_01E2 GPUREG_01E2507,31118
#define GPUREG_01E3 GPUREG_01E3508,31181
#define GPUREG_01E4 GPUREG_01E4509,31244
#define GPUREG_01E5 GPUREG_01E5510,31307
#define GPUREG_01E6 GPUREG_01E6511,31370
#define GPUREG_01E7 GPUREG_01E7512,31433
#define GPUREG_01E8 GPUREG_01E8513,31496
#define GPUREG_01E9 GPUREG_01E9514,31559
#define GPUREG_01EA GPUREG_01EA515,31622
#define GPUREG_01EB GPUREG_01EB516,31685
#define GPUREG_01EC GPUREG_01EC517,31748
#define GPUREG_01ED GPUREG_01ED518,31811
#define GPUREG_01EE GPUREG_01EE519,31874
#define GPUREG_01EF GPUREG_01EF520,31937
#define GPUREG_01F0 GPUREG_01F0521,32000
#define GPUREG_01F1 GPUREG_01F1522,32063
#define GPUREG_01F2 GPUREG_01F2523,32126
#define GPUREG_01F3 GPUREG_01F3524,32189
#define GPUREG_01F4 GPUREG_01F4525,32252
#define GPUREG_01F5 GPUREG_01F5526,32315
#define GPUREG_01F6 GPUREG_01F6527,32378
#define GPUREG_01F7 GPUREG_01F7528,32441
#define GPUREG_01F8 GPUREG_01F8529,32504
#define GPUREG_01F9 GPUREG_01F9530,32567
#define GPUREG_01FA GPUREG_01FA531,32630
#define GPUREG_01FB GPUREG_01FB532,32693
#define GPUREG_01FC GPUREG_01FC533,32756
#define GPUREG_01FD GPUREG_01FD534,32819
#define GPUREG_01FE GPUREG_01FE535,32882
#define GPUREG_01FF GPUREG_01FF536,32945
#define GPUREG_ATTRIBBUFFERS_LOC GPUREG_ATTRIBBUFFERS_LOC541,33072
#define GPUREG_ATTRIBBUFFERS_FORMAT_LOW GPUREG_ATTRIBBUFFERS_FORMAT_LOW542,33153
#define GPUREG_ATTRIBBUFFERS_FORMAT_HIGH GPUREG_ATTRIBBUFFERS_FORMAT_HIGH543,33236
#define GPUREG_ATTRIBBUFFER0_OFFSET GPUREG_ATTRIBBUFFER0_OFFSET544,33320
#define GPUREG_ATTRIBBUFFER0_CONFIG1 GPUREG_ATTRIBBUFFER0_CONFIG1545,33401
#define GPUREG_ATTRIBBUFFER0_CONFIG2 GPUREG_ATTRIBBUFFER0_CONFIG2546,33489
#define GPUREG_ATTRIBBUFFER1_OFFSET GPUREG_ATTRIBBUFFER1_OFFSET547,33577
#define GPUREG_ATTRIBBUFFER1_CONFIG1 GPUREG_ATTRIBBUFFER1_CONFIG1548,33658
#define GPUREG_ATTRIBBUFFER1_CONFIG2 GPUREG_ATTRIBBUFFER1_CONFIG2549,33746
#define GPUREG_ATTRIBBUFFER2_OFFSET GPUREG_ATTRIBBUFFER2_OFFSET550,33834
#define GPUREG_ATTRIBBUFFER2_CONFIG1 GPUREG_ATTRIBBUFFER2_CONFIG1551,33915
#define GPUREG_ATTRIBBUFFER2_CONFIG2 GPUREG_ATTRIBBUFFER2_CONFIG2552,34003
#define GPUREG_ATTRIBBUFFER3_OFFSET GPUREG_ATTRIBBUFFER3_OFFSET553,34091
#define GPUREG_ATTRIBBUFFER3_CONFIG1 GPUREG_ATTRIBBUFFER3_CONFIG1554,34172
#define GPUREG_ATTRIBBUFFER3_CONFIG2 GPUREG_ATTRIBBUFFER3_CONFIG2555,34260
#define GPUREG_ATTRIBBUFFER4_OFFSET GPUREG_ATTRIBBUFFER4_OFFSET556,34348
#define GPUREG_ATTRIBBUFFER4_CONFIG1 GPUREG_ATTRIBBUFFER4_CONFIG1557,34429
#define GPUREG_ATTRIBBUFFER4_CONFIG2 GPUREG_ATTRIBBUFFER4_CONFIG2558,34517
#define GPUREG_ATTRIBBUFFER5_OFFSET GPUREG_ATTRIBBUFFER5_OFFSET559,34605
#define GPUREG_ATTRIBBUFFER5_CONFIG1 GPUREG_ATTRIBBUFFER5_CONFIG1560,34686
#define GPUREG_ATTRIBBUFFER5_CONFIG2 GPUREG_ATTRIBBUFFER5_CONFIG2561,34774
#define GPUREG_ATTRIBBUFFER6_OFFSET GPUREG_ATTRIBBUFFER6_OFFSET562,34862
#define GPUREG_ATTRIBBUFFER6_CONFIG1 GPUREG_ATTRIBBUFFER6_CONFIG1563,34943
#define GPUREG_ATTRIBBUFFER6_CONFIG2 GPUREG_ATTRIBBUFFER6_CONFIG2564,35031
#define GPUREG_ATTRIBBUFFER7_OFFSET GPUREG_ATTRIBBUFFER7_OFFSET565,35119
#define GPUREG_ATTRIBBUFFER7_CONFIG1 GPUREG_ATTRIBBUFFER7_CONFIG1566,35200
#define GPUREG_ATTRIBBUFFER7_CONFIG2 GPUREG_ATTRIBBUFFER7_CONFIG2567,35288
#define GPUREG_ATTRIBBUFFER8_OFFSET GPUREG_ATTRIBBUFFER8_OFFSET568,35376
#define GPUREG_ATTRIBBUFFER8_CONFIG1 GPUREG_ATTRIBBUFFER8_CONFIG1569,35457
#define GPUREG_ATTRIBBUFFER8_CONFIG2 GPUREG_ATTRIBBUFFER8_CONFIG2570,35545
#define GPUREG_ATTRIBBUFFER9_OFFSET GPUREG_ATTRIBBUFFER9_OFFSET571,35633
#define GPUREG_ATTRIBBUFFER9_CONFIG1 GPUREG_ATTRIBBUFFER9_CONFIG1572,35714
#define GPUREG_ATTRIBBUFFER9_CONFIG2 GPUREG_ATTRIBBUFFER9_CONFIG2573,35802
#define GPUREG_ATTRIBBUFFERA_OFFSET GPUREG_ATTRIBBUFFERA_OFFSET574,35890
#define GPUREG_ATTRIBBUFFERA_CONFIG1 GPUREG_ATTRIBBUFFERA_CONFIG1575,35971
#define GPUREG_ATTRIBBUFFERA_CONFIG2 GPUREG_ATTRIBBUFFERA_CONFIG2576,36059
#define GPUREG_ATTRIBBUFFERB_OFFSET GPUREG_ATTRIBBUFFERB_OFFSET577,36147
#define GPUREG_ATTRIBBUFFERB_CONFIG1 GPUREG_ATTRIBBUFFERB_CONFIG1578,36228
#define GPUREG_ATTRIBBUFFERB_CONFIG2 GPUREG_ATTRIBBUFFERB_CONFIG2579,36316
#define GPUREG_INDEXBUFFER_CONFIG GPUREG_INDEXBUFFER_CONFIG580,36404
#define GPUREG_NUMVERTICES GPUREG_NUMVERTICES581,36485
#define GPUREG_GEOSTAGE_CONFIG GPUREG_GEOSTAGE_CONFIG582,36558
#define GPUREG_VERTEX_OFFSET GPUREG_VERTEX_OFFSET583,36641
#define GPUREG_022B GPUREG_022B584,36709
#define GPUREG_022C GPUREG_022C585,36771
#define GPUREG_POST_VERTEX_CACHE_NUM GPUREG_POST_VERTEX_CACHE_NUM586,36833
#define GPUREG_DRAWARRAYS GPUREG_DRAWARRAYS587,36895
#define GPUREG_DRAWELEMENTS GPUREG_DRAWELEMENTS588,36969
#define GPUREG_0230 GPUREG_0230589,37044
#define GPUREG_VTX_FUNC GPUREG_VTX_FUNC590,37106
#define GPUREG_FIXEDATTRIB_INDEX GPUREG_FIXEDATTRIB_INDEX591,37168
#define GPUREG_FIXEDATTRIB_DATA0 GPUREG_FIXEDATTRIB_DATA0592,37244
#define GPUREG_FIXEDATTRIB_DATA1 GPUREG_FIXEDATTRIB_DATA1593,37321
#define GPUREG_FIXEDATTRIB_DATA2 GPUREG_FIXEDATTRIB_DATA2594,37398
#define GPUREG_0236 GPUREG_0236595,37475
#define GPUREG_0237 GPUREG_0237596,37537
#define GPUREG_CMDBUF_SIZE0 GPUREG_CMDBUF_SIZE0597,37599
#define GPUREG_CMDBUF_SIZE1 GPUREG_CMDBUF_SIZE1598,37675
#define GPUREG_CMDBUF_ADDR0 GPUREG_CMDBUF_ADDR0599,37751
#define GPUREG_CMDBUF_ADDR1 GPUREG_CMDBUF_ADDR1600,37830
#define GPUREG_CMDBUF_JUMP0 GPUREG_CMDBUF_JUMP0601,37909
#define GPUREG_CMDBUF_JUMP1 GPUREG_CMDBUF_JUMP1602,37985
#define GPUREG_023E GPUREG_023E603,38061
#define GPUREG_023F GPUREG_023F604,38123
#define GPUREG_0240 GPUREG_0240605,38185
#define GPUREG_0241 GPUREG_0241606,38247
#define GPUREG_VSH_NUM_ATTR GPUREG_VSH_NUM_ATTR607,38309
#define GPUREG_0243 GPUREG_0243608,38371
#define GPUREG_VSH_COM_MODE GPUREG_VSH_COM_MODE609,38433
#define GPUREG_START_DRAW_FUNC0 GPUREG_START_DRAW_FUNC0610,38495
#define GPUREG_0246 GPUREG_0246611,38557
#define GPUREG_0247 GPUREG_0247612,38619
#define GPUREG_0248 GPUREG_0248613,38681
#define GPUREG_0249 GPUREG_0249614,38743
#define GPUREG_VSH_OUTMAP_TOTAL1 GPUREG_VSH_OUTMAP_TOTAL1615,38805
#define GPUREG_024B GPUREG_024B616,38867
#define GPUREG_024C GPUREG_024C617,38929
#define GPUREG_024D GPUREG_024D618,38991
#define GPUREG_024E GPUREG_024E619,39053
#define GPUREG_024F GPUREG_024F620,39115
#define GPUREG_0250 GPUREG_0250621,39177
#define GPUREG_VSH_OUTMAP_TOTAL2 GPUREG_VSH_OUTMAP_TOTAL2622,39239
#define GPUREG_GSH_MISC0 GPUREG_GSH_MISC0623,39301
#define GPUREG_GEOSTAGE_CONFIG2 GPUREG_GEOSTAGE_CONFIG2624,39363
#define GPUREG_GSH_MISC1 GPUREG_GSH_MISC1625,39425
#define GPUREG_0255 GPUREG_0255626,39487
#define GPUREG_0256 GPUREG_0256627,39549
#define GPUREG_0257 GPUREG_0257628,39611
#define GPUREG_0258 GPUREG_0258629,39673
#define GPUREG_0259 GPUREG_0259630,39735
#define GPUREG_025A GPUREG_025A631,39797
#define GPUREG_025B GPUREG_025B632,39859
#define GPUREG_025C GPUREG_025C633,39921
#define GPUREG_025D GPUREG_025D634,39983
#define GPUREG_PRIMITIVE_CONFIG GPUREG_PRIMITIVE_CONFIG635,40045
#define GPUREG_RESTART_PRIMITIVE GPUREG_RESTART_PRIMITIVE636,40123
#define GPUREG_0260 GPUREG_0260637,40200
#define GPUREG_0261 GPUREG_0261638,40262
#define GPUREG_0262 GPUREG_0262639,40324
#define GPUREG_0263 GPUREG_0263640,40386
#define GPUREG_0264 GPUREG_0264641,40448
#define GPUREG_0265 GPUREG_0265642,40510
#define GPUREG_0266 GPUREG_0266643,40572
#define GPUREG_0267 GPUREG_0267644,40634
#define GPUREG_0268 GPUREG_0268645,40696
#define GPUREG_0269 GPUREG_0269646,40758
#define GPUREG_026A GPUREG_026A647,40820
#define GPUREG_026B GPUREG_026B648,40882
#define GPUREG_026C GPUREG_026C649,40944
#define GPUREG_026D GPUREG_026D650,41006
#define GPUREG_026E GPUREG_026E651,41068
#define GPUREG_026F GPUREG_026F652,41130
#define GPUREG_0270 GPUREG_0270653,41192
#define GPUREG_0271 GPUREG_0271654,41254
#define GPUREG_0272 GPUREG_0272655,41316
#define GPUREG_0273 GPUREG_0273656,41378
#define GPUREG_0274 GPUREG_0274657,41440
#define GPUREG_0275 GPUREG_0275658,41502
#define GPUREG_0276 GPUREG_0276659,41564
#define GPUREG_0277 GPUREG_0277660,41626
#define GPUREG_0278 GPUREG_0278661,41688
#define GPUREG_0279 GPUREG_0279662,41750
#define GPUREG_027A GPUREG_027A663,41812
#define GPUREG_027B GPUREG_027B664,41874
#define GPUREG_027C GPUREG_027C665,41936
#define GPUREG_027D GPUREG_027D666,41998
#define GPUREG_027E GPUREG_027E667,42060
#define GPUREG_027F GPUREG_027F668,42122
#define GPUREG_GSH_BOOLUNIFORM GPUREG_GSH_BOOLUNIFORM673,42246
#define GPUREG_GSH_INTUNIFORM_I0 GPUREG_GSH_INTUNIFORM_I0674,42336
#define GPUREG_GSH_INTUNIFORM_I1 GPUREG_GSH_INTUNIFORM_I1675,42430
#define GPUREG_GSH_INTUNIFORM_I2 GPUREG_GSH_INTUNIFORM_I2676,42524
#define GPUREG_GSH_INTUNIFORM_I3 GPUREG_GSH_INTUNIFORM_I3677,42618
#define GPUREG_0285 GPUREG_0285678,42712
#define GPUREG_0286 GPUREG_0286679,42780
#define GPUREG_0287 GPUREG_0287680,42848
#define GPUREG_0288 GPUREG_0288681,42916
#define GPUREG_GSH_INPUTBUFFER_CONFIG GPUREG_GSH_INPUTBUFFER_CONFIG682,42984
#define GPUREG_GSH_ENTRYPOINT GPUREG_GSH_ENTRYPOINT683,43087
#define GPUREG_GSH_ATTRIBUTES_PERMUTATION_LOW GPUREG_GSH_ATTRIBUTES_PERMUTATION_LOW684,43175
#define GPUREG_GSH_ATTRIBUTES_PERMUTATION_HIGH GPUREG_GSH_ATTRIBUTES_PERMUTATION_HIGH685,43278
#define GPUREG_GSH_OUTMAP_MASK GPUREG_GSH_OUTMAP_MASK686,43382
#define GPUREG_028E GPUREG_028E687,43474
#define GPUREG_GSH_CODETRANSFER_END GPUREG_GSH_CODETRANSFER_END688,43542
#define GPUREG_GSH_FLOATUNIFORM_CONFIG GPUREG_GSH_FLOATUNIFORM_CONFIG689,43644
#define GPUREG_GSH_FLOATUNIFORM_DATA GPUREG_GSH_FLOATUNIFORM_DATA690,43748
#define GPUREG_0299 GPUREG_0299691,43843
#define GPUREG_029A GPUREG_029A692,43911
#define GPUREG_GSH_CODETRANSFER_CONFIG GPUREG_GSH_CODETRANSFER_CONFIG693,43979
#define GPUREG_GSH_CODETRANSFER_DATA GPUREG_GSH_CODETRANSFER_DATA694,44083
#define GPUREG_02A4 GPUREG_02A4695,44178
#define GPUREG_GSH_OPDESCS_CONFIG GPUREG_GSH_OPDESCS_CONFIG696,44246
#define GPUREG_GSH_OPDESCS_DATA GPUREG_GSH_OPDESCS_DATA697,44356
#define GPUREG_02AE GPUREG_02AE698,44457
#define GPUREG_02AF GPUREG_02AF699,44525
#define GPUREG_VSH_BOOLUNIFORM GPUREG_VSH_BOOLUNIFORM704,44653
#define GPUREG_VSH_INTUNIFORM_I0 GPUREG_VSH_INTUNIFORM_I0705,44741
#define GPUREG_VSH_INTUNIFORM_I1 GPUREG_VSH_INTUNIFORM_I1706,44833
#define GPUREG_VSH_INTUNIFORM_I2 GPUREG_VSH_INTUNIFORM_I2707,44925
#define GPUREG_VSH_INTUNIFORM_I3 GPUREG_VSH_INTUNIFORM_I3708,45017
#define GPUREG_02B5 GPUREG_02B5709,45109
#define GPUREG_02B6 GPUREG_02B6710,45177
#define GPUREG_02B7 GPUREG_02B7711,45245
#define GPUREG_02B8 GPUREG_02B8712,45313
#define GPUREG_VSH_INPUTBUFFER_CONFIG GPUREG_VSH_INPUTBUFFER_CONFIG713,45381
#define GPUREG_VSH_ENTRYPOINT GPUREG_VSH_ENTRYPOINT714,45482
#define GPUREG_VSH_ATTRIBUTES_PERMUTATION_LOW GPUREG_VSH_ATTRIBUTES_PERMUTATION_LOW715,45568
#define GPUREG_VSH_ATTRIBUTES_PERMUTATION_HIGH GPUREG_VSH_ATTRIBUTES_PERMUTATION_HIGH716,45669
#define GPUREG_VSH_OUTMAP_MASK GPUREG_VSH_OUTMAP_MASK717,45771
#define GPUREG_02BE GPUREG_02BE718,45861
#define GPUREG_VSH_CODETRANSFER_END GPUREG_VSH_CODETRANSFER_END719,45929
#define GPUREG_VSH_FLOATUNIFORM_CONFIG GPUREG_VSH_FLOATUNIFORM_CONFIG720,46029
#define GPUREG_VSH_FLOATUNIFORM_DATA GPUREG_VSH_FLOATUNIFORM_DATA721,46131
#define GPUREG_02C9 GPUREG_02C9722,46224
#define GPUREG_02CA GPUREG_02CA723,46292
#define GPUREG_VSH_CODETRANSFER_CONFIG GPUREG_VSH_CODETRANSFER_CONFIG724,46360
#define GPUREG_VSH_CODETRANSFER_DATA GPUREG_VSH_CODETRANSFER_DATA725,46462
#define GPUREG_02D4 GPUREG_02D4726,46555
#define GPUREG_VSH_OPDESCS_CONFIG GPUREG_VSH_OPDESCS_CONFIG727,46623
#define GPUREG_VSH_OPDESCS_DATA GPUREG_VSH_OPDESCS_DATA728,46731
#define GPUREG_02DE GPUREG_02DE729,46830
#define GPUREG_02DF GPUREG_02DF730,46898
#define GPUREG_02E0 GPUREG_02E0735,47020
#define GPUREG_02E1 GPUREG_02E1736,47061
#define GPUREG_02E2 GPUREG_02E2737,47102
#define GPUREG_02E3 GPUREG_02E3738,47143
#define GPUREG_02E4 GPUREG_02E4739,47184
#define GPUREG_02E5 GPUREG_02E5740,47225
#define GPUREG_02E6 GPUREG_02E6741,47266
#define GPUREG_02E7 GPUREG_02E7742,47307
#define GPUREG_02E8 GPUREG_02E8743,47348
#define GPUREG_02E9 GPUREG_02E9744,47389
#define GPUREG_02EA GPUREG_02EA745,47430
#define GPUREG_02EB GPUREG_02EB746,47471
#define GPUREG_02EC GPUREG_02EC747,47512
#define GPUREG_02ED GPUREG_02ED748,47553
#define GPUREG_02EE GPUREG_02EE749,47594
#define GPUREG_02EF GPUREG_02EF750,47635
#define GPUREG_02F0 GPUREG_02F0751,47676
#define GPUREG_02F1 GPUREG_02F1752,47717
#define GPUREG_02F2 GPUREG_02F2753,47758
#define GPUREG_02F3 GPUREG_02F3754,47799
#define GPUREG_02F4 GPUREG_02F4755,47840
#define GPUREG_02F5 GPUREG_02F5756,47881
#define GPUREG_02F6 GPUREG_02F6757,47922
#define GPUREG_02F7 GPUREG_02F7758,47963
#define GPUREG_02F8 GPUREG_02F8759,48004
#define GPUREG_02F9 GPUREG_02F9760,48045
#define GPUREG_02FA GPUREG_02FA761,48086
#define GPUREG_02FB GPUREG_02FB762,48127
#define GPUREG_02FC GPUREG_02FC763,48168
#define GPUREG_02FD GPUREG_02FD764,48209
#define GPUREG_02FE GPUREG_02FE765,48250
#define GPUREG_02FF GPUREG_02FF766,48291

include/3ds/gpu/gx.h,3150
#define GX_BUFFER_DIM(GX_BUFFER_DIM12,294
{__anon91e6c9a1010319,445
	GX_TRANSFER_FMT_RGBA8  = 0, ///< 8-bit Red + 8-bit Green + 8-bit Blue + 8-bit AlphaGX_TRANSFER_FMT_RGBA820,447
	GX_TRANSFER_FMT_RGB8   = 1, ///< 8-bit Red + 8-bit Green + 8-bit BlueGX_TRANSFER_FMT_RGB821,532
	GX_TRANSFER_FMT_RGB565 = 2, ///< 5-bit Red + 6-bit Green + 5-bit BlueGX_TRANSFER_FMT_RGB56522,603
	GX_TRANSFER_FMT_RGB5A1 = 3, ///< 5-bit Red + 5-bit Green + 5-bit Blue + 1-bit AlphaGX_TRANSFER_FMT_RGB5A123,674
	GX_TRANSFER_FMT_RGBA4  = 4  ///< 4-bit Red + 4-bit Green + 4-bit Blue + 4-bit AlphaGX_TRANSFER_FMT_RGBA424,759
} GX_TRANSFER_FORMAT;GX_TRANSFER_FORMAT25,844
{__anon91e6c9a1020334,1070
	GX_TRANSFER_SCALE_NO = 0, ///< No anti-aliasingGX_TRANSFER_SCALE_NO35,1072
	GX_TRANSFER_SCALE_X  = 1, ///< 2x1 anti-aliasingGX_TRANSFER_SCALE_X36,1121
	GX_TRANSFER_SCALE_XY = 2, ///< 2x2 anti-aliasingGX_TRANSFER_SCALE_XY37,1171
} GX_TRANSFER_SCALE;GX_TRANSFER_SCALE38,1221
{__anon91e6c9a1030342,1286
	GX_FILL_TRIGGER     = 0x001, ///< Trigger the PPF eventGX_FILL_TRIGGER43,1288
	GX_FILL_FINISHED    = 0x002, ///< Indicates if the memory fill is complete. You should not use GX_FILL_FINISHED44,1345
	GX_FILL_16BIT_DEPTH = 0x000, ///< The buffer has a 16 bit per pixel depthGX_FILL_16BIT_DEPTH45,1472
	GX_FILL_24BIT_DEPTH = 0x100, ///< The buffer has a 24 bit per pixel depthGX_FILL_24BIT_DEPTH46,1547
	GX_FILL_32BIT_DEPTH = 0x200, ///< The buffer has a 32 bit per pixel depthGX_FILL_32BIT_DEPTH47,1622
} GX_FILL_CONTROL;GX_FILL_CONTROL48,1697
#define GX_TRANSFER_FLIP_VERT(GX_TRANSFER_FLIP_VERT51,1760
#define GX_TRANSFER_OUT_TILED(GX_TRANSFER_OUT_TILED53,1845
#define GX_TRANSFER_RAW_COPY(GX_TRANSFER_RAW_COPY55,1926
#define GX_TRANSFER_IN_FORMAT(GX_TRANSFER_IN_FORMAT57,2011
#define GX_TRANSFER_OUT_FORMAT(GX_TRANSFER_OUT_FORMAT59,2097
#define GX_TRANSFER_SCALING(GX_TRANSFER_SCALING61,2178
#define GX_CMDLIST_UPDATE_GAS_ACC GX_CMDLIST_UPDATE_GAS_ACC64,2263
#define GX_CMDLIST_FLUSH GX_CMDLIST_FLUSH66,2334
{__anon91e6c9a1040a70,2411
	u32 data[8]; ///< Raw command datadata71,2413
	{__anon91e6c9a1050873,2457
		u8 type;     ///< Command typetype74,2460
		u8 unk1;unk175,2493
		u8 unk2;unk276,2504
		u8 unk3;unk377,2515
		u32 args[7]; ///< Command argumentsargs78,2526
} gxCmdEntry_s;gxCmdEntry_s80,2568
typedef struct tag_gxCmdQueue_stag_gxCmdQueue_s83,2616
	gxCmdEntry_s* entries; ///< Pointer to array of GX command entriesentries85,2650
	u16 maxEntries;        ///< Capacity of the command arraymaxEntries86,2718
	u16 numEntries;        ///< Number of commands in the queuenumEntries87,2777
	u16 curEntry;          ///< Index of the first pending command to be submitted to GXcurEntry88,2838
	u16 lastEntry;         ///< Number of commands completed by GXlastEntry89,2924
	void (* callback)(struct tag_gxCmdQueue_s*); ///< User callbackcallback90,2988
	void* user;            ///< Data for user callbackuser91,3053
} gxCmdQueue_s;gxCmdQueue_s92,3105
static inline void gxCmdQueueSetCallback(gxCmdQueue_s* queue, void (* callback)(gxCmdQueue_s*), gxCmdQueueSetCallback133,4298

include/3ds/gpu/gpu.h,800
#define GPUCMD_HEADER(GPUCMD_HEADER11,207
static inline void GPUCMD_SetBuffer(u32* adr, u32 size, u32 offset)GPUCMD_SetBuffer23,670
static inline void GPUCMD_SetBufferOffset(u32 offset)GPUCMD_SetBufferOffset34,913
static inline void GPUCMD_GetBuffer(u32** addr, u32* size, u32* offset)GPUCMD_GetBuffer45,1259
static inline void GPUCMD_AddSingleParam(u32 header, u32 param)GPUCMD_AddSingleParam103,2803
#define GPUCMD_AddMaskedWrite(GPUCMD_AddMaskedWrite109,2968
#define GPUCMD_AddWrite(GPUCMD_AddWrite111,3133
#define GPUCMD_AddMaskedWrites(GPUCMD_AddMaskedWrites113,3280
#define GPUCMD_AddWrites(GPUCMD_AddWrites115,3457
#define GPUCMD_AddMaskedIncrementalWrites(GPUCMD_AddMaskedIncrementalWrites117,3632
#define GPUCMD_AddIncrementalWrites(GPUCMD_AddIncrementalWrites119,3832

include/3ds/os.h,5447
#define SYSCLOCK_SOC SYSCLOCK_SOC8,81
#define SYSCLOCK_ARM9 SYSCLOCK_ARM99,119
#define SYSCLOCK_ARM11 SYSCLOCK_ARM1110,165
#define SYSCLOCK_ARM11_NEW SYSCLOCK_ARM11_NEW11,212
#define CPU_TICKS_PER_MSEC CPU_TICKS_PER_MSEC13,261
#define CPU_TICKS_PER_USEC CPU_TICKS_PER_USEC14,314
#define SYSTEM_VERSION(SYSTEM_VERSION17,419
#define GET_VERSION_MAJOR(GET_VERSION_MAJOR21,578
#define GET_VERSION_MINOR(GET_VERSION_MINOR24,696
#define GET_VERSION_REVISION(GET_VERSION_REVISION27,823
#define OS_HEAP_AREA_BEGIN OS_HEAP_AREA_BEGIN29,885
#define OS_HEAP_AREA_END OS_HEAP_AREA_END30,980
#define OS_MAP_AREA_BEGIN OS_MAP_AREA_BEGIN32,1074
#define OS_MAP_AREA_END OS_MAP_AREA_END33,1173
#define OS_OLD_FCRAM_VADDR OS_OLD_FCRAM_VADDR35,1271
#define OS_OLD_FCRAM_PADDR OS_OLD_FCRAM_PADDR36,1363
#define OS_OLD_FCRAM_SIZE OS_OLD_FCRAM_SIZE37,1456
#define OS_QTMRAM_VADDR OS_QTMRAM_VADDR39,1548
#define OS_QTMRAM_PADDR OS_QTMRAM_PADDR40,1625
#define OS_QTMRAM_SIZE OS_QTMRAM_SIZE41,1703
#define OS_MMIO_VADDR OS_MMIO_VADDR43,1811
#define OS_MMIO_PADDR OS_MMIO_PADDR44,1893
#define OS_MMIO_SIZE OS_MMIO_SIZE45,1976
#define OS_VRAM_VADDR OS_VRAM_VADDR47,2056
#define OS_VRAM_PADDR OS_VRAM_PADDR48,2120
#define OS_VRAM_SIZE OS_VRAM_SIZE49,2185
#define OS_DSPRAM_VADDR OS_DSPRAM_VADDR51,2247
#define OS_DSPRAM_PADDR OS_DSPRAM_PADDR52,2317
#define OS_DSPRAM_SIZE OS_DSPRAM_SIZE53,2388
#define OS_KERNELCFG_VADDR OS_KERNELCFG_VADDR55,2458
#define OS_SHAREDCFG_VADDR OS_SHAREDCFG_VADDR56,2543
#define OS_FCRAM_VADDR OS_FCRAM_VADDR58,2636
#define OS_FCRAM_PADDR OS_FCRAM_PADDR59,2716
#define OS_FCRAM_SIZE OS_FCRAM_SIZE60,2797
#define OS_KernelConfig OS_KernelConfig62,2877
#define OS_SharedConfig OS_SharedConfig63,3021
{__anonf35baaa9010867,3231
	u32 kernel_ver;kernel_ver68,3233
	u32 update_flag;update_flag69,3250
	u64 ns_tid;ns_tid70,3268
	u32 kernel_syscore_ver;kernel_syscore_ver71,3281
	u8  env_info;env_info72,3306
	u8  unit_info;unit_info73,3321
	u8  boot_env;boot_env74,3337
	u8  unk_0x17;unk_0x1775,3352
	u32 kernel_ctrsdk_ver;kernel_ctrsdk_ver76,3367
	u32 unk_0x1c;unk_0x1c77,3391
	u32 firmlaunch_flags;firmlaunch_flags78,3406
	u8  unk_0x24[0xc];unk_0x2479,3429
	u32 app_memtype;app_memtype80,3449
	u8  unk_0x34[0xc];unk_0x3481,3467
	u32 memregion_sz[3];memregion_sz82,3487
	u8  unk_0x4c[0x14];unk_0x4c83,3509
	u32 firm_ver;firm_ver84,3530
	u32 firm_syscore_ver;firm_syscore_ver85,3545
	u32 firm_ctrsdk_ver;firm_ctrsdk_ver86,3568
} osKernelConfig_s;osKernelConfig_s87,3590
{__anonf35baaa9020891,3684
	u64 value_ms;   ///< Milliseconds elapsed since January 1900 when this structure was last updatvalue_ms92,3686
	u64 value_tick; ///< System ticks elapsed since boot when this structure was last updatedvalue_tick93,3785
	s64 sysclock_hz;///< System clock frequency in Hz adjusted using RTC measurements (usually arousysclock_hz94,3876
	s64 drift_ms;   ///< Measured time drift of the system clock (according to the RTC) in millisecdrift_ms95,3996
} osTimeRef_s;osTimeRef_s96,4119
{__anonf35baaa90308100,4246
	vu32 timeref_cnt;timeref_cnt101,4248
	u8   running_hw;running_hw102,4267
	u8   mcu_hwinfo;mcu_hwinfo103,4285
	u8   unk_0x06[0x1A];unk_0x06104,4303
	volatile osTimeRef_s timeref[2];timeref105,4325
	u8   wifi_macaddr[6];wifi_macaddr106,4359
	vu8  wifi_strength;wifi_strength107,4382
	vu8  network_state;network_state108,4403
	u8   unk_0x68[0x18];unk_0x68109,4424
	volatile float slider_3d;slider_3d110,4446
	vu8  led_3d;led_3d111,4473
	vu8  led_battery;led_battery112,4487
	vu8  unk_flag;unk_flag113,4506
	u8   unk_0x87;unk_0x87114,4522
	u8   unk_0x88[0x18];unk_0x88115,4538
	vu64 menu_tid;menu_tid116,4560
	vu64 cur_menu_tid;cur_menu_tid117,4576
	u8   unk_0xB0[0x10];unk_0xB0118,4596
	vu8  headset_connected;headset_connected119,4618
} osSharedConfig_s;osSharedConfig_s120,4643
{__anonf35baaa90408124,4697
	u64 elapsed;   ///< Elapsed CPU ticks between measurements.elapsed125,4699
	u64 reference; ///< Point in time used as reference.reference126,4760
} TickCounter;TickCounter127,4814
{__anonf35baaa90508131,4937
	u8 build;build132,4939
	u8 minor;minor133,4950
	u8 mainver;//"major" in CVER, NUP version in NVer.mainver134,4961
	u8 reserved_x3;reserved_x3135,5013
	char region;//"ASCII character for the system version region"region136,5030
	u8 reserved_x5[0x3];reserved_x5137,5093
} OS_VersionBin;OS_VersionBin138,5115
static inline u32 osGetFirmVersion(void)osGetFirmVersion170,6192
static inline u32 osGetKernelVersion(void)osGetKernelVersion185,6576
static inline u32 osGetSystemCoreVersion(void)osGetSystemCoreVersion191,6747
static inline u32 osGetApplicationMemType(void)osGetApplicationMemType197,6916
static inline u32 osGetMemRegionSize(MemRegion region)osGetMemRegionSize207,7164
static inline u32 osGetMemRegionUsed(MemRegion region)osGetMemRegionUsed221,7618
static inline u32 osGetMemRegionFree(MemRegion region)osGetMemRegionFree233,7924
static inline void osTickCounterStart(TickCounter* cnt)osTickCounterStart254,8400
static inline void osTickCounterUpdate(TickCounter* cnt)osTickCounterUpdate263,8593
static inline u8 osGetWifiStrength(void)osGetWifiStrength292,9437
static inline float osGet3DSliderState(void)osGet3DSliderState301,9622
static inline bool osIsHeadsetConnected(void)osIsHeadsetConnected310,9791

include/3ds/exheader.h,11607
{__anon70b498cd010311,141
	ARM9DESC_MOUNT_NAND         = BIT(0), ///< Mount "nand:/"ARM9DESC_MOUNT_NAND12,143
	ARM9DESC_MOUNT_NANDRO_RW    = BIT(1), ///< Mount nand:/ro/ as read-writeARM9DESC_MOUNT_NANDRO_RW13,202
	ARM9DESC_MOUNT_TWLN         = BIT(2), ///< Mount "twln:/"ARM9DESC_MOUNT_TWLN14,276
	ARM9DESC_MOUNT_WNAND        = BIT(3), ///< Mount "wnand:/"ARM9DESC_MOUNT_WNAND15,335
	ARM9DESC_MOUNT_CARDSPI      = BIT(4), ///< Mount "cardspi:/"ARM9DESC_MOUNT_CARDSPI16,395
	ARM9DESC_USE_SDIF3          = BIT(5), ///< Use SDIF3ARM9DESC_USE_SDIF317,457
	ARM9DESC_CREATE_SEED        = BIT(6), ///< Create seed (movable.sed)ARM9DESC_CREATE_SEED18,511
	ARM9DESC_USE_CARD_SPI       = BIT(7), ///< Use card SPI, required by multiple pxi:dev commandsARM9DESC_USE_CARD_SPI19,581
	ARM9DESC_SD_APPLICATION     = BIT(8), ///< SD application (not checked)ARM9DESC_SD_APPLICATION20,677
	ARM9DESC_MOUNT_SDMC_RW      = BIT(9), ///< Mount "sdmc:/" as read-writeARM9DESC_MOUNT_SDMC_RW21,750
{__anon70b498cd020326,860
	FSACCESS_CATEGORY_SYSTEM_APPLICATION    = BIT(0),   ///< Category "system application"FSACCESS_CATEGORY_SYSTEM_APPLICATION27,862
	FSACCESS_CATEGORY_HARDWARE_CHECK        = BIT(1),   ///< Category "hardware check"FSACCESS_CATEGORY_HARDWARE_CHECK28,950
	FSACCESS_CATEGORY_FILESYSTEM_TOOL       = BIT(2),   ///< Category "filesystem tool"FSACCESS_CATEGORY_FILESYSTEM_TOOL29,1034
	FSACCESS_DEBUG                          = BIT(3),   ///< DebugFSACCESS_DEBUG30,1119
	FSACCESS_TWLCARD_BACKUP                 = BIT(4),   ///< TWLCARD backupFSACCESS_TWLCARD_BACKUP31,1183
	FSACCESS_TWLNAND_DATA                   = BIT(5),   ///< TWLNAND dataFSACCESS_TWLNAND_DATA32,1256
	FSACCESS_BOSS                           = BIT(6),   ///< BOSS (SpotPass)FSACCESS_BOSS33,1327
	FSACCESS_SDMC_RW                        = BIT(7),   ///< SDMC (read-write)FSACCESS_SDMC_RW34,1401
	FSACCESS_CORE                           = BIT(8),   ///< CoreFSACCESS_CORE35,1477
	FSACCESS_NANDRO_RO                      = BIT(9),   ///< nand:/ro/ (read-only)FSACCESS_NANDRO_RO36,1540
	FSACCESS_NANDRW                         = BIT(10),  ///< nand:/rw/FSACCESS_NANDRW37,1620
	FSACCESS_NANDRO_RW                      = BIT(11),  ///< nand:/ro/ (read-write)FSACCESS_NANDRO_RW38,1688
	FSACCESS_CATEGORY_SYSTEM_SETTINGS       = BIT(12),  ///< Category "System Settings"FSACCESS_CATEGORY_SYSTEM_SETTINGS39,1769
	FSACCESS_CARDBOARD                      = BIT(13),  ///< Cardboard (System Transfer)FSACCESS_CARDBOARD40,1854
	FSACCESS_EXPORT_IMPORT_IVS              = BIT(14),  ///< Export/Import IVs (movable.sed)FSACCESS_EXPORT_IMPORT_IVS41,1940
	FSACCESS_SDMC_WO                        = BIT(15),  ///< SDMC (write-only)FSACCESS_SDMC_WO42,2030
	FSACCESS_SWITCH_CLEANUP                 = BIT(16),  ///< "Switch cleanup" (3.0+)FSACCESS_SWITCH_CLEANUP43,2106
	FSACCESS_SAVEDATA_MOVE                  = BIT(17),  ///< Savedata move (5.0+)FSACCESS_SAVEDATA_MOVE44,2188
	FSACCESS_SHOP                           = BIT(18),  ///< Shop (5.0+)FSACCESS_SHOP45,2267
	FSACCESS_SHELL                          = BIT(19),  ///< Shop (5.0+)FSACCESS_SHELL46,2337
	FSACCESS_CATEGORY_HOME_MENU             = BIT(20),  ///< Category "Home Menu" (6.0+)FSACCESS_CATEGORY_HOME_MENU47,2407
	FSACCESS_SEEDDB                         = BIT(21),  ///< Seed DB (9.6+)FSACCESS_SEEDDB48,2493
{__anon70b498cd030353,2626
	RESLIMIT_CATEGORY_APPLICATION = 0,  ///< Regular applicationRESLIMIT_CATEGORY_APPLICATION54,2628
	RESLIMIT_CATEGORY_SYS_APPLET  = 1,  ///< System appletRESLIMIT_CATEGORY_SYS_APPLET55,2690
	RESLIMIT_CATEGORY_LIB_APPLET  = 2,  ///< Library appletRESLIMIT_CATEGORY_LIB_APPLET56,2746
	RESLIMIT_CATEGORY_OTHER       = 3,  ///< System modules running inside the BASE memregionRESLIMIT_CATEGORY_OTHER57,2803
} ResourceLimitCategory;ResourceLimitCategory58,2894
{__anon70b498cd040362,2986
	SYSMODE_O3DS_PROD = 0,  ///< 64MB of usable application memorySYSMODE_O3DS_PROD63,2988
	SYSMODE_N3DS_PROD = 1,  ///< 124MB of usable application memory. Unusable on O3DSSYSMODE_N3DS_PROD64,3052
	SYSMODE_DEV1      = 2,  ///< 97MB/178MB of usable application memorySYSMODE_DEV165,3135
	SYSMODE_DEV2      = 3,  ///< 80MB/124MB of usable application memorySYSMODE_DEV266,3205
	SYSMODE_DEV3      = 4,  ///< 72MB of usable application memory. Same as "Prod" on N3DSSYSMODE_DEV367,3275
	SYSMODE_DEV4      = 5,  ///< 32MB of usable application memory. Same as "Prod" on N3DSSYSMODE_DEV468,3363
} SystemMode;SystemMode69,3451
{__anon70b498cd050874,3540
	u8 reserved[5];                 ///< Reservedreserved75,3542
	bool compress_exefs_code  : 1;  ///< Whether the ExeFS's .code section is compressedcompress_exefs_code76,3589
	bool is_sd_application    : 1;  ///< Whether the title is meant to be used on an SD cardis_sd_application77,3675
	u16 remaster_version;           ///< Remaster versionremaster_version78,3765
} ExHeader_SystemInfoFlags;ExHeader_SystemInfoFlags79,3820
{__anon70b498cd060883,3904
	u32 address;    ///< The address of the sectionaddress84,3906
	u32 num_pages;  ///< The number of pages the section occupiesnum_pages85,3955
	u32 size;       ///< The size of the sectionsize86,4018
} ExHeader_CodeSectionInfo;ExHeader_CodeSectionInfo87,4064
{__anon70b498cd070891,4165
	char name[8];                       ///< Title namename92,4167
	ExHeader_SystemInfoFlags flags;     ///< System info flags, see @ref ExHeader_SystemInfoFlagsflags93,4220
	ExHeader_CodeSectionInfo text;      ///< .text section info, see @ref ExHeader_CodeSectionInfotext94,4315
	u32 stack_size;                     ///< Stack sizestack_size95,4411
	ExHeader_CodeSectionInfo rodata;    ///< .rodata section info, see @ref ExHeader_CodeSectionInfrodata96,4464
	u32 reserved;                       ///< Reservedreserved97,4562
	ExHeader_CodeSectionInfo data;      ///< .data section info, see @ref ExHeader_CodeSectionInfodata98,4613
	u32 bss_size;                       ///< .bss section sizebss_size99,4709
} ExHeader_CodeSetInfo;ExHeader_CodeSetInfo100,4769
{__anon70b498cd0808104,4854
	u64 savedata_size;  ///< Savedata sizesavedata_size105,4856
	u64 jump_id;        ///< Jump IDjump_id106,4896
	u8 reserved[0x30];  ///< Reservedreserved107,4930
} ExHeader_SystemInfo;ExHeader_SystemInfo108,4965
{__anon70b498cd0908112,5073
	ExHeader_CodeSetInfo codeset_info;  ///< Code set info, see @ref ExHeader_CodeSetInfocodeset_info113,5075
	u64 dependencies[48];               ///< Title IDs of the titles that this program depends ondependencies114,5162
	ExHeader_SystemInfo system_info;    ///< System info, see @ref ExHeader_SystemInfosystem_info115,5257
} ExHeader_SystemControlInfo;ExHeader_SystemControlInfo116,5341
{__anon70b498cd0a08120,5428
	u64 extdata_id;                                 ///< Extdata IDextdata_id121,5430
	u32 system_savedata_ids[2];                     ///< IDs of the system savedata accessible by tsystem_savedata_ids122,5495
	u64 accessible_savedata_ids;                    ///< IDs of the savedata accessible by the titlaccessible_savedata_ids123,5600
	u32 fs_access_info;                             ///< FS access flagsfs_access_info124,5756
	u32 reserved                            : 24;   ///< Reservedreserved125,5826
	bool no_romfs                           : 1;    ///< Don't use any RomFSno_romfs126,5889
	bool use_extended_savedata_access       : 1;    ///< Use the "extdata_id" field to store 3 addiuse_extended_savedata_access127,5963
} ExHeader_Arm11StorageInfo;ExHeader_Arm11StorageInfo128,6090
{__anon70b498cd0b08132,6197
	u32 core_version;                           ///< The low title ID of the target firmwarecore_version133,6199
	bool use_cpu_clockrate_804MHz       : 1;    ///< Whether to start the title with the 804MHz clouse_cpu_clockrate_804MHz134,6289
	bool enable_l2c                     : 1;    ///< Whether to start the title with the L2C-310 enenable_l2c135,6393
	u8 flag1_unused                     : 6;    ///< Unusedflag1_unused136,6503
	SystemMode n3ds_system_mode         : 4;    ///< The system mode to use on N3DSn3ds_system_mode137,6560
	u8 flag2_unused                     : 4;    ///< Unusedflag2_unused138,6641
	u8 ideal_processor                  : 2;    ///< The ideal processor to start the title onideal_processor139,6698
	u8 affinity_mask                    : 2;    ///< The affinity mask of the titleaffinity_mask140,6790
	SystemMode o3ds_system_mode         : 4;    ///< The system mode to use on N3DSo3ds_system_mode141,6871
	u8 priority;                                ///< The priority of the title's main threadpriority142,6952
} ExHeader_Arm11CoreInfo;ExHeader_Arm11CoreInfo143,7042
{__anon70b498cd0c08147,7135
	u64 title_id;                               ///< Title IDtitle_id148,7137
	ExHeader_Arm11CoreInfo core_info;           ///< Core info, see @ref ExHeader_Arm11CoreInfocore_info149,7196
	u16 reslimits[16];                          ///< Resource limit descriptors, only "CpuTime" (fireslimits150,7289
	ExHeader_Arm11StorageInfo storage_info;     ///< Storage info, see @ref ExHeader_Arm11StorageInstorage_info151,7411
	char service_access[34][8];                 ///< List of the services the title has access to. service_access152,7510
	u8 reserved[15];                            ///< Reservedreserved153,7648
	ResourceLimitCategory reslimit_category;    ///< Resource limit category, see @ref ExHeader_Armreslimit_category154,7707
} ExHeader_Arm11SystemLocalCapabilities;ExHeader_Arm11SystemLocalCapabilities155,7829
{__anon70b498cd0d08159,7931
	u32 descriptors[28]; ///< ARM11 kernel descriptors, see 3dbrewdescriptors160,7933
	u8 reserved[16];     ///< Reservedreserved161,7997
} ExHeader_Arm11KernelCapabilities;ExHeader_Arm11KernelCapabilities162,8033
{__anon70b498cd0e08166,8124
	u8 descriptors[15];     ///< Process9 FS descriptors, see 3dbrewdescriptors167,8126
	u8 descriptor_version;  ///< Descriptor versiondescriptor_version168,8192
} ExHeader_Arm9AccessControl;ExHeader_Arm9AccessControl169,8241
{__anon70b498cd0f08173,8333
	ExHeader_Arm11SystemLocalCapabilities local_caps;   ///< ARM11 system-local capabilities, see @local_caps174,8335
	ExHeader_Arm11KernelCapabilities kernel_caps;       ///< ARM11 kernel capabilities, see @ref Exkernel_caps175,8473
	ExHeader_Arm9AccessControl access_control;          ///< ARM9 access control, see @ref ExHeaderaccess_control176,8605
} ExHeader_AccessControlInfo;ExHeader_AccessControlInfo177,8720
{__anon70b498cd1008181,8853
	ExHeader_SystemControlInfo sci; ///< System control info, see @ref ExHeader_SystemControlInfosci182,8855
	ExHeader_AccessControlInfo aci; ///< Access control info, see @ref ExHeader_AccessControlInfoaci183,8950
} ExHeader_Info;ExHeader_Info184,9045
{__anon70b498cd1108188,9116
	u8 signature[0x100];                ///< The signature of the access descriptor (RSA-2048-SHA25signature189,9118
	u8 ncchModulus[0x100];              ///< The modulus used for the above signature, with 65537 ancchModulus190,9217
	ExHeader_AccessControlInfo acli;    ///< This is compared for equality with the first ACI by Pracli191,9331
} ExHeader_AccessDescriptor;ExHeader_AccessDescriptor192,9471
{__anon70b498cd1208196,9556
	ExHeader_Info info;                             ///< Main extended header data, see @ref ExHeadinfo197,9558
	ExHeader_AccessDescriptor access_descriptor;    ///< Access descriptor, see @ref ExHeader_Accesaccess_descriptor198,9662
} ExHeader;ExHeader199,9770

include/3ds/romfs.h,1950
{__anon391f084e010812,149
	u32 headerSize;        ///< Size of the header.headerSize13,151
	u32 dirHashTableOff;   ///< Offset of the directory hash table.dirHashTableOff14,200
	u32 dirHashTableSize;  ///< Size of the directory hash table.dirHashTableSize15,265
	u32 dirTableOff;       ///< Offset of the directory table.dirTableOff16,328
	u32 dirTableSize;      ///< Size of the directory table.dirTableSize17,388
	u32 fileHashTableOff;  ///< Offset of the file hash table.fileHashTableOff18,446
	u32 fileHashTableSize; ///< Size of the file hash table.fileHashTableSize19,506
	u32 fileTableOff;      ///< Offset of the file table.fileTableOff20,564
	u32 fileTableSize;     ///< Size of the file table.fileTableSize21,619
	u32 fileDataOff;       ///< Offset of the file data.fileDataOff22,672
} romfs_header;romfs_header23,726
{__anon391f084e020827,779
	u32 parent;    ///< Offset of the parent directory.parent28,781
	u32 sibling;   ///< Offset of the next sibling directory.sibling29,834
	u32 childDir;  ///< Offset of the first child directory.childDir30,893
	u32 childFile; ///< Offset of the first file.childFile31,951
	u32 nextHash;  ///< Directory hash table pointer.nextHash32,998
	u32 nameLen;   ///< Name length.nameLen33,1049
	u16 name[];    ///< Name. (UTF-16)name34,1083
} romfs_dir;romfs_dir35,1119
{__anon391f084e030839,1164
	u32 parent;   ///< Offset of the parent directory.parent40,1166
	u32 sibling;  ///< Offset of the next sibling file.sibling41,1218
	u64 dataOff;  ///< Offset of the file's data.dataOff42,1271
	u64 dataSize; ///< Length of the file's data.dataSize43,1318
	u32 nextHash; ///< File hash table pointer.nextHash44,1365
	u32 nameLen;  ///< Name length.nameLen45,1410
	u16 name[];   ///< Name. (UTF-16)name46,1443
} romfs_file;romfs_file47,1478
static inline Result romfsInit(void)romfsInit84,2695
static inline Result romfsExit(void)romfsExit90,2842

include/3ds/ndsp/ndsp.h,2651
#define NDSP_SAMPLE_RATE NDSP_SAMPLE_RATE9,117
{__anon1d46fa00010315,229
	NDSP_OUTPUT_MONO     = 0, ///< Mono soundNDSP_OUTPUT_MONO16,231
	NDSP_OUTPUT_STEREO   = 1, ///< Stereo soundNDSP_OUTPUT_STEREO17,274
	NDSP_OUTPUT_SURROUND = 2, ///< 3D Surround soundNDSP_OUTPUT_SURROUND18,319
} ndspOutputMode;ndspOutputMode19,369
{__anon1d46fa00020323,420
	NDSP_CLIP_NORMAL = 0, ///< "Normal" clipping mode (?)NDSP_CLIP_NORMAL24,422
	NDSP_CLIP_SOFT   = 1, ///< "Soft" clipping mode (?)NDSP_CLIP_SOFT25,477
} ndspClippingMode;ndspClippingMode26,530
{__anon1d46fa00030330,595
	NDSP_SPKPOS_SQUARE = 0, ///<?NDSP_SPKPOS_SQUARE31,597
	NDSP_SPKPOS_WIDE   = 1, ///<?NDSP_SPKPOS_WIDE32,628
	NDSP_SPKPOS_NUM    = 2, ///<?NDSP_SPKPOS_NUM33,659
} ndspSpeakerPos;ndspSpeakerPos34,690
{__anon1d46fa00040838,740
	u16 index;    ///< Current predictor indexindex39,742
	s16 history0; ///< Last outputted PCM16 sample.history040,786
	s16 history1; ///< Second to last outputted PCM16 sample.history141,835
} ndspAdpcmData;ndspAdpcmData42,894
typedef struct tag_ndspWaveBuf ndspWaveBuf;ndspWaveBuf45,934
{__anon1d46fa00050349,1008
	NDSP_WBUF_FREE    = 0, ///< The wave buffer is not queued.NDSP_WBUF_FREE50,1010
	NDSP_WBUF_QUEUED  = 1, ///< The wave buffer is queued and has not been played yet.NDSP_WBUF_QUEUED51,1070
	NDSP_WBUF_PLAYING = 2, ///< The wave buffer is playing right now.NDSP_WBUF_PLAYING52,1154
	NDSP_WBUF_DONE    = 3, ///< The wave buffer has finished being played.NDSP_WBUF_DONE53,1221
struct tag_ndspWaveBuftag_ndspWaveBuf57,1321
	{__anon1d46fa00060a60,1353
		s8*         data_pcm8;  ///< Pointer to PCM8 sample data.data_pcm861,1356
		s16*        data_pcm16; ///< Pointer to PCM16 sample data.data_pcm1662,1416
		u8*         data_adpcm; ///< Pointer to DSPADPCM sample data.data_adpcm63,1477
		const void* data_vaddr; ///< Data virtual address.data_vaddr64,1541
	u32 nsamples;              ///< Total number of samples (PCM8=bytes, PCM16=halfwords, DSPADPCM=nsamples66,1598
	ndspAdpcmData* adpcm_data; ///< ADPCM data.adpcm_data67,1725
	u32  offset;  ///< Buffer offset. Only used for capture.offset69,1771
	bool looping; ///< Whether to loop the buffer.looping70,1829
	u8   status;  ///< Queuing/playback status.status71,1877
	u16 sequence_id;   ///< Sequence ID. Assigned automatically by ndspChnWaveBufAdd.sequence_id73,1923
	ndspWaveBuf* next; ///< Next buffer to play. Used internally, do not modify.next74,2006
typedef void (*ndspCallback)(void* data);ndspCallback78,2151
typedef void (*ndspAuxCallback)(void* data, int nsamples, void* samples[4]);ndspAuxCallback80,2314

include/3ds/ndsp/channel.h,1835
{__anon2e8ee884010311,165
	NDSP_ENCODING_PCM8 = 0, ///< PCM8NDSP_ENCODING_PCM812,167
	NDSP_ENCODING_PCM16,    ///< PCM16NDSP_ENCODING_PCM1613,202
	NDSP_ENCODING_ADPCM,    ///< DSPADPCM (GameCube format)NDSP_ENCODING_ADPCM14,238
#define NDSP_CHANNELS(NDSP_CHANNELS18,354
#define NDSP_ENCODING(NDSP_ENCODING20,440
{__anon2e8ee884020324,549
	NDSP_FORMAT_MONO_PCM8    = NDSP_CHANNELS(1) | NDSP_ENCODING(NDSP_ENCODING_PCM8),  ///< Buffer cNDSP_FORMAT_MONO_PCM825,551
	NDSP_FORMAT_MONO_PCM16   = NDSP_CHANNELS(1) | NDSP_ENCODING(NDSP_ENCODING_PCM16), ///< Buffer cNDSP_FORMAT_MONO_PCM1626,668
	NDSP_FORMAT_MONO_ADPCM   = NDSP_CHANNELS(1) | NDSP_ENCODING(NDSP_ENCODING_ADPCM), ///< Buffer cNDSP_FORMAT_MONO_ADPCM27,786
	NDSP_FORMAT_STEREO_PCM8  = NDSP_CHANNELS(2) | NDSP_ENCODING(NDSP_ENCODING_PCM8),  ///< Buffer cNDSP_FORMAT_STEREO_PCM828,904
	NDSP_FORMAT_STEREO_PCM16 = NDSP_CHANNELS(2) | NDSP_ENCODING(NDSP_ENCODING_PCM16), ///< Buffer cNDSP_FORMAT_STEREO_PCM1629,1021
	NDSP_FORMAT_PCM8  = NDSP_FORMAT_MONO_PCM8,  ///< (Alias) Buffer contains Mono PCM8.NDSP_FORMAT_PCM831,1140
	NDSP_FORMAT_PCM16 = NDSP_FORMAT_MONO_PCM16, ///< (Alias) Buffer contains Mono PCM16.NDSP_FORMAT_PCM1632,1225
	NDSP_FORMAT_ADPCM = NDSP_FORMAT_MONO_ADPCM, ///< (Alias) Buffer contains Mono ADPCM.NDSP_FORMAT_ADPCM33,1311
	NDSP_FRONT_BYPASS             = BIT(4), ///< Front bypass.NDSP_FRONT_BYPASS36,1408
	NDSP_3D_SURROUND_PREPROCESSED = BIT(6), ///< (?) Unknown, under researchNDSP_3D_SURROUND_PREPROCESSED37,1468
{__anon2e8ee884030342,1584
	NDSP_INTERP_POLYPHASE = 0, ///< Polyphase interpolationNDSP_INTERP_POLYPHASE43,1586
	NDSP_INTERP_LINEAR    = 1, ///< Linear interpolationNDSP_INTERP_LINEAR44,1643
	NDSP_INTERP_NONE      = 2, ///< No interpolationNDSP_INTERP_NONE45,1697
} ndspInterpType;ndspInterpType46,1747

include/3ds/asminc.h,0

include/3ds/ipc.h,1105
{__anon5e63a203010311,150
	IPC_BUFFER_R  = BIT(1),                     ///< ReadableIPC_BUFFER_R12,152
	IPC_BUFFER_W  = BIT(2),                     ///< WritableIPC_BUFFER_W13,211
	IPC_BUFFER_RW = IPC_BUFFER_R | IPC_BUFFER_W ///< Readable and WritableIPC_BUFFER_RW14,270
} IPC_BufferRights;IPC_BufferRights15,342
static inline u32 IPC_MakeHeader(u16 command_id, unsigned normal_params, unsigned translate_paraIPC_MakeHeader29,1090
static inline u32 IPC_Desc_SharedHandles(unsigned number)IPC_Desc_SharedHandles43,1610
static inline u32 IPC_Desc_MoveHandles(unsigned number)IPC_Desc_MoveHandles57,2035
static inline u32 IPC_Desc_CurProcessId(void)IPC_Desc_CurProcessId68,2395
static inline DEPRECATED u32 IPC_Desc_CurProcessHandle(void)IPC_Desc_CurProcessHandle73,2460
static inline u32 IPC_Desc_StaticBuffer(size_t size, unsigned buffer_id)IPC_Desc_StaticBuffer86,2883
static inline u32 IPC_Desc_PXIBuffer(size_t size, unsigned buffer_id, bool is_read_only)IPC_Desc_PXIBuffer100,3447
static inline u32 IPC_Desc_Buffer(size_t size, IPC_BufferRights rights)IPC_Desc_Buffer115,3929

include/3ds/env.h,713
enum {__anon5e1a781001038,103
	RUNFLAG_APTWORKAROUND = BIT(0), ///< Use APT workaround.RUNFLAG_APTWORKAROUND9,110
	RUNFLAG_APTREINIT     = BIT(1), ///< Reinitialize APT.RUNFLAG_APTREINIT10,168
	RUNFLAG_APTCHAINLOAD  = BIT(2), ///< Chainload APT on return.RUNFLAG_APTCHAINLOAD11,224
static inline bool envIsHomebrew(void) {envIsHomebrew18,457
static inline u32 envGetAptAppId(void) {envGetAptAppId34,842
static inline u32 envGetHeapSize(void) {envGetHeapSize43,1027
static inline u32 envGetLinearHeapSize(void) {envGetLinearHeapSize52,1212
static inline const char* envGetSystemArgList(void) {envGetSystemArgList61,1416
static inline u32 envGetSystemRunFlags(void) {envGetSystemRunFlags70,1613

include/sys/select.h,0

include/sys/socket.h,1519
#define SOL_SOCKET SOL_SOCKET6,57
#define PF_UNSPEC PF_UNSPEC8,89
#define PF_INET PF_INET9,115
#define PF_INET6 PF_INET610,141
#define AF_UNSPEC AF_UNSPEC12,169
#define AF_INET AF_INET13,203
#define AF_INET6 AF_INET614,235
#define SOCK_STREAM SOCK_STREAM16,269
#define SOCK_DGRAM SOCK_DGRAM17,295
#define MSG_OOB MSG_OOB20,379
#define MSG_PEEK MSG_PEEK21,410
#define MSG_DONTWAIT MSG_DONTWAIT22,441
#define MSG_DONTROUTE MSG_DONTROUTE23,472
#define MSG_WAITALL MSG_WAITALL24,511
#define MSG_MORE MSG_MORE25,550
#define MSG_NOSIGNAL MSG_NOSIGNAL26,589
#define SHUT_RD SHUT_RD28,646
#define SHUT_WR SHUT_WR29,672
#define SHUT_RDWR SHUT_RDWR30,698
#define SO_REUSEADDR SO_REUSEADDR35,754
#define SO_LINGER SO_LINGER36,807
#define SO_OOBINLINE SO_OOBINLINE37,866
#define SO_SNDBUF SO_SNDBUF38,942
#define SO_RCVBUF SO_RCVBUF39,998
#define SO_SNDLOWAT SO_SNDLOWAT40,1057
#define SO_RCVLOWAT SO_RCVLOWAT41,1129
#define SO_TYPE SO_TYPE42,1191
#define SO_ERROR SO_ERROR43,1246
#define SO_BROADCAST SO_BROADCAST45,1303
typedef uint32_t socklen_t;socklen_t47,1382
typedef uint16_t sa_family_t;sa_family_t48,1410
struct sockaddr {sockaddr50,1441
	sa_family_t sa_family;sa_family51,1459
	char        sa_data[];sa_data52,1483
struct sockaddr_storage {sockaddr_storage56,1557
	sa_family_t ss_family;ss_family57,1583
	char        __ss_padding[26];__ss_padding58,1607
struct linger {linger61,1642
	int l_onoff;l_onoff62,1658
	int l_linger;l_linger63,1672

include/sys/ioctl.h,30
#define FIONBIO	FIONBIO3,14

include/3ds.h,0

include/arpa/inet.h,242
static inline uint32_t htonl(uint32_t hostlong)htonl6,59
static inline uint16_t htons(uint16_t hostshort)htons11,149
static inline uint32_t ntohl(uint32_t netlong)ntohl16,241
static inline uint16_t ntohs(uint16_t netshort)ntohs21,329

source/romfs_dev.c,5112
typedef struct romfs_mountromfs_mount21,384
	devoptab_t         device;device23,413
	char               name[32];name24,441
	Handle             fd;fd25,471
	time_t             mtime;mtime26,495
	u32                offset;offset27,522
	romfs_header       header;header28,550
	romfs_dir          *cwd;cwd29,578
	u32                *dirHashTable, *fileHashTable;dirHashTable30,604
	u32                *dirHashTable, *fileHashTable;fileHashTable30,604
	void               *dirTable, *fileTable;dirTable31,655
	void               *dirTable, *fileTable;fileTable31,655
	struct romfs_mount *next;next32,698
} romfs_mount;romfs_mount33,725
#define romFS_root(romFS_root38,797
#define romFS_dir(romFS_dir39,849
#define romFS_file(romFS_file40,916
#define romFS_none romFS_none41,983
#define romFS_dir_mode romFS_dir_mode42,1017
#define romFS_file_mode romFS_file_mode43,1081
static ssize_t _romfs_read(romfs_mount *mount, u64 offset, void* buffer, u32 size)_romfs_read45,1146
static bool _romfs_read_chk(romfs_mount *mount, u64 offset, void* buffer, u32 size)_romfs_read_chk54,1396
{__anond890e7fb010874,2521
	romfs_mount *mount;mount75,2523
	romfs_file  *file;file76,2544
	u64         offset, pos;offset77,2564
	u64         offset, pos;pos77,2564
} romfs_fileobj;romfs_fileobj78,2590
{__anond890e7fb020881,2623
	romfs_mount *mount;mount82,2625
	romfs_dir* dir;dir83,2646
	u32        state;state84,2663
	u32        childDir;childDir85,2682
	u32        childFile;childFile86,2704
} romfs_diriter;romfs_diriter87,2727
static const devoptab_t romFS_devoptab =romFS_devoptab89,2745
#define _3DSX_MAGIC _3DSX_MAGIC110,3333
{__anond890e7fb0308112,3389
	u32 magic;magic113,3391
	u16 headerSize, relocHdrSize;headerSize114,3403
	u16 headerSize, relocHdrSize;relocHdrSize114,3403
	u32 formatVer;formatVer115,3434
	u32 flags;flags116,3450
	u32 codeSegSize, rodataSegSize, dataSegSize, bssSize;codeSegSize120,3589
	u32 codeSegSize, rodataSegSize, dataSegSize, bssSize;rodataSegSize120,3589
	u32 codeSegSize, rodataSegSize, dataSegSize, bssSize;dataSegSize120,3589
	u32 codeSegSize, rodataSegSize, dataSegSize, bssSize;bssSize120,3589
	u32 smdhOffset, smdhSize;smdhOffset122,3672
	u32 smdhOffset, smdhSize;smdhSize122,3672
	u32 fsOffset;fsOffset124,3724
} _3DSX_Header;_3DSX_Header125,3739
__attribute__((weak)) const char* __romfs_path = NULL;__romfs_path127,3756
static romfs_mount *romfs_mount_list = NULL;romfs_mount_list129,3812
static void romfs_insert(romfs_mount *mount)romfs_insert131,3858
static void romfs_remove(romfs_mount *mount)romfs_remove137,3973
static romfs_mount* romfs_alloc(void)romfs_alloc149,4156
static void romfs_free(romfs_mount *mount)romfs_free165,4497
Result romfsMountFromFile(Handle fd, u32 offset, const char *name)romfsMountFromFile176,4713
Result romfsMountSelf(const char* name)romfsMountSelf233,6418
Result romfsMountFromCurrentProcess(const char *name)romfsMountFromCurrentProcess295,8328
Result romfsMountFromTitle(u64 tid, FS_MediaType mediatype, const char* name)romfsMountFromTitle311,8765
Result romfsUnmount(const char* name)romfsUnmount328,9364
static u32 calcHash(u32 parent, u16* name, u32 namelen, u32 total)calcHash358,9973
static romfs_dir* searchForDir(romfs_mount *mount, romfs_dir* parent, u16* name, u32 namelen)searchForDir370,10201
static romfs_file* searchForFile(romfs_mount *mount, romfs_dir* parent, u16* name, u32 namelen)searchForFile387,10791
static int navigateToDir(romfs_mount *mount, romfs_dir** ppDir, const char** pPath, bool isDir)navigateToDir404,11394
static ino_t dir_inode(romfs_mount *mount, romfs_dir *dir)dir_inode467,12607
static off_t dir_size(romfs_dir *dir)dir_size472,12724
static nlink_t dir_nlink(romfs_mount *mount, romfs_dir *dir)dir_nlink477,12815
static ino_t file_inode(romfs_mount *mount, romfs_file *file)file_inode500,13244
static void fill_dir(struct stat *st, romfs_mount *mount, romfs_dir *dir)fill_dir505,13399
static void fill_file(struct stat *st, romfs_mount *mount, romfs_file *file)fill_file517,13789
int romfs_open(struct _reent *r, void *fileStruct, const char *path, int flags, int mode)romfs_open531,14254
int romfs_close(struct _reent *r, void *fd)romfs_close582,15294
ssize_t romfs_read(struct _reent *r, void *fd, char *ptr, size_t len)romfs_read587,15354
off_t romfs_seek(struct _reent *r, void *fd, off_t pos, int dir)romfs_seek612,15887
int romfs_fstat(struct _reent *r, void *fd, struct stat *st)romfs_fstat655,16519
int romfs_stat(struct _reent *r, const char *path, struct stat *st)romfs_stat662,16689
int romfs_chdir(struct _reent *r, const char *path)romfs_chdir706,17513
DIR_ITER* romfs_diropen(struct _reent *r, DIR_ITER *dirState, const char *path)romfs_diropen718,17773
int romfs_dirreset(struct _reent *r, DIR_ITER *dirState)romfs_dirreset736,18234
int romfs_dirnext(struct _reent *r, DIR_ITER *dirState, char *filename, struct stat *filestat)romfs_dirnext747,18474
int romfs_dirclose(struct _reent *r, DIR_ITER *dirState)romfs_dirclose844,20704

source/console.c,1525
static u16 colorTable[] = {colorTable11,205
PrintConsole defaultConsole =defaultConsole40,1204
PrintConsole currentCopy;currentCopy65,1697
PrintConsole* currentConsole = &currentCopy;currentConsole67,1724
PrintConsole* consoleGetDefault(void){return &defaultConsole;}consoleGetDefault69,1770
static void consoleCls(char mode) {consoleCls75,1978
static void consoleClearLine(char mode) {consoleClearLine127,3231
static inline void consolePosition(int x, int y) {consolePosition182,4185
ssize_t con_write(struct _reent *r,void *fd,const char *ptr, size_t len) {con_write206,4795
static const devoptab_t dotab_stdout = {dotab_stdout482,12351
static ssize_t debug_write(struct _reent *r, void *fd, const char *ptr, size_t len) {debug_write494,12538
static const devoptab_t dotab_svc = {dotab_svc500,12756
static const devoptab_t dotab_null = {dotab_null512,12859
PrintConsole* consoleInit(gfxScreen_t screen, PrintConsole* console) {consoleInit524,13040
void consoleDebugInit(debugDevice device){consoleDebugInit569,14089
PrintConsole *consoleSelect(PrintConsole* console){consoleSelect592,14639
void consoleSetFont(PrintConsole* console, ConsoleFont* font){consoleSetFont600,14939
static void newRow() {newRow610,15240
void consoleDrawChar(int c) {consoleDrawChar636,15986
void consolePrintChar(int c) {consolePrintChar700,17909
void consoleClear(void) {consoleClear756,19382
void consoleSetWindow(PrintConsole* console, int x, int y, int width, int height){consoleSetWindow762,19600

source/thread.c,901
struct Thread_tagThread_tag11,198
	Handle handle;handle13,218
	ThreadFunc ep;ep14,234
	void* arg;arg15,250
	int rc;rc16,262
	bool detached, finished;detached17,271
	bool detached, finished;finished17,271
	struct _reent reent;reent18,297
	void* stacktop;stacktop19,319
static void __panic(void)__panic22,340
static void _thread_begin(void* arg)_thread_begin28,410
Thread threadCreate(ThreadFunc entrypoint, void* arg, size_t stack_size, int prio, int core_id, threadCreate41,733
Handle threadGetHandle(Thread thread)threadGetHandle86,2030
int threadGetExitCode(Thread thread)threadGetExitCode92,2144
void threadFree(Thread thread)threadFree98,2251
Result threadJoin(Thread thread, u64 timeout_ns)threadJoin105,2378
void threadDetach(Thread thread)threadDetach111,2536
Thread threadGetCurrent(void)threadGetCurrent124,2714
void threadExit(int rc)threadExit132,2857

source/util/decompress/decompress.c,2778
#define BUFFERSIZE BUFFERSIZE12,214
typedef struct buffer_tbuffer_t15,261
  uint8_t *data; ///< Pointer to bufferdata17,287
  size_t  limit; ///< Max buffer sizelimit18,327
  size_t  size;  ///< Current buffer sizesize19,365
  size_t  pos;   ///< Buffer positionpos20,407
} buffer_t;buffer_t21,445
{__anon5892ed7c010825,500
  const decompressIOVec *iov; //!< I/O vectoriov26,502
  size_t                cnt;  //!< Number of bufferscnt27,548
  size_t                num;  //!< Current buffer numbernum28,601
  size_t                pos;  //!< Current buffer positionpos29,658
} iov_iter;iov_iter30,717
buffer_memory(buffer_t *buffer, const void *data, size_t size)buffer_memory38,931
buffer_static(buffer_t *buffer, const void *data, size_t size)buffer_static52,1293
buffer_dynamic(buffer_t *buffer, size_t size)buffer_dynamic66,1658
buffer_destroy(buffer_t *buffer)buffer_destroy83,1977
buffer_read(buffer_t *buffer, void *dest, size_t size,buffer_read97,2344
buffer_get(buffer_t *buffer, uint8_t *dest, decompressCallback callback,buffer_get143,3489
iov_begin(const decompressIOVec *iov, size_t iovcnt)iov_begin163,4010
iov_size(const decompressIOVec *iov, size_t iovcnt)iov_size180,4316
iov_addr(const iov_iter *it)iov_addr198,4685
iov_increment(iov_iter *it)iov_increment210,4946
iov_add(iov_iter *it, size_t size)iov_add230,5309
iov_sub(iov_iter *it, size_t size)iov_sub257,5877
iov_read(buffer_t *buffer, iov_iter *out, size_t size,iov_read277,6197
iov_memmove(iov_iter *out, iov_iter *in, size_t size)iov_memmove300,6680
iov_memset(iov_iter *out, char val, size_t size)iov_memset332,7374
decompress_lzss(buffer_t *buffer, const decompressIOVec *iov, size_t iovcnt,decompress_lzss360,8061
decompress_lz11(buffer_t *buffer, const decompressIOVec *iov, size_t iovcnt,decompress_lz11430,9773
decompress_huff(const size_t bits, buffer_t *buffer, const decompressIOVec *iov,decompress_huff527,12530
decompress_rle(buffer_t *buffer, const decompressIOVec *iov, size_t iovcnt,decompress_rle646,15666
decompressCallback_FD(void *userdata, void *buffer, size_t size)decompressCallback_FD696,16741
decompressCallback_Stdio(void *userdata, void *buffer, size_t size)decompressCallback_Stdio703,16880
decompressHeader(decompressType *type, size_t *size,decompressHeader710,17028
decompressV(const decompressIOVec *iov, size_t iovcnt,decompressV749,17858
decompressV_LZSS(const decompressIOVec *iov, size_t iovcnt,decompressV_LZSS816,19469
decompressV_LZ11(const decompressIOVec *iov, size_t iovcnt,decompressV_LZ11834,19946
decompressV_Huff(size_t bits, const decompressIOVec *iov, size_t iovcnt,decompressV_Huff852,20423
decompressV_RLE(const decompressIOVec *iov, size_t iovcnt,decompressV_RLE870,20919

source/util/rbtree/rbtree_size.c,51
rbtree_size(const rbtree_t *tree)rbtree_size4,37

source/util/rbtree/rbtree_iterator.c,190
do_iterate(const rbtree_node_t *node,do_iterate5,88
rbtree_node_next(const rbtree_node_t *node)rbtree_node_next32,567
rbtree_node_prev(const rbtree_node_t *node)rbtree_node_prev38,665

source/util/rbtree/rbtree_remove.c,110
recolor(rbtree_t      *tree,recolor5,71
rbtree_remove(rbtree_t                 *tree,rbtree_remove59,1168

source/util/rbtree/rbtree_init.c,61
rbtree_init(rbtree_t                 *tree,rbtree_init4,35

source/util/rbtree/rbtree_clear.c,63
rbtree_clear(rbtree_t                 *tree,rbtree_clear5,64

source/util/rbtree/rbtree_find.c,56
rbtree_find(const rbtree_t      *tree,rbtree_find5,74

source/util/rbtree/rbtree_insert.c,172
do_insert(rbtree_t      *tree,do_insert5,81
rbtree_insert(rbtree_t      *tree,rbtree_insert85,1548
rbtree_insert_multi(rbtree_t      *tree,rbtree_insert_multi92,1663

source/util/rbtree/rbtree_rotate.c,54
rbtree_rotate(rbtree_t      *tree,rbtree_rotate5,64

source/util/rbtree/rbtree_empty.c,53
rbtree_empty(const rbtree_t *tree)rbtree_empty4,34

source/util/rbtree/rbtree_minmax.c,149
do_minmax(const rbtree_t *tree,do_minmax5,88
rbtree_min(const rbtree_t *tree)rbtree_min20,323
rbtree_max(const rbtree_t *tree)rbtree_max30,448

source/util/rbtree/rbtree_internal.h,576
#define LEFT LEFT3,14
#define RIGHT RIGHT4,30
typedef enum rbtree_colorrbtree_color6,47
  RED   = 0,RED8,75
  BLACK = 1,BLACK9,88
} rbtree_color_t;rbtree_color_t10,101
#define COLOR_MASK COLOR_MASK12,120
set_black(rbtree_node_t *node)set_black15,172
set_red(rbtree_node_t *node)set_red22,295
get_color(const rbtree_node_t *node)get_color29,424
is_black(const rbtree_node_t *node)is_black37,581
is_red(const rbtree_node_t *node)is_red43,675
get_parent(const rbtree_node_t *node)get_parent49,776
set_parent(rbtree_node_t       *node,set_parent55,899

source/util/utf/decode_utf8.c,49
decode_utf8(uint32_t      *out,decode_utf84,35

source/util/utf/utf16_to_utf8.c,54
utf16_to_utf8(uint8_t        *out,utf16_to_utf85,58

source/util/utf/utf32_to_utf16.c,56
utf32_to_utf16(uint16_t       *out,utf32_to_utf165,58

source/util/utf/encode_utf16.c,46
encode_utf16(uint16_t *out,encode_utf164,35

source/util/utf/utf8_to_utf16.c,53
utf8_to_utf16(uint16_t      *out,utf8_to_utf165,58

source/util/utf/encode_utf8.c,44
encode_utf8(uint8_t  *out,encode_utf84,35

source/util/utf/utf16_to_utf32.c,56
utf16_to_utf32(uint32_t       *out,utf16_to_utf325,58

source/util/utf/utf32_to_utf8.c,54
utf32_to_utf8(uint8_t        *out,utf32_to_utf85,58

source/util/utf/decode_utf16.c,52
decode_utf16(uint32_t       *out,decode_utf164,35

source/util/utf/utf8_to_utf32.c,53
utf8_to_utf32(uint32_t      *out,utf8_to_utf325,58

source/env.c,463
typedef struct {__anon129aae5f010816,553
	u32 num;num17,570
	struct {__anon129aae5f020819,581
		char name[8];name20,591
		Handle handle;handle21,607
	} services[];services22,624
} service_list_t;service_list_t23,639
static int __name_cmp(const char* a, const char* b) {__name_cmp27,687
Handle __attribute__((weak)) envGetHandle(const char* name) {envGetHandle40,854
void __attribute__((weak)) envDestroyHandles(void) {envDestroyHandles55,1201

source/archive_dev.c,3459
{__anon4b4d1d16010858,2469
  Handle fd;     /*! CTRU handle */fd59,2471
  int    flags;  /*! Flags used in open(2) */flags60,2507
  u64    offset; /*! Current file offset */offset61,2553
} archive_file_t;archive_file_t62,2597
archive_devoptab =archive_devoptab66,2658
{__anon4b4d1d16020898,3603
    bool setup;setup99,3605
    bool is_extdata;is_extdata100,3621
    s32 id;id101,3642
    devoptab_t device;device102,3654
    FS_Archive archive;archive103,3677
    char* cwd;cwd104,3701
    char name[32];name105,3716
} archive_fsdevice;archive_fsdevice106,3735
static bool archive_initialized = false;archive_initialized108,3756
static s32 archive_device_cwd;archive_device_cwd109,3797
static archive_fsdevice archive_devices[8];archive_devices110,3828
static archive_fsdevice *archiveFindDevice(const char *name)archiveFindDevice114,3890
archive_fixpath(struct _reent    *r,archive_fixpath144,4580
archive_utf16path(struct _reent    *r,archive_utf16path227,6291
static void _archiveInit(void)_archiveInit263,7010
static int _archiveMountDevice(FS_Archive       archive,_archiveMountDevice283,7562
Result archiveMount(FS_ArchiveID archiveID,archiveMount328,8658
Result archiveMountSdmc(void)archiveMountSdmc352,9362
Result archiveCommitSaveData(const char *deviceName)archiveCommitSaveData418,10851
Result _archiveUnmountDeviceStruct(archive_fsdevice *device)_archiveUnmountDeviceStruct429,11112
Result archiveUnmount(const char *deviceName)archiveUnmount453,11641
Result archiveUnmountAll(void)archiveUnmountAll463,11834
archive_open(struct _reent *r,archive_open491,12480
archive_close(struct _reent *r,archive_close601,14993
archive_write(struct _reent *r,archive_write628,15591
archive_read(struct _reent *r,archive_read686,16914
archive_seek(struct _reent *r,archive_seek728,17905
archive_fstat(struct _reent *r,archive_fstat791,19321
archive_stat(struct _reent *r,archive_stat823,20063
archive_link(struct _reent *r,archive_link867,21105
archive_unlink(struct _reent *r,archive_unlink884,21439
archive_chdir(struct _reent *r,archive_chdir912,22042
archive_rename(struct _reent *r,archive_rename947,22811
archive_mkdir(struct _reent *r,archive_mkdir1004,24274
archive_diropen(struct _reent *r,archive_diropen1048,25217
archive_dirreset(struct _reent *r,archive_dirreset1090,26208
archive_dirnext(struct _reent *r,archive_dirnext1108,26674
archive_dirclose(struct _reent *r,archive_dirclose1193,28581
archive_statvfs(struct _reent  *r,archive_statvfs1220,29201
sdmc_statvfs(struct _reent  *r,sdmc_statvfs1275,30656
archive_ftruncate(struct _reent *r,archive_ftruncate1320,31803
archive_fsync(struct _reent *r,archive_fsync1354,32481
archive_chmod(struct _reent *r,archive_chmod1380,33003
archive_fchmod(struct _reent *r,archive_fchmod1398,33390
archive_rmdir(struct _reent *r,archive_rmdir1415,33730
archive_getmtime(const char *name,archive_getmtime1442,34238
{__anon4b4d1d1603081475,34982
  Result fs_error; //!< Error from FS servicefs_error1476,34984
  int    error;    //!< POSIX errnoerror1477,35030
} error_map_t;error_map_t1478,35066
static const error_map_t error_table[] =error_table1481,35101
static const size_t num_errors = sizeof(error_table)/sizeof(error_table[0]);num_errors1491,35376
error_cmp(const void *p1, const void *p2)error_cmp1503,35699
archive_translate_error(Result error)archive_translate_error1522,36105

source/applets/swkbd.c,1615
static char* swkbdSharedMem;swkbdSharedMem14,291
static Handle swkbdSharedMemHandle;swkbdSharedMemHandle15,320
void swkbdInit(SwkbdState* swkbd, SwkbdType type, int numButtons, int maxTextLength)swkbdInit17,357
static void swkbdConvertToUTF8(char* out, const u16* in, int max)swkbdConvertToUTF835,935
static void swkbdConvertToUTF16(u16* out, const char* in, int max)swkbdConvertToUTF1653,1175
static const u16 swkbdFeatures[] =swkbdFeatures71,1422
void swkbdSetFeatures(SwkbdState* swkbd, u32 features)swkbdSetFeatures85,1837
void swkbdSetHintText(SwkbdState* swkbd, const char* text)swkbdSetHintText92,2031
void swkbdSetButton(SwkbdState* swkbd, SwkbdButton button, const char* text, bool submit)swkbdSetButton97,2166
void swkbdSetInitialText(SwkbdState* swkbd, const char* text)swkbdSetInitialText103,2390
void swkbdSetDictWord(SwkbdDictWord* word, const char* reading, const char* text)swkbdSetDictWord108,2492
void swkbdSetDictionary(SwkbdState* swkbd, const SwkbdDictWord* dict, int wordCount)swkbdSetDictionary116,2755
void swkbdSetStatusData(SwkbdState* swkbd, SwkbdStatusData* data, bool in, bool out)swkbdSetStatusData122,2920
void swkbdSetLearningData(SwkbdState* swkbd, SwkbdLearningData* data, bool in, bool out)swkbdSetLearningData130,3200
void swkbdSetFilterCallback(SwkbdState* swkbd, SwkbdCallbackFn callback, void* user)swkbdSetFilterCallback138,3488
static void swkbdMessageCallback(void* user, NS_APPID sender, void* msg, size_t msgsize)swkbdMessageCallback144,3667
SwkbdButton swkbdInputText(SwkbdState* swkbd, char* buf, size_t bufsize)swkbdInputText170,4626

source/applets/error.c,353
void errorInit(errorConf* err, errorType type, CFG_Language lang)errorInit10,212
void errorCode(errorConf* err, int error)errorCode23,532
static void errorConvertToUTF16(u16* out, const char* in, size_t max)errorConvertToUTF1628,604
void errorText(errorConf *err, const char* text)errorText46,857
void errorDisp(errorConf* err)errorDisp51,956

source/applets/miiselector.c,1561
void miiSelectorInit(MiiSelectorConf *conf)miiSelectorInit10,177
void miiSelectorLaunch(const MiiSelectorConf *conf, MiiSelectorReturn *returnbuf)miiSelectorLaunch21,436
	union {__anonaf1a867e010a23,520
		MiiSelectorConf config;config24,529
		MiiSelectorReturn ret;ret25,555
static void miiSelectorConvertToUTF8(char* out, const u16* in, int max)miiSelectorConvertToUTF836,840
static void miiSelectorConvertToUTF16(u16* out, const char* in, int max)miiSelectorConvertToUTF1654,1086
void miiSelectorSetTitle(MiiSelectorConf *conf, const char* text)miiSelectorSetTitle72,1339
void miiSelectorSetOptions(MiiSelectorConf *conf, u32 options)miiSelectorSetOptions77,1480
void miiSelectorWhitelistGuestMii(MiiSelectorConf *conf, u32 index)miiSelectorWhitelistGuestMii90,1919
void miiSelectorBlacklistGuestMii(MiiSelectorConf *conf, u32 index)miiSelectorBlacklistGuestMii99,2213
void miiSelectorWhitelistUserMii(MiiSelectorConf *conf, u32 index)miiSelectorWhitelistUserMii108,2507
void miiSelectorBlacklistUserMii(MiiSelectorConf *conf, u32 index)miiSelectorBlacklistUserMii117,2785
void miiSelectorReturnGetName(const MiiSelectorReturn *returnbuf, char* out, size_t max_size)miiSelectorReturnGetName126,3063
void miiSelectorReturnGetAuthor(const MiiSelectorReturn *returnbuf, char* out, size_t max_size)miiSelectorReturnGetAuthor142,3427
static u16 crc16_ccitt(void const *buf, size_t len, uint32_t starting_val)crc16_ccitt153,3671
bool miiSelectorChecksumIsValid(const MiiSelectorReturn *returnbuf)miiSelectorChecksumIsValid175,4130

source/gfx.c,1953
static u8* gfxTopFramebuffers[2];gfxTopFramebuffers7,144
static u8* gfxBottomFramebuffers[2];gfxBottomFramebuffers8,178
static u32 gfxTopFramebufferMaxSize;gfxTopFramebufferMaxSize9,215
static u32 gfxBottomFramebufferMaxSize;gfxBottomFramebufferMaxSize10,252
static GSPGPU_FramebufferFormat gfxFramebufferFormats[2];gfxFramebufferFormats11,292
static enum {__anon12ba84db010313,351
	MODE_2D   = 0,MODE_2D14,365
	MODE_3D   = 1,MODE_3D15,381
	MODE_WIDE = 2,MODE_WIDE16,397
} gfxTopMode;gfxTopMode17,413
static bool gfxIsVram;gfxIsVram18,427
static u8 gfxCurBuf[2];gfxCurBuf19,450
static u8 gfxIsDoubleBuf[2];gfxIsDoubleBuf20,474
static void (*screenFree)(void *);screenFree22,504
static void *(*screenAlloc)(size_t);screenAlloc23,539
void gfxSet3D(bool enable)gfxSet3D25,577
bool gfxIs3D(void)gfxIs3D30,651
void gfxSetWide(bool enable)gfxSetWide35,706
bool gfxIsWide(void)gfxIsWide40,784
void gfxSetScreenFormat(gfxScreen_t screen, GSPGPU_FramebufferFormat format)gfxSetScreenFormat45,843
GSPGPU_FramebufferFormat gfxGetScreenFormat(gfxScreen_t screen)gfxGetScreenFormat76,1610
void gfxSetDoubleBuffering(gfxScreen_t screen, bool enable)gfxSetDoubleBuffering81,1718
static void gfxPresentFramebuffer(gfxScreen_t screen, u8 id, bool hasStereo)gfxPresentFramebuffer86,1877
void gfxInit(GSPGPU_FramebufferFormat topFormat, GSPGPU_FramebufferFormat bottomFormat, bool vragfxInit125,2619
void gfxInitDefault(void)gfxInitDefault160,3410
void gfxExit(void)gfxExit165,3484
u8* gfxGetFramebuffer(gfxScreen_t screen, gfx3dSide_t side, u16* width, u16* height)gfxGetFramebuffer192,4074
void gfxFlushBuffers(void)gfxFlushBuffers231,4814
void gfxScreenSwapBuffers(gfxScreen_t scr, bool hasStereo)gfxScreenSwapBuffers244,5443
void gfxConfigScreen(gfxScreen_t scr, bool immediate)gfxConfigScreen250,5603
void gfxSwapBuffers(void)gfxSwapBuffers255,5696
void gfxSwapBuffersGpu(void)gfxSwapBuffersGpu261,5806

source/allocator/vram.cpp,395
static MemPool sVramPool;sVramPool12,168
static bool vramInit()vramInit14,195
void* vramMemAlign(size_t size, size_t alignment)vramMemAlign26,409
void* vramAlloc(size_t size)vramAlloc61,1097
void* vramRealloc(void* mem, size_t size)vramRealloc66,1165
size_t vramGetSize(void* mem)vramGetSize72,1235
void vramFree(void* mem)vramFree78,1334
u32 vramSpaceFree()vramSpaceFree90,1502

source/allocator/mem_pool.h,692
struct MemChunkMemChunk5,57
	u8* addr;addr7,75
	u32 size;size8,86
struct MemBlockMemBlock11,101
	MemBlock *prev, *next;prev13,119
	MemBlock *prev, *next;next13,119
	u8* base;base14,143
	u32 size;size15,154
	static MemBlock* Create(u8* base, u32 size)Create17,166
struct MemPoolMemPool29,385
	MemBlock *first, *last;first31,402
	MemBlock *first, *last;last31,402
	bool Ready() { return first != nullptr; }Ready33,428
	void AddBlock(MemBlock* blk)AddBlock35,472
	void DelBlock(MemBlock* b)DelBlock43,600
	void InsertBefore(MemBlock* b, MemBlock* p)InsertBefore52,795
	void InsertAfter(MemBlock* b, MemBlock* n)InsertAfter61,967
	void Destroy()Destroy76,1303

source/allocator/linear.cpp,427
static MemPool sLinearPool;sLinearPool14,217
static bool linearInit()linearInit16,246
void* linearMemAlign(size_t size, size_t alignment)linearMemAlign28,480
void* linearAlloc(size_t size)linearAlloc63,1178
void* linearRealloc(void* mem, size_t size)linearRealloc68,1250
size_t linearGetSize(void* mem)linearGetSize74,1322
void linearFree(void* mem)linearFree80,1423
u32 linearSpaceFree()linearSpaceFree92,1595

source/allocator/mappable.c,436
static u32 minAddr, maxAddr, currentAddr;minAddr5,82
static u32 minAddr, maxAddr, currentAddr;maxAddr5,82
static u32 minAddr, maxAddr, currentAddr;currentAddr5,82
void mappableInit(u32 addrMin, u32 addrMax)mappableInit7,125
static u32 mappableFindAddressWithin(u32 start, u32 end, u32 size)mappableFindAddressWithin14,238
void* mappableAlloc(size_t size)mappableAlloc38,735
void mappableFree(void* mem)mappableFree56,1155

source/allocator/addrmap.h,551
static rbtree_t sAddrMap;sAddrMap3,14
struct addrMapNodeaddrMapNode5,41
	rbtree_node node;node7,62
	MemChunk chunk;chunk8,81
#define getAddrMapNode(getAddrMapNode11,102
static int addrMapNodeComparator(const rbtree_node_t* _lhs, const rbtree_node_t* _rhs)addrMapNodeComparator13,165
static void addrMapNodeDestructor(rbtree_node_t* a)addrMapNodeDestructor24,417
static addrMapNode* getNode(void* addr)getNode29,500
static addrMapNode* newNode(const MemChunk& chunk)newNode37,672
static void delNode(addrMapNode* node)delNode45,836

source/allocator/mem_pool.cpp,256
void MemPool::CoalesceRight(MemBlock* b)CoalesceRight19,289
bool MemPool::Allocate(MemChunk& chunk, u32 size, int align)Allocate33,539
void MemPool::Deallocate(const MemChunk& chunk)Deallocate97,1924
u32 MemPool::GetFreeSpace()GetFreeSpace148,3012

source/internal.h,533
#define THREADVARS_MAGIC THREADVARS_MAGIC8,129
#define FS_OVERRIDE_MAGIC FS_OVERRIDE_MAGIC9,174
{__anon6e761558010813,275
	u32 magic;magic15,336
	Thread thread_ptr;thread_ptr18,395
	struct _reent* reent;reent21,458
	void* tls_tp; // !! Keep offset in sync inside __aeabi_read_tp !!tls_tp24,532
	u32    fs_magic;fs_magic27,624
	Handle fs_session;fs_session28,642
	bool srv_blocking_policy;srv_blocking_policy31,742
} ThreadVars;ThreadVars32,769
static inline ThreadVars* getThreadVars(void)getThreadVars34,784

source/gdbhio.c,6253
#define GDBHIO_O_RDONLY GDBHIO_O_RDONLY12,151
#define GDBHIO_O_WRONLY GDBHIO_O_WRONLY13,189
#define GDBHIO_O_RDWR GDBHIO_O_RDWR14,227
#define GDBHIO_O_ACCMODE GDBHIO_O_ACCMODE15,265
#define GDBHIO_O_APPEND GDBHIO_O_APPEND16,303
#define GDBHIO_O_CREAT GDBHIO_O_CREAT17,341
#define GDBHIO_O_TRUNC GDBHIO_O_TRUNC18,379
#define GDBHIO_O_EXCL GDBHIO_O_EXCL19,417
#define GDBHIO_O_SUPPORTED GDBHIO_O_SUPPORTED20,455
#define GDBHIO_S_IFREG GDBHIO_S_IFREG25,697
#define GDBHIO_S_IFDIR GDBHIO_S_IFDIR26,735
#define GDBHIO_S_IFCHR GDBHIO_S_IFCHR27,773
#define GDBHIO_S_IRUSR GDBHIO_S_IRUSR28,811
#define GDBHIO_S_IWUSR GDBHIO_S_IWUSR29,849
#define GDBHIO_S_IXUSR GDBHIO_S_IXUSR30,887
#define GDBHIO_S_IRWXU GDBHIO_S_IRWXU31,925
#define GDBHIO_S_IRGRP GDBHIO_S_IRGRP32,1009
#define GDBHIO_S_IWGRP GDBHIO_S_IWGRP33,1047
#define GDBHIO_S_IXGRP GDBHIO_S_IXGRP34,1085
#define GDBHIO_S_IRWXG GDBHIO_S_IRWXG35,1123
#define GDBHIO_S_IROTH GDBHIO_S_IROTH36,1208
#define GDBHIO_S_IWOTH GDBHIO_S_IWOTH37,1246
#define GDBHIO_S_IXOTH GDBHIO_S_IXOTH38,1284
#define GDBHIO_S_IRWXO GDBHIO_S_IRWXO39,1322
#define GDBHIO_S_SUPPORTED GDBHIO_S_SUPPORTED40,1408
#define GDBHIO_SEEK_SET GDBHIO_SEEK_SET44,1601
#define GDBHIO_SEEK_CUR GDBHIO_SEEK_CUR45,1639
#define GDBHIO_SEEK_END GDBHIO_SEEK_END46,1677
#define GDBHIO_EPERM GDBHIO_EPERM48,1716
#define GDBHIO_ENOENT GDBHIO_ENOENT49,1754
#define GDBHIO_EINTR GDBHIO_EINTR50,1792
#define GDBHIO_EIO GDBHIO_EIO51,1830
#define GDBHIO_EBADF GDBHIO_EBADF52,1868
#define GDBHIO_EACCES GDBHIO_EACCES53,1906
#define GDBHIO_EFAULT GDBHIO_EFAULT54,1944
#define GDBHIO_EBUSY GDBHIO_EBUSY55,1982
#define GDBHIO_EEXIST GDBHIO_EEXIST56,2020
#define GDBHIO_ENODEV GDBHIO_ENODEV57,2058
#define GDBHIO_ENOTDIR GDBHIO_ENOTDIR58,2096
#define GDBHIO_EISDIR GDBHIO_EISDIR59,2134
#define GDBHIO_EINVAL GDBHIO_EINVAL60,2172
#define GDBHIO_ENFILE GDBHIO_ENFILE61,2210
#define GDBHIO_EMFILE GDBHIO_EMFILE62,2248
#define GDBHIO_EFBIG GDBHIO_EFBIG63,2286
#define GDBHIO_ENOSPC GDBHIO_ENOSPC64,2324
#define GDBHIO_ESPIPE GDBHIO_ESPIPE65,2362
#define GDBHIO_EROFS GDBHIO_EROFS66,2400
#define GDBHIO_ENOSYS GDBHIO_ENOSYS67,2438
#define GDBHIO_ENAMETOOLONG GDBHIO_ENAMETOOLONG68,2476
#define GDBHIO_EUNKNOWN GDBHIO_EUNKNOWN69,2514
typedef struct PackedGdbHioRequestPackedGdbHioRequest71,2553
	char magic[4]; // "GDB\x00"magic73,2590
	u32 version;version74,2619
	char functionName[16+1];functionName77,2646
	char paramFormat[8+1];paramFormat78,2672
	u64 parameters[8];parameters80,2697
	size_t stringLengths[8];stringLengths81,2717
	s64 retval;retval84,2755
	int gdbErrno;gdbErrno85,2768
	bool ctrlC;ctrlC86,2783
} PackedGdbHioRequest;PackedGdbHioRequest87,2796
static __thread bool g_gdbHioWasInterruptedByCtrlC = false;g_gdbHioWasInterruptedByCtrlC89,2820
bool gdbHioWasInterruptedByCtrlC(void)gdbHioWasInterruptedByCtrlC91,2881
static int _gdbHioImportErrno(int errnum)_gdbHioImportErrno96,2964
static int _gdbHioExportOpenFlags(int flags)_gdbHioExportOpenFlags124,3831
typedef s32 gdbhio_mode_t;gdbhio_mode_t151,4392
static mode_t _gdbHioImportFileMode(gdbhio_mode_t gdbMode)_gdbHioImportFileMode153,4420
static int _gdbHioExportFileMode(mode_t mode)_gdbHioExportFileMode174,5139
static int _gdbExportSeekFlag(int flag)_gdbExportSeekFlag196,5855
typedef u32 gdbhio_time_t;gdbhio_time_t206,6151
struct PACKED ALIGN(4) gdbhio_stat {gdbhio_stat208,6179
	u32  gst_dev;               /* device */gst_dev209,6216
	u32  gst_ino;               /* inode */gst_ino210,6258
	gdbhio_mode_t gst_mode;     /* protection */gst_mode211,6299
	u32 gst_nlink;              /* number of hard links */gst_nlink212,6345
	u32 gst_uid;                /* user ID of owner */gst_uid213,6401
	u32 gst_gid;                /* group ID of owner */gst_gid214,6453
	u32 gst_rdev;               /* device type (if inode device) */gst_rdev215,6506
	u64 gst_size;               /* total size, in bytes */gst_size216,6571
	u64 gst_blksize;            /* blocksize for filesystem I/O */gst_blksize217,6627
	u64 gst_blocks;             /* number of blocks allocated */gst_blocks218,6691
	gdbhio_time_t gst_atime;    /* time of last access */gst_atime219,6753
	gdbhio_time_t gst_mtime;    /* time of last modification */gst_mtime220,6808
	gdbhio_time_t gst_ctime;    /* time of last change */gst_ctime221,6869
static inline u32 _gdbHioImportScalar32(u32 v)_gdbHioImportScalar32224,6928
static inline u64 _gdbHioImportScalar64(u64 v)_gdbHioImportScalar64229,7010
static void _gdbHioImportStructStat(struct stat *out, const struct gdbhio_stat *in)_gdbHioImportStructStat234,7092
struct gdbhio_timeval {gdbhio_timeval252,7969
	gdbhio_time_t tv_sec;  /* second */tv_sec253,7993
	u64   tv_usec; /* microsecond */tv_usec254,8030
static void _gdbHioImportStructTimeval(struct timeval *out, const struct gdbhio_timeval *in)_gdbHioImportStructTimeval257,8068
static void _gdbHioSetErrno(int gdbErrno, bool ctrlC)_gdbHioSetErrno263,8268
static s64 _gdbHioSendSyncRequest64V(const char *name, const char *paramFormat, va_list args)_gdbHioSendSyncRequest64V271,8432
static s64 _gdbHioSendSyncRequest64(const char *name, const char *paramFormat, ...)_gdbHioSendSyncRequest64314,9439
static int _gdbHioSendSyncRequest(const char *name, const char *paramFormat, ...)_gdbHioSendSyncRequest324,9674
int gdbHioOpen(const char *pathname, int flags, mode_t mode)gdbHioOpen334,9912
int gdbHioClose(int fd)gdbHioClose339,10095
int gdbHioRead(int fd, void *buf, unsigned int count)gdbHioRead344,10174
int gdbHioWrite(int fd, const void *buf, unsigned int count)gdbHioWrite349,10296
off_t gdbHioLseek(int fd, off_t offset, int flag)gdbHioLseek354,10426
int gdbHioRename(const char *oldpath, const char *newpath)gdbHioRename359,10569
int gdbHioUnlink(const char *pathname)gdbHioUnlink364,10699
int gdbHioStat(const char *pathname, struct stat *st)gdbHioStat369,10800
int gdbHioFstat(int fd, struct stat *st)gdbHioFstat377,10998
int gdbHioGettimeofday(struct timeval *tv, void *tz)gdbHioGettimeofday385,11178
int gdbHioIsatty(int fd)gdbHioIsatty394,11418
int gdbHioSystem(const char *command)gdbHioSystem400,11544

source/os.c,812
static inline double u64_to_double(u64 value) {u64_to_double13,302
__attribute__((weak)) bool __ctru_speedup = false;__ctru_speedup17,419
u32 osConvertVirtToPhys(const void* addr) {osConvertVirtToPhys20,555
#define CONVERT_REGION(CONVERT_REGION23,707
void* osConvertOldLINEARMemToNew(const void* addr) {osConvertOldLINEARMemToNew39,1157
osTimeRef_s osGetTimeRef(void) {osGetTimeRef50,1657
u64 osGetTime(void) {osGetTime67,2078
int __libctru_gtod(struct _reent *ptr, struct timeval *tp, struct timezone *tz) {__libctru_gtod92,3314
double osTickCounterRead(const TickCounter* cnt) {osTickCounterRead113,3967
const char* osStrError(Result error) {osStrError119,4247
void __ctru_speedup_config(void)__ctru_speedup_config151,5001
void osSetSpeedupEnable(bool enable)osSetSpeedupEnable160,5149

source/srv.c,1804
static Handle srvHandle;srvHandle19,295
static int srvRefCount;srvRefCount20,320
static bool srvGetBlockingPolicy(void)srvGetBlockingPolicy22,345
Result srvInit(void)srvInit28,490
void srvExit(void)srvExit46,948
void srvSetBlockingPolicy(bool nonBlocking)srvSetBlockingPolicy54,1081
Handle *srvGetSessionHandle(void)srvGetSessionHandle60,1205
Result srvGetServiceHandle(Handle* out, const char* name)srvGetServiceHandle65,1264
Result srvRegisterClient(void)srvRegisterClient79,1597
Result srvEnableNotification(Handle* semaphoreOut)srvEnableNotification92,1859
Result srvRegisterService(Handle* out, const char* name, int maxSessions)srvRegisterService106,2138
Result srvUnregisterService(const char* name)srvUnregisterService123,2528
Result srvGetServiceHandleDirect(Handle* out, const char* name)srvGetServiceHandleDirect137,2836
Result srvRegisterPort(const char* name, Handle clientHandle)srvRegisterPort154,3275
Result srvUnregisterPort(const char* name)srvUnregisterPort170,3666
Result srvGetPort(Handle* out, const char* name)srvGetPort184,3971
Result srvWaitForPortRegistered(const char* name)srvWaitForPortRegistered201,4328
Result srvSubscribe(u32 notificationId)srvSubscribe215,4657
Result srvUnsubscribe(u32 notificationId)srvUnsubscribe228,4919
Result srvReceiveNotification(u32* notificationIdOut)srvReceiveNotification241,5183
Result srvPublishToSubscriber(u32 notificationId, u32 flags)srvPublishToSubscriber255,5486
Result srvPublishAndGetSubscriber(u32* processIdCountOut, u32* processIdsOut, u32 notificationIdsrvPublishAndGetSubscriber269,5789
Result srvIsServiceRegistered(bool* registeredOut, const char* name)srvIsServiceRegistered285,6244
Result srvIsPortRegistered(bool* registeredOut, const char* name)srvIsPortRegistered301,6630

source/svc.s,7345
.macro SVC_BEGIN nameSVC_BEGIN6,40
.macro SVC_ENDSVC_END10,91
SVC_BEGIN svcControlMemorySVC_BEGIN14,127
SVC_ENDSVC_END23,288
SVC_BEGIN svcQueryMemorySVC_BEGIN25,297
SVC_ENDSVC_END38,518
SVC_BEGIN svcExitProcessSVC_BEGIN40,527
SVC_ENDSVC_END43,570
SVC_BEGIN svcGetProcessAffinityMaskSVC_BEGIN45,579
SVC_ENDSVC_END48,632
SVC_BEGIN svcSetProcessAffinityMaskSVC_BEGIN50,641
SVC_ENDSVC_END53,694
SVC_BEGIN svcGetProcessIdealProcessorSVC_BEGIN55,703
SVC_ENDSVC_END61,812
SVC_BEGIN svcSetProcessIdealProcessorSVC_BEGIN63,821
SVC_ENDSVC_END66,876
SVC_BEGIN svcCreateThreadSVC_BEGIN68,885
SVC_ENDSVC_END77,1045
SVC_BEGIN svcExitThreadSVC_BEGIN79,1054
SVC_ENDSVC_END82,1096
SVC_BEGIN svcSleepThreadSVC_BEGIN84,1105
SVC_ENDSVC_END87,1148
SVC_BEGIN svcGetThreadPrioritySVC_BEGIN89,1157
SVC_ENDSVC_END95,1260
SVC_BEGIN svcSetThreadPrioritySVC_BEGIN97,1269
SVC_ENDSVC_END100,1318
SVC_BEGIN svcGetThreadAffinityMaskSVC_BEGIN102,1327
SVC_ENDSVC_END105,1380
SVC_BEGIN svcSetThreadAffinityMaskSVC_BEGIN107,1389
SVC_ENDSVC_END110,1442
SVC_BEGIN svcGetThreadIdealProcessorSVC_BEGIN112,1451
SVC_ENDSVC_END118,1560
SVC_BEGIN svcSetThreadIdealProcessorSVC_BEGIN120,1569
SVC_ENDSVC_END123,1624
SVC_BEGIN svcGetProcessorIDSVC_BEGIN125,1633
SVC_ENDSVC_END128,1679
SVC_BEGIN svcRunSVC_BEGIN130,1688
SVC_ENDSVC_END140,1855
SVC_BEGIN svcCreateMutexSVC_BEGIN142,1864
SVC_ENDSVC_END148,1959
SVC_BEGIN svcReleaseMutexSVC_BEGIN150,1968
SVC_ENDSVC_END153,2012
SVC_BEGIN svcCreateSemaphoreSVC_BEGIN155,2021
SVC_ENDSVC_END161,2103
SVC_BEGIN svcReleaseSemaphoreSVC_BEGIN163,2112
SVC_ENDSVC_END169,2199
SVC_BEGIN svcCreateEventSVC_BEGIN171,2208
SVC_ENDSVC_END177,2303
SVC_BEGIN svcSignalEventSVC_BEGIN179,2312
SVC_ENDSVC_END182,2355
SVC_BEGIN svcClearEventSVC_BEGIN184,2364
SVC_ENDSVC_END187,2406
SVC_BEGIN svcCreateTimerSVC_BEGIN189,2415
SVC_ENDSVC_END195,2510
SVC_BEGIN svcSetTimerSVC_BEGIN197,2519
SVC_ENDSVC_END204,2633
SVC_BEGIN svcCancelTimerSVC_BEGIN206,2642
SVC_ENDSVC_END209,2685
SVC_BEGIN svcClearTimerSVC_BEGIN211,2694
SVC_ENDSVC_END214,2736
SVC_BEGIN svcCreateMemoryBlockSVC_BEGIN216,2745
SVC_ENDSVC_END223,2864
SVC_BEGIN svcMapMemoryBlockSVC_BEGIN225,2873
SVC_ENDSVC_END228,2919
SVC_BEGIN svcUnmapMemoryBlockSVC_BEGIN230,2928
SVC_ENDSVC_END233,2976
SVC_BEGIN svcCreateAddressArbiterSVC_BEGIN235,2985
SVC_ENDSVC_END241,3072
SVC_BEGIN svcArbitrateAddressSVC_BEGIN243,3081
SVC_ENDSVC_END250,3195
SVC_BEGIN svcArbitrateAddressNoTimeoutSVC_BEGIN252,3204
SVC_ENDSVC_END255,3261
SVC_BEGIN svcCloseHandleSVC_BEGIN257,3270
SVC_ENDSVC_END260,3313
SVC_BEGIN svcWaitSynchronizationSVC_BEGIN262,3322
SVC_ENDSVC_END265,3373
SVC_BEGIN svcWaitSynchronizationNSVC_BEGIN267,3382
SVC_ENDSVC_END278,3580
SVC_BEGIN svcDuplicateHandleSVC_BEGIN280,3589
SVC_ENDSVC_END286,3690
SVC_BEGIN svcGetSystemTickSVC_BEGIN288,3699
SVC_ENDSVC_END291,3744
SVC_BEGIN svcGetHandleInfoSVC_BEGIN293,3753
SVC_ENDSVC_END300,3868
SVC_BEGIN svcGetSystemInfoSVC_BEGIN302,3877
SVC_ENDSVC_END309,3993
SVC_BEGIN svcGetProcessInfoSVC_BEGIN311,4002
SVC_ENDSVC_END318,4119
SVC_BEGIN svcGetThreadInfoSVC_BEGIN320,4128
SVC_ENDSVC_END327,4244
SVC_BEGIN svcConnectToPortSVC_BEGIN329,4253
SVC_ENDSVC_END335,4352
SVC_BEGIN svcSendSyncRequestSVC_BEGIN337,4361
SVC_ENDSVC_END340,4408
SVC_BEGIN svcOpenProcessSVC_BEGIN342,4417
SVC_ENDSVC_END348,4495
SVC_BEGIN svcOpenThreadSVC_BEGIN350,4504
SVC_ENDSVC_END356,4581
SVC_BEGIN svcGetProcessIdSVC_BEGIN358,4590
SVC_ENDSVC_END364,4688
SVC_BEGIN svcGetProcessIdOfThreadSVC_BEGIN366,4697
SVC_ENDSVC_END372,4803
SVC_BEGIN svcGetThreadIdSVC_BEGIN374,4812
SVC_ENDSVC_END380,4909
SVC_BEGIN svcGetResourceLimitSVC_BEGIN382,4918
SVC_ENDSVC_END388,5020
SVC_BEGIN svcGetResourceLimitLimitValuesSVC_BEGIN390,5029
SVC_ENDSVC_END393,5088
SVC_BEGIN svcGetResourceLimitCurrentValuesSVC_BEGIN395,5097
SVC_ENDSVC_END398,5158
SVC_BEGIN svcBreakSVC_BEGIN400,5167
SVC_ENDSVC_END403,5204
SVC_BEGIN svcOutputDebugStringSVC_BEGIN405,5213
SVC_ENDSVC_END408,5262
SVC_BEGIN svcControlPerformanceCounterSVC_BEGIN410,5271
SVC_ENDSVC_END418,5420
SVC_BEGIN svcCreatePortSVC_BEGIN420,5429
SVC_ENDSVC_END429,5566
SVC_BEGIN svcCreateSessionToPortSVC_BEGIN431,5575
SVC_ENDSVC_END437,5660
SVC_BEGIN svcCreateSessionSVC_BEGIN439,5669
SVC_ENDSVC_END448,5809
SVC_BEGIN svcAcceptSessionSVC_BEGIN450,5818
SVC_ENDSVC_END457,5927
SVC_BEGIN svcReplyAndReceiveSVC_BEGIN459,5936
SVC_ENDSVC_END466,6047
SVC_BEGIN svcBindInterruptSVC_BEGIN468,6056
SVC_ENDSVC_END471,6100
SVC_BEGIN svcUnbindInterruptSVC_BEGIN473,6109
SVC_ENDSVC_END476,6155
SVC_BEGIN svcInvalidateProcessDataCacheSVC_BEGIN478,6164
SVC_ENDSVC_END481,6222
SVC_BEGIN svcStoreProcessDataCacheSVC_BEGIN483,6231
SVC_ENDSVC_END486,6284
SVC_BEGIN svcFlushProcessDataCacheSVC_BEGIN488,6293
SVC_ENDSVC_END491,6346
SVC_BEGIN svcStartInterProcessDmaSVC_BEGIN493,6355
SVC_ENDSVC_END502,6533
SVC_BEGIN svcStopDmaSVC_BEGIN504,6542
SVC_ENDSVC_END507,6581
SVC_BEGIN svcGetDmaStateSVC_BEGIN509,6590
SVC_ENDSVC_END515,6685
SVC_BEGIN svcRestartDmaSVC_BEGIN517,6694
SVC_ENDSVC_END523,6779
SVC_BEGIN svcSetGpuProtSVC_BEGIN525,6788
SVC_ENDSVC_END528,6830
SVC_BEGIN svcSetWifiEnabledSVC_BEGIN530,6839
SVC_ENDSVC_END533,6885
SVC_BEGIN svcDebugActiveProcessSVC_BEGIN535,6894
SVC_ENDSVC_END541,6979
SVC_BEGIN svcBreakDebugProcessSVC_BEGIN543,6988
SVC_ENDSVC_END546,7037
SVC_BEGIN svcTerminateDebugProcessSVC_BEGIN548,7046
SVC_ENDSVC_END551,7099
SVC_BEGIN svcGetProcessDebugEventSVC_BEGIN553,7108
SVC_ENDSVC_END556,7160
SVC_BEGIN svcContinueDebugEventSVC_BEGIN558,7169
SVC_ENDSVC_END561,7219
SVC_BEGIN svcGetProcessListSVC_BEGIN563,7228
SVC_ENDSVC_END569,7328
SVC_BEGIN svcGetThreadListSVC_BEGIN571,7337
SVC_ENDSVC_END577,7436
SVC_BEGIN svcGetDebugThreadContextSVC_BEGIN579,7445
SVC_ENDSVC_END582,7497
SVC_BEGIN svcSetDebugThreadContextSVC_BEGIN584,7506
SVC_ENDSVC_END587,7558
SVC_BEGIN svcQueryDebugProcessMemorySVC_BEGIN589,7567
SVC_ENDSVC_END599,7736
SVC_BEGIN svcReadProcessMemorySVC_BEGIN601,7745
SVC_ENDSVC_END604,7794
SVC_BEGIN svcWriteProcessMemorySVC_BEGIN606,7803
SVC_ENDSVC_END609,7853
SVC_BEGIN svcSetHardwareBreakPointSVC_BEGIN611,7862
SVC_ENDSVC_END614,7915
SVC_BEGIN svcGetDebugThreadParamSVC_BEGIN616,7924
SVC_ENDSVC_END625,8076
SVC_BEGIN svcControlProcessMemorySVC_BEGIN627,8085
SVC_ENDSVC_END634,8204
SVC_BEGIN svcMapProcessMemorySVC_BEGIN636,8213
SVC_ENDSVC_END639,8261
SVC_BEGIN svcUnmapProcessMemorySVC_BEGIN641,8270
SVC_ENDSVC_END644,8320
SVC_BEGIN svcCreateCodeSetSVC_BEGIN646,8329
SVC_ENDSVC_END654,8462
SVC_BEGIN svcCreateProcessSVC_BEGIN656,8471
SVC_ENDSVC_END663,8586
SVC_BEGIN svcTerminateProcessSVC_BEGIN665,8595
SVC_ENDSVC_END668,8643
SVC_BEGIN svcSetProcessResourceLimitsSVC_BEGIN670,8652
SVC_ENDSVC_END673,8708
SVC_BEGIN svcCreateResourceLimitSVC_BEGIN675,8717
SVC_ENDSVC_END681,8807
SVC_BEGIN svcSetResourceLimitValuesSVC_BEGIN683,8816
SVC_ENDSVC_END686,8870
SVC_BEGIN svcBackdoorSVC_BEGIN688,8879
SVC_ENDSVC_END691,8919
SVC_BEGIN svcKernelSetStateSVC_BEGIN693,8928
SVC_ENDSVC_END696,8974
SVC_BEGIN svcQueryProcessMemorySVC_BEGIN698,8983
SVC_ENDSVC_END708,9147

source/services/gsplcd.c,880
Handle gspLcdHandle;gspLcdHandle11,217
static int gspLcdRefCount;gspLcdRefCount12,238
Result gspLcdInit(void)gspLcdInit14,266
void gspLcdExit(void)gspLcdExit23,485
Result GSPLCD_PowerOnAllBacklights(void)GSPLCD_PowerOnAllBacklights29,590
Result GSPLCD_PowerOffAllBacklights(void)GSPLCD_PowerOffAllBacklights41,832
Result GSPLCD_PowerOnBacklight(u32 screen)GSPLCD_PowerOnBacklight53,1075
Result GSPLCD_PowerOffBacklight(u32 screen)GSPLCD_PowerOffBacklight66,1340
Result GSPLCD_SetLedForceOff(bool disable)GSPLCD_SetLedForceOff79,1606
Result GSPLCD_GetVendors(u8 *vendors)GSPLCD_GetVendors92,1879
Result GSPLCD_GetBrightness(u32 screen, u32 *brightness)GSPLCD_GetBrightness106,2161
Result GSPLCD_SetBrightness(u32 screen, u32 brightness)GSPLCD_SetBrightness121,2469
Result GSPLCD_SetBrightnessRaw(u32 screen, u32 brightness)GSPLCD_SetBrightnessRaw135,2773

source/services/nim.c,1502
static Handle nimsHandle;nimsHandle13,260
static int nimsRefCount;nimsRefCount14,286
static Result NIMS_GetInitializeResult(void)NIMS_GetInitializeResult16,312
static Result NIMS_RegisterSelf(void)NIMS_RegisterSelf28,570
static Result NIMS_ConnectNoTicketDownload(void *buffer, size_t buffer_len)NIMS_ConnectNoTicketDownload42,897
Result nimsInit(void *buffer, size_t buffer_len)nimsInit58,1337
Result nimsInitWithTIN(void *buffer, size_t buffer_len, const char *TIN)nimsInitWithTIN64,1481
void nimsExit(void)nimsExit94,2089
Handle *nimsGetSessionHandle(void)nimsGetSessionHandle100,2188
Result NIMS_SetAttribute(const char *attr, const char *val)NIMS_SetAttribute105,2249
Result NIMS_WantUpdate(bool *want_update)NIMS_WantUpdate124,2730
void NIMS_MakeTitleConfig(NIM_TitleConfig *cfg, u64 titleId, u32 version, u8 ratingAge, FS_MediaNIMS_MakeTitleConfig137,3028
Result NIMS_RegisterTask(const NIM_TitleConfig *cfg, const char *name, const char *maker)NIMS_RegisterTask147,3285
Result NIMS_IsTaskRegistered(u64 titleId, bool *registered)NIMS_IsTaskRegistered175,4351
Result NIMS_UnregisterTask(u64 titleId)NIMS_UnregisterTask190,4758
Result NIMS_StartDownload(const NIM_TitleConfig *cfg, NIM_InstallationMode mode)NIMS_StartDownload205,5134
Result NIMS_StartDownloadSimple(const NIM_TitleConfig *cfg)NIMS_StartDownloadSimple220,5522
Result NIMS_GetProgress(NIM_TitleProgress *tp)NIMS_GetProgress233,5835
Result NIMS_CancelDownload(void)NIMS_CancelDownload248,6136

source/services/am.c,6290
static Handle amHandle;amHandle13,259
static int amRefCount;amRefCount14,283
Result amInit(void)amInit16,307
Result amAppInit(void)amAppInit30,643
void amExit(void)amExit43,916
Handle *amGetSessionHandle(void)amGetSessionHandle49,1009
Result AM_GetTitleCount(FS_MediaType mediatype, u32 *count)AM_GetTitleCount54,1066
Result AM_GetTitleList(u32* titlesRead, FS_MediaType mediatype, u32 titleCount, u64 *titleIds)AM_GetTitleList69,1389
Result AM_GetTitleInfo(FS_MediaType mediatype, u32 titleCount, u64 *titleIds, AM_TitleEntry *titAM_GetTitleInfo87,1877
Result AM_GetTicketCount(u32 *count)AM_GetTicketCount105,2438
Result AM_GetTicketList(u32 *ticketsRead, u32 ticketCount, u32 skip, u64 *ticketIds)AM_GetTicketList119,2714
Result AM_GetPendingTitleCount(u32 *count, FS_MediaType mediatype, u32 statusMask)AM_GetPendingTitleCount137,3192
Result AM_GetPendingTitleList(u32 *titlesRead, u32 titleCount, FS_MediaType mediatype, u32 statuAM_GetPendingTitleList153,3564
Result AM_GetPendingTitleInfo(u32 titleCount, FS_MediaType mediatype, u64 *titleIds, AM_PendingTAM_GetPendingTitleInfo172,4101
Result AM_GetDeviceId(u32 *deviceID)AM_GetDeviceId190,4676
Result AM_ExportTwlBackup(u64 titleID, u8 operation, void* workbuf, u32 workbuf_size, const charAM_ExportTwlBackup204,4958
Result AM_ImportTwlBackup(Handle filehandle, u8 operation, void* buffer, u32 size)AM_ImportTwlBackup234,5804
Result AM_ReadTwlBackupInfo(Handle filehandle, void* outinfo, u32 outinfo_size, void* workbuf, uAM_ReadTwlBackupInfo252,6276
Result AM_GetTWLPartitionInfo(AM_TWLPartitionInfo *info)AM_GetTWLPartitionInfo275,7023
Result AM_StartCiaInstall(FS_MediaType mediatype, Handle *ciaHandle)AM_StartCiaInstall289,7354
Result AM_StartDlpChildCiaInstall(Handle *ciaHandle)AM_StartDlpChildCiaInstall304,7696
Result AM_CancelCIAInstall(Handle ciaHandle)AM_CancelCIAInstall318,7998
Result AM_FinishCiaInstall(Handle ciaHandle)AM_FinishCiaInstall332,8314
Result AM_FinishCiaInstallWithoutCommit(Handle ciaHandle)AM_FinishCiaInstallWithoutCommit346,8630
Result AM_CommitImportPrograms(FS_MediaType mediaType, u32 titleCount, bool temp, const u64* titAM_CommitImportPrograms360,8959
Result AM_DeleteTitle(FS_MediaType mediatype, u64 titleID)AM_DeleteTitle377,9435
Result AM_DeleteAppTitle(FS_MediaType mediatype, u64 titleID)AM_DeleteAppTitle392,9797
Result AM_DeleteTicket(u64 ticketId)AM_DeleteTicket407,10160
Result AM_DeletePendingTitle(FS_MediaType mediatype, u64 titleId)AM_DeletePendingTitle421,10476
Result AM_DeletePendingTitles(FS_MediaType mediatype, u32 flags)AM_DeletePendingTitles436,10843
Result AM_DeleteAllPendingTitles(FS_MediaType mediatype)AM_DeleteAllPendingTitles450,11160
Result AM_InstallNativeFirm(void)AM_InstallNativeFirm463,11449
Result AM_InstallFirm(u64 titleID){AM_InstallFirm475,11692
Result AM_GetTitleProductCode(FS_MediaType mediatype, u64 titleId, char *productCode)AM_GetTitleProductCode488,12005
Result AM_GetTitleExtDataId(u64 *extDataId, FS_MediaType mediatype, u64 titleId)AM_GetTitleExtDataId506,12533
Result AM_GetCiaFileInfo(FS_MediaType mediatype, AM_TitleEntry *titleEntry, Handle fileHandle)AM_GetCiaFileInfo523,12985
Result AM_GetCiaIcon(void *icon, Handle fileHandle)AM_GetCiaIcon540,13450
Result AM_GetCiaDependencies(u64 *dependencies, Handle fileHandle)AM_GetCiaDependencies556,13865
Result AM_GetCiaMetaOffset(u64 *metaOffset, Handle fileHandle)AM_GetCiaMetaOffset575,14349
Result AM_GetCiaCoreVersion(u32 *coreVersion, Handle fileHandle)AM_GetCiaCoreVersion591,14766
Result AM_GetCiaRequiredSpace(u64 *requiredSpace, FS_MediaType mediaType, Handle fileHandle)AM_GetCiaRequiredSpace607,15162
Result AM_GetCiaMetaSection(void *meta, u32 size, Handle fileHandle)AM_GetCiaMetaSection624,15639
Result AM_InitializeExternalTitleDatabase(bool overwrite)AM_InitializeExternalTitleDatabase641,16075
Result AM_QueryAvailableExternalTitleDatabase(bool* available)AM_QueryAvailableExternalTitleDatabase655,16414
Result AM_InstallTicketBegin(Handle *ticketHandle)AM_InstallTicketBegin672,16868
Result AM_InstallTicketAbort(Handle ticketHandle)AM_InstallTicketAbort686,17174
Result AM_InstallTicketFinish(Handle ticketHandle)AM_InstallTicketFinish700,17498
Result AM_InstallTitleBegin(FS_MediaType mediaType, u64 titleId, bool unk)AM_InstallTitleBegin714,17823
Result AM_InstallTitleStop(void)AM_InstallTitleStop730,18243
Result AM_InstallTitleResume(FS_MediaType mediaType, u64 titleId)AM_InstallTitleResume742,18485
Result AM_InstallTitleAbort(void)AM_InstallTitleAbort758,18879
Result AM_InstallTitleFinish(void)AM_InstallTitleFinish770,19122
Result AM_CommitImportTitles(FS_MediaType mediaType, u32 titleCount, bool temp, const u64* titleAM_CommitImportTitles782,19366
Result AM_InstallTmdBegin(Handle *tmdHandle)AM_InstallTmdBegin799,19840
Result AM_InstallTmdAbort(Handle tmdHandle)AM_InstallTmdAbort813,20134
Result AM_InstallTmdFinish(Handle tmdHandle, bool unk)AM_InstallTmdFinish827,20449
Result AM_CreateImportContentContexts(u32 contentCount, u16* contentIndices)AM_CreateImportContentContexts842,20793
Result AM_InstallContentBegin(Handle *contentHandle, u16 index)AM_InstallContentBegin857,21202
Result AM_InstallContentStop(Handle contentHandle)AM_InstallContentStop872,21543
Result AM_InstallContentResume(Handle *contentHandle, u64* resumeOffset, u16 index)AM_InstallContentResume886,21869
Result AM_InstallContentCancel(Handle contentHandle)AM_InstallContentCancel902,22300
Result AM_InstallContentFinish(Handle contentHandle)AM_InstallContentFinish916,22628
Result AM_ImportCertificates(u32 cert1Size, void* cert1, u32 cert2Size, void* cert2, u32 cert3SiAM_ImportCertificates930,22956
Result AM_ImportCertificate(u32 certSize, void* cert)AM_ImportCertificate954,23725
Result AM_CommitImportTitlesAndUpdateFirmwareAuto(FS_MediaType mediaType, u32 titleCount, bool tAM_CommitImportTitlesAndUpdateFirmwareAuto969,24089
Result AM_DeleteAllDemoLaunchInfos(void)AM_DeleteAllDemoLaunchInfos986,24578
Result AM_DeleteAllTemporaryTitles(void)AM_DeleteAllTemporaryTitles998,24827
Result AM_DeleteAllExpiredTitles(FS_MediaType mediatype)AM_DeleteAllExpiredTitles1010,25074
Result AM_DeleteAllTwlTitles(void)AM_DeleteAllTwlTitles1023,25361

source/services/ac.c,1390
static Handle acHandle;acHandle10,193
static int acRefCount;acRefCount11,217
Result acInit(void)acInit13,241
void acExit(void)acExit27,547
Result acWaitInternetConnection(void)acWaitInternetConnection33,640
Result ACU_CreateDefaultConfig(acuConfig* config)ACU_CreateDefaultConfig41,800
Result ACU_ConnectAsync(const acuConfig* config, Handle connectionHandle)ACU_ConnectAsync56,1177
Result ACU_GetLastErrorCode(u32* errorCode)ACU_GetLastErrorCode73,1591
Result ACU_GetLastDetailErrorCode(u32* errorCode)ACU_GetLastDetailErrorCode87,1878
Result ACU_GetStatus(u32 *out)ACU_GetStatus101,2171
Result ACU_GetWifiStatus(u32 *out)ACU_GetWifiStatus115,2423
Result ACU_SetAllowApType(acuConfig* config, u8 type)ACU_SetAllowApType129,2679
Result ACU_SetNetworkArea(acuConfig* config, u8 area)ACU_SetNetworkArea147,3153
Result ACU_SetRequestEulaVersion(acuConfig* config)ACU_SetRequestEulaVersion165,3627
Result ACU_GetProxyPassword(char *password)ACU_GetProxyPassword184,4112
Result ACU_GetSecurityMode(acSecurityMode *mode)ACU_GetSecurityMode200,4486
Result ACU_GetSSID(char *SSID)ACU_GetSSID214,4759
Result ACU_GetSSIDLength(u32 *out)ACU_GetSSIDLength230,5116
Result ACU_GetProxyEnable(bool *enable)ACU_GetProxyEnable244,5374
Result ACU_GetProxyPort(u32 *out)ACU_GetProxyPort258,5647
Result ACU_GetProxyUserName(char *username)ACU_GetProxyUserName272,5904

source/services/boss.c,1879
static Handle bossHandle;bossHandle12,236
static int bossRefCount;bossRefCount13,262
static u32 bossPriv = 0;bossPriv14,287
Result bossInit(u64 programID, bool force_user)bossInit18,370
Result bossReinit(u64 programID)bossReinit56,1012
void bossExit(void)bossExit61,1096
Handle bossGetSessionHandle(void)bossGetSessionHandle68,1212
static Result bossipc_InitializeSession(u64 programID)bossipc_InitializeSession73,1271
Result bossSetStorageInfo(u64 extdataID, u32 boss_size, u8 mediaType)bossSetStorageInfo89,1719
Result bossUnregisterStorage(void)bossUnregisterStorage105,2110
Result bossRegisterTask(const char *taskID, u8 unk0, u8 unk1)bossRegisterTask117,2350
static Result bossipc_UnregisterTask(const char *taskID, u32 unk)bossipc_UnregisterTask135,2780
Result bossSendProperty(u16 PropertyID, const void* buf, u32 size)bossSendProperty152,3194
Result bossStartTaskImmediate(const char *taskID)bossStartTaskImmediate168,3585
Result bossipc_CancelTask(const char *taskID)bossipc_CancelTask184,3967
Result bossDeleteTask(const char *taskID, u32 unk)bossDeleteTask200,4345
Result bossGetTaskState(const char *taskID, s8 inval, u8 *status, u32 *out1, u8 *out2)bossGetTaskState212,4541
Result bossDeleteNsData(u32 NsDataId)bossDeleteNsData237,5112
Result bossGetNsDataHeaderInfo(u32 NsDataId, u8 type, void* buffer, u32 size)bossGetNsDataHeaderInfo250,5380
Result bossReadNsData(u32 NsDataId, u64 offset, void* buffer, u32 size, u32 *transfer_total, u32bossReadNsData267,5802
Result bossStartBgImmediate(const char *taskID)bossStartBgImmediate291,6409
Result bossGetTaskProperty0(const char *taskID, u8 *out)bossGetTaskProperty0307,6789
void bossSetupContextDefault(bossContext *ctx, u32 seconds_interval, const char *url)bossSetupContextDefault326,7237
Result bossSendContextConfig(bossContext *ctx)bossSendContextConfig371,8225

source/services/apt.c,9183
#define APT_HANDLER_STACKSIZE APT_HANDLER_STACKSIZE21,448
static int aptRefCount = 0;aptRefCount23,488
static Handle aptLockHandle;aptLockHandle24,516
static Handle aptEvents[2];aptEvents25,545
static LightEvent aptReceiveEvent;aptReceiveEvent26,573
static LightEvent aptSleepEvent;aptSleepEvent27,608
static Thread aptEventHandlerThread;aptEventHandlerThread28,641
static bool aptEventHandlerThreadQuit;aptEventHandlerThreadQuit29,678
static aptHookCookie aptFirstHook;aptFirstHook30,717
static aptMessageCb aptMessageFunc;aptMessageFunc31,752
static void* aptMessageFuncData;aptMessageFuncData32,788
{__anone35a1d8e010335,827
	FLAG_ACTIVE       = BIT(0),FLAG_ACTIVE37,854
	FLAG_SLEEPING     = BIT(1),FLAG_SLEEPING38,883
	FLAG_ALLOWSLEEP   = BIT(2),FLAG_ALLOWSLEEP41,938
	FLAG_SHOULDSLEEP  = BIT(3),FLAG_SHOULDSLEEP42,967
	FLAG_ALLOWHOME    = BIT(4),FLAG_ALLOWHOME45,1019
	FLAG_SHOULDHOME   = BIT(5),FLAG_SHOULDHOME46,1048
	FLAG_HOMEREJECTED = BIT(6),FLAG_HOMEREJECTED47,1077
	FLAG_POWERBUTTON  = BIT(7),FLAG_POWERBUTTON50,1130
	FLAG_SHUTDOWN     = BIT(8),FLAG_SHUTDOWN51,1159
	FLAG_ORDERTOCLOSE = BIT(9),FLAG_ORDERTOCLOSE54,1214
	FLAG_CANCELLED    = BIT(10),FLAG_CANCELLED55,1243
	FLAG_DSPWAKEUP    = BIT(29),FLAG_DSPWAKEUP58,1292
	FLAG_CHAINLOAD    = BIT(30),FLAG_CHAINLOAD59,1322
	FLAG_SPURIOUS     = BIT(31),FLAG_SPURIOUS60,1352
static u8 aptHomeButtonState;aptHomeButtonState63,1386
static u32 aptFlags;aptFlags64,1416
static u32 aptParameters[0x1000/4];aptParameters65,1437
static u8 aptChainloadFlags;aptChainloadFlags66,1473
static u64 aptChainloadTid;aptChainloadTid67,1502
static u8 aptChainloadMediatype;aptChainloadMediatype68,1530
{__anone35a1d8e020371,1577
	TR_ENABLE     = 0x62,TR_ENABLE72,1579
	TR_JUMPTOMENU = 0x0E,TR_JUMPTOMENU73,1602
	TR_SYSAPPLET  = 0x05,TR_SYSAPPLET74,1625
	TR_LIBAPPLET  = 0x04,TR_LIBAPPLET75,1648
	TR_CANCELLIB  = 0x03,TR_CANCELLIB76,1671
	TR_CLOSEAPP   = 0x09,TR_CLOSEAPP77,1694
	TR_APPJUMP    = 0x12,TR_APPJUMP78,1717
} APT_Transition;APT_Transition79,1740
__attribute__((weak)) void _aptDebug(int a, int b) { }_aptDebug86,2002
#define _aptDebug(_aptDebug88,2063
__attribute__((weak)) bool aptDspSleep(void) { return false; }aptDspSleep92,2168
__attribute__((weak)) void aptDspWakeup(void) { }aptDspWakeup93,2231
__attribute__((weak)) void aptDspCancel(void) { }aptDspCancel94,2281
static void aptCallHook(APT_HookType hookType)aptCallHook96,2332
static bool aptIsReinit(void)aptIsReinit103,2494
static bool aptIsChainload(void)aptIsChainload108,2588
static bool aptIsCrippled(void)aptIsCrippled113,2688
static Result aptGetServiceHandle(Handle* aptuHandle)aptGetServiceHandle119,2835
static inline int countPrmWords(u32 hdr)countPrmWords142,3300
Result aptSendCommand(u32* aptcmdbuf)aptSendCommand147,3388
static void aptInitCaptureInfo(aptCaptureBufInfo* capinfo, const GSPGPU_CaptureInfo* gspcapinfo)aptInitCaptureInfo169,3947
Result aptInit(void)aptInit191,4806
bool aptIsActive(void)aptIsActive250,6530
bool aptShouldClose(void)aptShouldClose255,6597
bool aptIsSleepAllowed(void)aptIsSleepAllowed260,6690
void aptSetSleepAllowed(bool allowed)aptSetSleepAllowed265,6767
bool aptIsHomeAllowed(void)aptIsHomeAllowed280,7053
void aptSetHomeAllowed(bool allowed)aptSetHomeAllowed285,7128
bool aptShouldJumpToHome(void)aptShouldJumpToHome293,7251
bool aptCheckHomePressRejected(void)aptCheckHomePressRejected298,7371
static void aptClearJumpToHome(void)aptClearJumpToHome308,7518
void aptClearChainloader(void)aptClearChainloader315,7641
void aptSetChainloader(u64 programID, u8 mediatype)aptSetChainloader320,7707
void aptSetChainloaderToSelf(void)aptSetChainloaderToSelf328,7883
static void aptExitProcess(void)aptExitProcess338,8066
void aptExit(void)aptExit343,8139
void aptEventHandler(void *arg)aptEventHandler418,10213
static Result aptReceiveParameter(APT_Command* cmd, size_t* actualSize, Handle* handle)aptReceiveParameter582,14764
APT_Command aptWaitForWakeUp(APT_Transition transition)aptWaitForWakeUp596,15303
static void aptConvertScreenForCapture(void* dst, const void* src, u32 height, GSPGPU_FramebuffeaptConvertScreenForCapture654,16861
static void aptScreenTransfer(NS_APPID appId, bool sysApplet)aptScreenTransfer688,17919
void aptJumpToHomeMenu(void)aptJumpToHomeMenu762,20160
void aptHandleSleep(void)aptHandleSleep784,20697
bool aptMainLoop(void)aptMainLoop800,21068
void aptHook(aptHookCookie* cookie, aptHookFn callback, void* param)aptHook807,21166
void aptUnhook(aptHookCookie* cookie)aptUnhook818,21412
void aptSetMessageCallback(aptMessageCb callback, void* user)aptSetMessageCallback831,21621
void aptLaunchLibraryApplet(NS_APPID appId, void* buf, size_t bufsize, Handle handle)aptLaunchLibraryApplet837,21744
Result APT_GetLockHandle(u16 flags, Handle* lockHandle)APT_GetLockHandle861,22416
Result APT_Initialize(NS_APPID appId, APT_AppletAttr attr, Handle* signalEvent, Handle* resumeEvAPT_Initialize874,22662
Result APT_Finalize(NS_APPID appId)APT_Finalize891,23033
Result APT_HardwareResetAsync(void)APT_HardwareResetAsync900,23189
Result APT_Enable(APT_AppletAttr attr)APT_Enable908,23329
Result APT_GetAppletManInfo(APT_AppletPos inpos, APT_AppletPos* outpos, NS_APPID* req_appid, NS_APT_GetAppletManInfo917,23487
Result APT_GetAppletInfo(NS_APPID appID, u64* pProgramID, u8* pMediaType, bool* pRegistered, booAPT_GetAppletInfo935,23975
Result APT_GetAppletProgramInfo(u32 id, u32 flags, u16 *titleversion)APT_GetAppletProgramInfo954,24539
Result APT_GetProgramID(u64* pProgramID)APT_GetProgramID968,24816
Result APT_IsRegistered(NS_APPID appID, bool* out)APT_IsRegistered981,25090
Result APT_InquireNotification(u32 appID, APT_Signal* signalType)APT_InquireNotification994,25329
Result APT_PrepareToJumpToHomeMenu(void)APT_PrepareToJumpToHomeMenu1007,25583
Result APT_JumpToHomeMenu(const void* param, size_t paramSize, Handle handle)APT_JumpToHomeMenu1015,25728
Result APT_PrepareToJumpToApplication(bool exiting)APT_PrepareToJumpToApplication1028,26060
Result APT_JumpToApplication(const void* param, size_t paramSize, Handle handle)APT_JumpToApplication1037,26236
Result APT_SleepSystem(const PtmWakeEvents *wakeEvents)APT_SleepSystem1050,26572
Result APT_NotifyToWait(NS_APPID appID)APT_NotifyToWait1059,26778
Result APT_AppletUtility(int id, void* out, size_t outSize, const void* in, size_t inSize)APT_AppletUtility1068,26940
Result APT_SleepIfShellClosed(void)APT_SleepIfShellClosed1092,27614
Result APT_LockTransition(u32 transition, bool flag)APT_LockTransition1098,27738
	{__anone35a1d8e03081101,27807
		u32 transition;transition1102,27810
		bool flag;flag1103,27828
		u8 padding[3];padding1104,27841
Result APT_TryLockTransition(u32 transition, bool* succeeded)APT_TryLockTransition1110,27971
Result APT_UnlockTransition(u32 transition)APT_UnlockTransition1115,28132
Result APT_GlanceParameter(NS_APPID appID, void* buffer, size_t bufferSize, NS_APPID* sender, APAPT_GlanceParameter1121,28272
Result APT_ReceiveParameter(NS_APPID appID, void* buffer, size_t bufferSize, NS_APPID* sender, AAPT_ReceiveParameter1151,29143
Result APT_SendParameter(NS_APPID source, NS_APPID dest, APT_Command command, const void* bufferAPT_SendParameter1181,30015
Result APT_CancelParameter(NS_APPID source, NS_APPID dest, bool* success)APT_CancelParameter1200,30480
Result APT_SendCaptureBufferInfo(const aptCaptureBufInfo* captureBuf)APT_SendCaptureBufferInfo1217,30852
Result APT_ReplySleepQuery(NS_APPID appID, APT_QueryReply reply)APT_ReplySleepQuery1229,31142
Result APT_ReplySleepNotificationComplete(NS_APPID appID)APT_ReplySleepNotificationComplete1239,31347
Result APT_PrepareToCloseApplication(bool cancelPreload)APT_PrepareToCloseApplication1248,31527
Result APT_CloseApplication(const void* param, size_t paramSize, Handle handle)APT_CloseApplication1257,31714
Result APT_SetAppCpuTimeLimit(u32 percent)APT_SetAppCpuTimeLimit1271,32104
Result APT_GetAppCpuTimeLimit(u32 *percent)APT_GetAppCpuTimeLimit1281,32285
static Result APT_CheckNew3DS_System(bool* out)APT_CheckNew3DS_System1294,32512
Result APT_CheckNew3DS(bool* out)APT_CheckNew3DS1306,32736
Result APT_PrepareToDoApplicationJump(u8 flags, u64 programID, u8 mediatype)APT_PrepareToDoApplicationJump1321,32981
Result APT_DoApplicationJump(const void* param, size_t paramSize, const void* hmac)APT_DoApplicationJump1333,33262
Result APT_PrepareToStartLibraryApplet(NS_APPID appID)APT_PrepareToStartLibraryApplet1347,33639
Result APT_StartLibraryApplet(NS_APPID appID, const void* param, size_t paramSize, Handle handleAPT_StartLibraryApplet1356,33816
Result APT_PrepareToStartSystemApplet(NS_APPID appID)APT_PrepareToStartSystemApplet1370,34185
Result APT_StartSystemApplet(NS_APPID appID, const void* param, size_t paramSize, Handle handle)APT_StartSystemApplet1379,34361
Result APT_GetSharedFont(Handle* fontHandle, u32* mapAddr)APT_GetSharedFont1393,34745
Result APT_ReceiveDeliverArg(const void* param, size_t paramSize, const void* hmac, u64* sender,APT_ReceiveDeliverArg1408,35045

source/services/ns.c,654
static Handle nsHandle;nsHandle10,193
static int nsRefCount;nsRefCount11,217
Result nsInit(void)nsInit13,241
void nsExit(void)nsExit22,438
Result NS_LaunchFIRM(u64 titleid)NS_LaunchFIRM28,531
Result NS_LaunchTitle(u64 titleid, u32 launch_flags, u32 *procid)NS_LaunchTitle42,846
Result NS_TerminateTitle(void)NS_TerminateTitle59,1262
Result NS_LaunchApplicationFIRM(u64 titleid, u32 flags)NS_LaunchApplicationFIRM71,1497
Result NS_RebootToTitle(u8 mediatype, u64 titleid)NS_RebootToTitle86,1854
Result NS_TerminateProcessTID(u64 titleid, u64 timeout)NS_TerminateProcessTID104,2278
Result NS_RebootSystem(void)NS_RebootSystem120,2695

source/services/nfc.c,2546
static Handle nfcHandle;nfcHandle11,224
static int nfcRefCount;nfcRefCount12,249
static NFC_OpType nfc_optype = NFC_OpType_NFCTag;nfc_optype13,273
Result nfcInit(NFC_OpType type)nfcInit31,1000
void nfcExit(void)nfcExit56,1497
Handle nfcGetSessionHandle(void)nfcGetSessionHandle63,1620
static Result NFC_StartCommsAdapter(void)NFC_StartCommsAdapter68,1677
Result nfcStartScanning(u16 inval)nfcStartScanning108,2430
Result nfcStartOtherTagScanning(u16 unk0, u32 unk1)nfcStartOtherTagScanning116,2578
void nfcStopScanning(void)nfcStopScanning124,2753
static Result NFC_Initialize(NFC_OpType type)NFC_Initialize138,2922
static Result NFC_Shutdown(NFC_OpType type)NFC_Shutdown152,3194
static Result NFC_StartCommunication(void)NFC_StartCommunication166,3464
static Result NFC_StopCommunication(void)NFC_StopCommunication179,3709
static Result NFC_StartTagScanning(u16 unknown)NFC_StartTagScanning192,3953
static Result NFC_StopTagScanning(void)NFC_StopTagScanning206,4223
Result nfcLoadAmiiboData(void)nfcLoadAmiiboData219,4465
Result nfcResetTagScanState(void)nfcResetTagScanState232,4698
Result nfcUpdateStoredAmiiboData(void)nfcUpdateStoredAmiiboData245,4934
Result nfcGetTagState(NFC_TagState *state)nfcGetTagState259,5209
static Result NFC_CommunicationGetStatus(u8 *out)NFC_CommunicationGetStatus274,5512
Result nfcGetTagInfo(NFC_TagInfo *out)nfcGetTagInfo289,5811
static Result NFC_CommunicationGetResult(Result *out)NFC_CommunicationGetResult304,6129
Result nfcOpenAppData(u32 amiibo_appid)nfcOpenAppData319,6434
Result nfcInitializeWriteAppData(u32 amiibo_appid, const void *buf, size_t size)nfcInitializeWriteAppData333,6701
static Result NFC_InitializeWriteAppData(u32 amiibo_appid, NFC_AppDataInitStruct *initstruct, coNFC_InitializeWriteAppData344,6989
Result nfcReadAppData(void *buf, size_t size)nfcReadAppData362,7520
Result nfcWriteAppData(const void *buf, size_t size, NFC_TagInfo *taginfo)nfcWriteAppData390,8110
Result nfcGetAmiiboSettings(NFC_AmiiboSettings *out)nfcGetAmiiboSettings415,8804
Result nfcGetAmiiboConfig(NFC_AmiiboConfig *out)nfcGetAmiiboConfig430,9143
static Result NFC_GetAppDataInitStruct(NFC_AppDataInitStruct *out)NFC_GetAppDataInitStruct445,9476
static Result NFC_StartOtherTagScanning(u16 unk0, u32 unk1)NFC_StartOtherTagScanning460,9832
Result nfcSendTagCommand(const void *inbuf, size_t insize, void *outbuf, size_t outsize, size_t nfcSendTagCommand475,10134
Result nfcCmd21(void)nfcCmd21509,11038
Result nfcCmd22(void)nfcCmd22522,11264

source/services/pxipm.c,549
static Handle pxiPmHandle;pxiPmHandle10,197
static int pxiPmRefCount;pxiPmRefCount11,224
Result pxiPmInit(void)pxiPmInit13,251
void pxiPmExit(void)pxiPmExit25,468
Handle *pxiPmGetSessionHandle(void)pxiPmGetSessionHandle31,570
Result PXIPM_GetProgramInfo(ExHeader_Info *exheaderInfo, u64 programHandle)PXIPM_GetProgramInfo36,633
Result PXIPM_RegisterProgram(u64 *programHandle, const FS_ProgramInfo *programInfo, const FS_ProPXIPM_RegisterProgram52,1082
Result PXIPM_UnregisterProgram(u64 programHandle)PXIPM_UnregisterProgram67,1570

source/services/pmdbg.c,539
static Handle pmDbgHandle;pmDbgHandle10,196
static int pmDbgRefcount;pmDbgRefcount11,223
Result pmDbgInit(void)pmDbgInit13,250
void pmDbgExit(void)pmDbgExit22,461
Handle *pmDbgGetSessionHandle(void)pmDbgGetSessionHandle28,563
Result PMDBG_LaunchAppDebug(Handle *outDebug, const FS_ProgramInfo *programInfo, u32 launchFlagsPMDBG_LaunchAppDebug33,626
Result PMDBG_LaunchApp(const FS_ProgramInfo *programInfo, u32 launchFlags)PMDBG_LaunchApp48,1040
Result PMDBG_RunQueuedProcess(Handle *outDebug)PMDBG_RunQueuedProcess62,1407

source/services/uds.c,4440
Handle __uds_servhandle;__uds_servhandle18,383
static int __uds_refcount;__uds_refcount19,408
u32 *__uds_sharedmem_addr;__uds_sharedmem_addr21,436
static u32 __uds_sharedmem_size;__uds_sharedmem_size22,463
static Handle __uds_sharedmem_handle;__uds_sharedmem_handle23,496
static Handle __uds_connectionstatus_event;__uds_connectionstatus_event25,535
static u32 bind_allocbitmask;bind_allocbitmask27,580
Result udsInit(size_t sharedmem_size, const char *username)udsInit47,1808
void udsExit(void)udsExit95,2608
Result udsGenerateNodeInfo(udsNodeInfo *nodeinfo, const char *username)udsGenerateNodeInfo118,3043
Result udsGetNodeInfoUsername(const udsNodeInfo *nodeinfo, char *username)udsGetNodeInfoUsername163,3896
bool udsCheckNodeInfoInitialized(const udsNodeInfo *nodeinfo)udsCheckNodeInfoInitialized174,4145
void udsGenerateDefaultNetworkStruct(udsNetworkStruct *network, u32 wlancommID, u8 id8, u8 max_nudsGenerateDefaultNetworkStruct180,4268
static Result uds_Initialize(u32 sharedmem_size, const char *username)uds_Initialize202,4792
Result udsCreateNetwork(const udsNetworkStruct *network, const void *passphrase, size_t passphraudsCreateNetwork246,5956
Result udsConnectNetwork(const udsNetworkStruct *network, const void *passphrase, size_t passphrudsConnectNetwork270,6565
static Result udsipc_InitializeWithVersion(udsNodeInfo *nodeinfo, Handle sharedmem_handle, u32 sudsipc_InitializeWithVersion290,7212
static Result udsipc_Shutdown(void)udsipc_Shutdown313,7808
Result udsEjectClient(u16 NetworkNodeID)udsEjectClient325,8039
Result udsEjectSpectator(void)udsEjectSpectator338,8301
Result udsUpdateNetworkAttribute(u16 bitmask, bool flag)udsUpdateNetworkAttribute350,8527
Result udsSetNewConnectionsBlocked(bool block, bool clients, bool flag)udsSetNewConnectionsBlocked366,8836
Result udsAllowSpectators(void)udsAllowSpectators376,9076
Result udsDestroyNetwork(void)udsDestroyNetwork381,9192
Result udsDisconnectNetwork(void)udsDisconnectNetwork393,9418
Result udsGetConnectionStatus(udsConnectionStatus *output)udsGetConnectionStatus405,9647
bool udsWaitConnectionStatusEvent(bool nextEvent, bool wait)udsWaitConnectionStatusEvent423,10011
Result udsGetNodeInformation(u16 NetworkNodeID, udsNodeInfo *output)udsGetNodeInformation439,10379
Result udsScanBeacons(void *buf, size_t maxsize, udsNetworkScanInfo **networks, size_t *total_neudsScanBeacons458,10771
Result udsBind(udsBindContext *bindcontext, u16 NetworkNodeID, bool spectator, u8 data_channel, udsBind546,13231
Result udsUnbind(udsBindContext *bindcontext)udsUnbind576,13880
bool udsWaitDataAvailable(const udsBindContext *bindcontext, bool nextEvent, bool wait)udsWaitDataAvailable596,14234
static Result usd_parsebeacon(u8 *buf, u32 size, udsNetworkScanInfo *networkscan)usd_parsebeacon612,14599
static Result udsipc_RecvBeaconBroadcastData(u8 *outbuf, u32 maxsize, nwmScanInputStruct *scaninudsipc_RecvBeaconBroadcastData724,17268
Result udsSetApplicationData(const void *buf, size_t size)udsSetApplicationData744,17859
Result udsGetApplicationData(void *buf, size_t size, size_t *actual_size)udsGetApplicationData759,18196
Result udsGetNetworkStructApplicationData(const udsNetworkStruct *network, void *buf, size_t sizudsGetNetworkStructApplicationData792,18893
static Result udsipc_Bind(udsBindContext *bindcontext, u32 input0, u8 data_channel, u16 NetworkNudsipc_Bind804,19241
static Result udsipc_Unbind(udsBindContext *bindcontext)udsipc_Unbind826,19722
Result udsPullPacket(const udsBindContext *bindcontext, void *buf, size_t size, size_t *actual_sudsPullPacket839,20012
Result udsSendTo(u16 dst_NetworkNodeID, u8 data_channel, u8 flags, const void *buf, size_t size)udsSendTo877,20927
Result udsGetChannel(u8 *channel)udsGetChannel899,21475
static Result udsipc_BeginHostingNetwork(const udsNetworkStruct *network, const void *passphraseudsipc_BeginHostingNetwork917,21771
static Result udsipc_ConnectToNetwork(const udsNetworkStruct *network, const void *passphrase, sudsipc_ConnectToNetwork934,22288
static Result udsipc_DecryptBeaconData(udsNetworkStruct *network, u8 *tag0, u8 *tag1, udsNodeInfudsipc_DecryptBeaconData952,22865
static Result udsipc_SetProbeResponseParam(u32 oui, s8 data)udsipc_SetProbeResponseParam985,23737
static Result udsipc_ScanOnConnection(u8 *outbuf, u32 maxsize, nwmScanInputStruct *scaninput, u3udsipc_ScanOnConnection999,24028

source/services/fspxi.c,9741
Result FSPXI_OpenFile(Handle serviceHandle, FSPXI_File* out, FSPXI_Archive archive, FS_Path pathFSPXI_OpenFile10,196
Result FSPXI_DeleteFile(Handle serviceHandle, FSPXI_Archive archive, FS_Path path)FSPXI_DeleteFile33,861
Result FSPXI_RenameFile(Handle serviceHandle, FSPXI_Archive srcArchive, FS_Path srcPath, FSPXI_AFSPXI_RenameFile52,1384
Result FSPXI_DeleteDirectory(Handle serviceHandle, FSPXI_Archive archive, FS_Path path)FSPXI_DeleteDirectory77,2190
Result FSPXI_CreateFile(Handle serviceHandle, FSPXI_Archive archive, FS_Path path, u32 attributeFSPXI_CreateFile96,2719
Result FSPXI_CreateDirectory(Handle serviceHandle, FSPXI_Archive archive, FS_Path path, u32 attrFSPXI_CreateDirectory118,3361
Result FSPXI_RenameDirectory(Handle serviceHandle, FSPXI_Archive srcArchive, FS_Path srcPath, FSFSPXI_RenameDirectory138,3930
Result FSPXI_OpenDirectory(Handle serviceHandle, FSPXI_Directory* out, FSPXI_Archive archive, FSFSPXI_OpenDirectory163,4741
Result FSPXI_ReadFile(Handle serviceHandle, FSPXI_File file, u32* bytesRead, u64 offset, void* bFSPXI_ReadFile184,5344
Result FSPXI_CalculateFileHashSHA256(Handle serviceHandle, FSPXI_File file, void* buffer, u32 siFSPXI_CalculateFileHashSHA256205,5925
Result FSPXI_WriteFile(Handle serviceHandle, FSPXI_File file, u32* bytesWritten, u64 offset, conFSPXI_WriteFile222,6392
Result FSPXI_CalcSavegameMAC(Handle serviceHandle, FSPXI_File file, const void* inBuffer, u32 inFSPXI_CalcSavegameMAC244,7018
Result FSPXI_GetFileSize(Handle serviceHandle, FSPXI_File file, u64* size)FSPXI_GetFileSize264,7612
Result FSPXI_SetFileSize(Handle serviceHandle, FSPXI_File file, u64 size)FSPXI_SetFileSize280,8017
Result FSPXI_CloseFile(Handle serviceHandle, FSPXI_File file)FSPXI_CloseFile296,8422
Result FSPXI_ReadDirectory(Handle serviceHandle, FSPXI_Directory directory, u32* entriesRead, u3FSPXI_ReadDirectory310,8757
Result FSPXI_CloseDirectory(Handle serviceHandle, FSPXI_Directory directory)FSPXI_CloseDirectory329,9359
Result FSPXI_OpenArchive(Handle serviceHandle, FSPXI_Archive* archive, FS_ArchiveID archiveID, FFSPXI_OpenArchive343,9720
Result FSPXI_HasFile(Handle serviceHandle, FSPXI_Archive archive, bool* out, FS_Path path)FSPXI_HasFile364,10262
Result FSPXI_HasDirectory(Handle serviceHandle, FSPXI_Archive archive, bool* out, FS_Path path)FSPXI_HasDirectory384,10798
Result FSPXI_CommitSaveData(Handle serviceHandle, FSPXI_Archive archive, u32 id)FSPXI_CommitSaveData404,11339
Result FSPXI_CloseArchive(Handle serviceHandle, FSPXI_Archive archive)FSPXI_CloseArchive419,11717
Result FSPXI_Unknown0x17(Handle serviceHandle, FSPXI_Archive archive, bool* out)FSPXI_Unknown0x17433,12068
Result FSPXI_GetCardType(Handle serviceHandle, FS_CardType* out)FSPXI_GetCardType449,12464
Result FSPXI_GetSdmcArchiveResource(Handle serviceHandle, FS_ArchiveResource* out)FSPXI_GetSdmcArchiveResource463,12780
Result FSPXI_GetNandArchiveResource(Handle serviceHandle, FS_ArchiveResource* out)FSPXI_GetNandArchiveResource483,13225
Result FSPXI_GetSdmcFatFsError(Handle serviceHandle, u32* out)FSPXI_GetSdmcFatFsError503,13670
Result FSPXI_IsSdmcDetected(Handle serviceHandle, bool* out)FSPXI_IsSdmcDetected517,13977
Result FSPXI_IsSdmcWritable(Handle serviceHandle, bool* out)FSPXI_IsSdmcWritable531,14288
Result FSPXI_GetSdmcCid(Handle serviceHandle, void* out, u32 size)FSPXI_GetSdmcCid545,14599
Result FSPXI_GetNandCid(Handle serviceHandle, void* out, u32 size)FSPXI_GetNandCid560,14975
Result FSPXI_GetSdmcSpeedInfo(Handle serviceHandle, u32* out)FSPXI_GetSdmcSpeedInfo575,15351
Result FSPXI_GetNandSpeedInfo(Handle serviceHandle, u32* out)FSPXI_GetNandSpeedInfo589,15657
Result FSPXI_GetSdmcLog(Handle serviceHandle, void* out, u32 size)FSPXI_GetSdmcLog603,15963
Result FSPXI_GetNandLog(Handle serviceHandle, void* out, u32 size)FSPXI_GetNandLog618,16338
Result FSPXI_ClearSdmcLog(Handle serviceHandle)FSPXI_ClearSdmcLog633,16713
Result FSPXI_ClearNandLog(Handle serviceHandle)FSPXI_ClearNandLog645,16978
Result FSPXI_CardSlotIsInserted(Handle serviceHandle, bool* inserted)FSPXI_CardSlotIsInserted657,17243
Result FSPXI_CardSlotPowerOn(Handle serviceHandle, bool* status)FSPXI_CardSlotPowerOn671,17573
Result FSPXI_CardSlotPowerOff(Handle serviceHandle, bool* status)FSPXI_CardSlotPowerOff685,17894
Result FSPXI_CardSlotGetCardIFPowerStatus(Handle serviceHandle, bool* status)FSPXI_CardSlotGetCardIFPowerStatus699,18216
Result FSPXI_CardNorDirectCommand(Handle serviceHandle, u8 commandId)FSPXI_CardNorDirectCommand713,18550
Result FSPXI_CardNorDirectCommandWithAddress(Handle serviceHandle, u8 commandId, u32 address)FSPXI_CardNorDirectCommandWithAddress726,18860
Result FSPXI_CardNorDirectRead(Handle serviceHandle, u8 commandId, u32 size, void* output)FSPXI_CardNorDirectRead740,19216
Result FSPXI_CardNorDirectReadWithAddress(Handle serviceHandle, u8 commandId, u32 address, u32 sFSPXI_CardNorDirectReadWithAddress756,19656
Result FSPXI_CardNorDirectWrite(Handle serviceHandle, u8 commandId, u32 size, const void* input)FSPXI_CardNorDirectWrite773,20142
Result FSPXI_CardNorDirectWriteWithAddress(Handle serviceHandle, u8 commandId, u32 address, u32 FSPXI_CardNorDirectWriteWithAddress789,20586
Result FSPXI_CardNorDirectRead_4xIO(Handle serviceHandle, u8 commandId, u32 address, u32 size, vFSPXI_CardNorDirectRead_4xIO806,21076
Result FSPXI_CardNorDirectCpuWriteWithoutVerify(Handle serviceHandle, u32 address, u32 size, conFSPXI_CardNorDirectCpuWriteWithoutVerify823,21556
Result FSPXI_CardNorDirectSectorEraseWithoutVerify(Handle serviceHandle, u32 address)FSPXI_CardNorDirectSectorEraseWithoutVerify839,22013
Result FSPXI_GetProductInfo(Handle serviceHandle, FS_ProductInfo* info, FSPXI_Archive archive)FSPXI_GetProductInfo852,22337
Result FSPXI_SetCardSpiBaudrate(Handle serviceHandle, FS_CardSpiBaudRate baudRate)FSPXI_SetCardSpiBaudrate868,22772
Result FSPXI_SetCardSpiBusMode(Handle serviceHandle, FS_CardSpiBusMode busMode)FSPXI_SetCardSpiBusMode881,23095
Result FSPXI_SendInitializeInfoTo9(Handle serviceHandle, u8 unk)FSPXI_SendInitializeInfoTo9894,23414
Result FSPXI_CreateExtSaveData(Handle serviceHandle, FS_ExtSaveDataInfo info)FSPXI_CreateExtSaveData907,23714
Result FSPXI_DeleteExtSaveData(Handle serviceHandle, FS_ExtSaveDataInfo info)FSPXI_DeleteExtSaveData920,24051
Result FSPXI_EnumerateExtSaveData(Handle serviceHandle, u32* idsWritten, u32 idsSize, FS_MediaTyFSPXI_EnumerateExtSaveData933,24388
Result FSPXI_GetSpecialContentIndex(Handle serviceHandle, u16* index, FS_MediaType mediaType, u6FSPXI_GetSpecialContentIndex953,24955
Result FSPXI_GetLegacyRomHeader(Handle serviceHandle, FS_MediaType mediaType, u64 programId, voiFSPXI_GetLegacyRomHeader971,25451
Result FSPXI_GetLegacyBannerData(Handle serviceHandle, FS_MediaType mediaType, u64 programId, voFSPXI_GetLegacyBannerData988,25943
Result FSPXI_FormatCardNorDevice(Handle serviceHandle, u32 unk)FSPXI_FormatCardNorDevice1006,26463
Result FSPXI_DeleteSdmcRoot(Handle serviceHandle)FSPXI_DeleteSdmcRoot1019,26761
Result FSPXI_DeleteAllExtSaveDataOnNand(Handle serviceHandle)FSPXI_DeleteAllExtSaveDataOnNand1031,27027
Result FSPXI_InitializeCtrFilesystem(Handle serviceHandle)FSPXI_InitializeCtrFilesystem1044,27336
Result FSPXI_CreateSeed(Handle serviceHandle)FSPXI_CreateSeed1056,27611
Result FSPXI_GetSdmcCtrRootPath(Handle serviceHandle, u16* out, u32 length)FSPXI_GetSdmcCtrRootPath1068,27873
Result FSPXI_GetArchiveResource(Handle serviceHandle, FS_ArchiveResource* archiveResource, FS_SyFSPXI_GetArchiveResource1083,28261
Result FSPXI_ExportIntegrityVerificationSeed(Handle serviceHandle, FS_IntegrityVerificationSeed*FSPXI_ExportIntegrityVerificationSeed1098,28690
Result FSPXI_ImportIntegrityVerificationSeed(Handle serviceHandle, const FS_IntegrityVerificatioFSPXI_ImportIntegrityVerificationSeed1112,29083
Result FSPXI_GetLegacySubBannerData(Handle serviceHandle, u32 bannerSize, FS_MediaType mediaTypeFSPXI_GetLegacySubBannerData1126,29481
Result FSPXI_GenerateRandomBytes(Handle serviceHandle, void* buf, u32 size)FSPXI_GenerateRandomBytes1144,30023
Result FSPXI_GetFileLastModified(Handle serviceHandle, FSPXI_Archive archive, u64* out, const u1FSPXI_GetFileLastModified1159,30407
Result FSPXI_ReadSpecialFile(Handle serviceHandle, u32* bytesRead, u64 fileOffset, u32 size, voiFSPXI_ReadSpecialFile1178,30950
Result FSPXI_GetSpecialFileSize(Handle serviceHandle, u64* fileSize)FSPXI_GetSpecialFileSize1198,31493
Result FSPXI_StartDeviceMoveAsSource(Handle serviceHandle, FS_DeviceMoveContext* context)FSPXI_StartDeviceMoveAsSource1213,31873
Result FSPXI_StartDeviceMoveAsDestination(Handle serviceHandle, FS_DeviceMoveContext context, boFSPXI_StartDeviceMoveAsDestination1227,32253
Result FSPXI_ReadFileSHA256(Handle serviceHandle, FSPXI_File file, u32* bytesRead, u64 offset, vFSPXI_ReadFileSHA2561241,32656
Result FSPXI_WriteFileSHA256(Handle serviceHandle, FSPXI_File file, u32* bytesWritten, u64 offseFSPXI_WriteFileSHA2561266,33466
Result FSPXI_SetCtrCardLatencyParameter(Handle serviceHandle, u64 latency)FSPXI_SetCtrCardLatencyParameter1292,34328
Result FSPXI_SetPriority(Handle serviceHandle, u32 priority)FSPXI_SetPriority1306,34683
Result FSPXI_SwitchCleanupInvalidSaveData(Handle serviceHandle, bool enable)FSPXI_SwitchCleanupInvalidSaveData1319,34983
Result FSPXI_EnumerateSystemSaveData(Handle serviceHandle, u32* idsWritten, u32 idsSize, u32* idFSPXI_EnumerateSystemSaveData1332,35297
Result FSPXI_ReadNandReport(Handle serviceHandle, void* buffer, u32 size, u32 unk)FSPXI_ReadNandReport1349,35753
Result FSPXI_Unknown0x56(Handle serviceHandle, u32 out[4], FS_Archive archive, FS_Path path)FSPXI_Unknown0x561365,36165

source/services/cam.c,6307
Handle camHandle;camHandle11,224
static int camRefCount;camRefCount12,242
Result camInit(void) {camInit14,267
void camExit(void) {camExit30,586
Result CAMU_StartCapture(u32 port) {CAMU_StartCapture36,706
Result CAMU_StopCapture(u32 port) {CAMU_StopCapture46,956
Result CAMU_IsBusy(bool* busy, u32 port) {CAMU_IsBusy56,1205
Result CAMU_ClearBuffer(u32 port) {CAMU_ClearBuffer67,1495
Result CAMU_GetVsyncInterruptEvent(Handle* event, u32 port) {CAMU_GetVsyncInterruptEvent77,1744
Result CAMU_GetBufferErrorInterruptEvent(Handle* event, u32 port) {CAMU_GetBufferErrorInterruptEvent88,2040
Result CAMU_SetReceiving(Handle* event, void* dst, u32 port, u32 imageSize, s16 transferUnit) {CAMU_SetReceiving99,2342
Result CAMU_IsFinishedReceiving(bool* finishedReceiving, u32 port) {CAMU_IsFinishedReceiving115,2820
Result CAMU_SetTransferLines(u32 port, s16 lines, s16 width, s16 height) {CAMU_SetTransferLines126,3149
Result CAMU_GetMaxLines(s16* maxLines, s16 width, s16 height) {CAMU_GetMaxLines139,3498
Result CAMU_SetTransferBytes(u32 port, u32 bytes, s16 width, s16 height) {CAMU_SetTransferBytes151,3836
Result CAMU_GetTransferBytes(u32* transferBytes, u32 port) {CAMU_GetTransferBytes164,4185
Result CAMU_GetMaxBytes(u32* maxBytes, s16 width, s16 height) {CAMU_GetMaxBytes175,4488
Result CAMU_SetTrimming(u32 port, bool trimming) {CAMU_SetTrimming187,4811
Result CAMU_IsTrimming(bool* trimming, u32 port) {CAMU_IsTrimming198,5098
Result CAMU_SetTrimmingParams(u32 port, s16 xStart, s16 yStart, s16 xEnd, s16 yEnd) {CAMU_SetTrimmingParams209,5400
Result CAMU_GetTrimmingParams(s16* xStart, s16* yStart, s16* xEnd, s16* yEnd, u32 port) {CAMU_GetTrimmingParams223,5781
Result CAMU_SetTrimmingParamsCenter(u32 port, s16 trimWidth, s16 trimHeight, s16 camWidth, s16 cCAMU_SetTrimmingParamsCenter237,6230
Result CAMU_Activate(u32 select) {CAMU_Activate251,6649
Result CAMU_SwitchContext(u32 select, CAMU_Context context) {CAMU_SwitchContext261,6901
Result CAMU_SetExposure(u32 select, s8 exposure) {CAMU_SetExposure272,7202
Result CAMU_SetWhiteBalance(u32 select, CAMU_WhiteBalance whiteBalance) {CAMU_SetWhiteBalance283,7493
Result CAMU_SetWhiteBalanceWithoutBaseUp(u32 select, CAMU_WhiteBalance whiteBalance) {CAMU_SetWhiteBalanceWithoutBaseUp294,7811
Result CAMU_SetSharpness(u32 select, s8 sharpness) {CAMU_SetSharpness305,8142
Result CAMU_SetAutoExposure(u32 select, bool autoExposure) {CAMU_SetAutoExposure316,8436
Result CAMU_IsAutoExposure(bool* autoExposure, u32 select) {CAMU_IsAutoExposure327,8741
Result CAMU_SetAutoWhiteBalance(u32 select, bool autoWhiteBalance) {CAMU_SetAutoWhiteBalance338,9061
Result CAMU_IsAutoWhiteBalance(bool* autoWhiteBalance, u32 select) {CAMU_IsAutoWhiteBalance349,9378
Result CAMU_FlipImage(u32 select, CAMU_Flip flip, CAMU_Context context) {CAMU_FlipImage360,9710
Result CAMU_SetDetailSize(u32 select, s16 width, s16 height, s16 cropX0, s16 cropY0, s16 cropX1,CAMU_SetDetailSize372,10042
Result CAMU_SetSize(u32 select, CAMU_Size size, CAMU_Context context) {CAMU_SetSize389,10539
Result CAMU_SetFrameRate(u32 select, CAMU_FrameRate frameRate) {CAMU_SetFrameRate401,10869
Result CAMU_SetPhotoMode(u32 select, CAMU_PhotoMode photoMode) {CAMU_SetPhotoMode412,11175
Result CAMU_SetEffect(u32 select, CAMU_Effect effect, CAMU_Context context) {CAMU_SetEffect423,11481
Result CAMU_SetContrast(u32 select, CAMU_Contrast contrast) {CAMU_SetContrast435,11819
Result CAMU_SetLensCorrection(u32 select, CAMU_LensCorrection lensCorrection) {CAMU_SetLensCorrection446,12121
Result CAMU_SetOutputFormat(u32 select, CAMU_OutputFormat format, CAMU_Context context) {CAMU_SetOutputFormat457,12447
Result CAMU_SetAutoExposureWindow(u32 select, s16 x, s16 y, s16 width, s16 height) {CAMU_SetAutoExposureWindow469,12797
Result CAMU_SetAutoWhiteBalanceWindow(u32 select, s16 x, s16 y, s16 width, s16 height) {CAMU_SetAutoWhiteBalanceWindow483,13172
Result CAMU_SetNoiseFilter(u32 select, bool noiseFilter) {CAMU_SetNoiseFilter497,13551
Result CAMU_SynchronizeVsyncTiming(u32 select1, u32 select2) {CAMU_SynchronizeVsyncTiming508,13853
Result CAMU_GetLatestVsyncTiming(s64* timing, u32 port, u32 past) {CAMU_GetLatestVsyncTiming519,14156
Result CAMU_GetStereoCameraCalibrationData(CAMU_StereoCameraCalibrationData* data) {CAMU_GetStereoCameraCalibrationData532,14518
Result CAMU_SetStereoCameraCalibrationData(CAMU_StereoCameraCalibrationData data) {CAMU_SetStereoCameraCalibrationData542,14841
Result CAMU_WriteRegisterI2c(u32 select, u16 addr, u16 data) {CAMU_WriteRegisterI2c552,15164
Result CAMU_WriteMcuVariableI2c(u32 select, u16 addr, u16 data) {CAMU_WriteMcuVariableI2c564,15482
Result CAMU_ReadRegisterI2cExclusive(u16* data, u32 select, u16 addr) {CAMU_ReadRegisterI2cExclusive576,15803
Result CAMU_ReadMcuVariableI2cExclusive(u16* data, u32 select, u16 addr) {CAMU_ReadMcuVariableI2cExclusive588,16146
Result CAMU_SetImageQualityCalibrationData(CAMU_ImageQualityCalibrationData data) {CAMU_SetImageQualityCalibrationData600,16492
Result CAMU_GetImageQualityCalibrationData(CAMU_ImageQualityCalibrationData* data) {CAMU_GetImageQualityCalibrationData610,16814
Result CAMU_SetPackageParameterWithoutContext(CAMU_PackageParameterCameraSelect param) {CAMU_SetPackageParameterWithoutContext620,17137
Result CAMU_SetPackageParameterWithContext(CAMU_PackageParameterContext param) {CAMU_SetPackageParameterWithContext630,17467
Result CAMU_SetPackageParameterWithContextDetail(CAMU_PackageParameterContextDetail param) {CAMU_SetPackageParameterWithContextDetail640,17788
Result CAMU_GetSuitableY2rStandardCoefficient(Y2RU_StandardCoefficient* coefficient) {CAMU_GetSuitableY2rStandardCoefficient650,18121
Result CAMU_PlayShutterSound(CAMU_ShutterSoundType sound) {CAMU_PlayShutterSound660,18458
Result CAMU_DriverInitialize(void) {CAMU_DriverInitialize670,18734
Result CAMU_DriverFinalize(void) {CAMU_DriverFinalize679,18967
Result CAMU_GetActivatedCamera(u32* select) {CAMU_GetActivatedCamera688,19198
Result CAMU_GetSleepCamera(u32* select) {CAMU_GetSleepCamera698,19468
Result CAMU_SetSleepCamera(u32 select) {CAMU_SetSleepCamera708,19734
Result CAMU_SetBrightnessSynchronization(bool brightnessSynchronization) {CAMU_SetBrightnessSynchronization718,19992

source/services/mvd.c,2154
Handle mvdstdHandle;mvdstdHandle17,342
static int mvdstdRefCount;mvdstdRefCount18,363
static MVDSTD_Mode mvdstd_mode;mvdstd_mode19,390
static MVDSTD_InputFormat mvdstd_input_type;mvdstd_input_type20,422
static MVDSTD_OutputFormat mvdstd_output_type;mvdstd_output_type21,467
static u32 *mvdstd_workbuf;mvdstd_workbuf22,514
static size_t mvdstd_workbufsize;mvdstd_workbufsize23,542
static u32 mvdstd_videoproc_frameid;mvdstd_videoproc_frameid25,577
static Result MVDSTD_Initialize(u32* buf, u32 bufsize)MVDSTD_Initialize27,615
static Result MVDSTD_Shutdown(void)MVDSTD_Shutdown42,982
static Result MVDSTD_cmd5(s8 unk0, s8 unk1, s8 unk2, u32 unk3)MVDSTD_cmd553,1206
static Result MVDSTD_cmd7(void)MVDSTD_cmd768,1539
static Result MVDSTD_ProcessNALUnit(u32 vaddr_buf, u32 physaddr_buf, u32 size, u32 frameid, u32 MVDSTD_ProcessNALUnit79,1765
static Result MVDSTD_ControlFrameRendering(s8 type)MVDSTD_ControlFrameRendering99,2344
static Result MVDSTD_cmd18(void)MVDSTD_cmd18113,2682
static Result MVDSTD_cmd19(void)MVDSTD_cmd19124,2911
static Result MVDSTD_cmd1a(void)MVDSTD_cmd1a135,3140
static Result MVDSTD_cmd1b(u8 unk)MVDSTD_cmd1b146,3369
static Result MVDSTD_cmd1c(void)MVDSTD_cmd1c158,3618
Result MVDSTD_SetConfig(MVDSTD_Config* config)MVDSTD_SetConfig169,3847
Result mvdstdSetupOutputBuffers(MVDSTD_OutputBuffersEntryList *entrylist, u32 bufsize)mvdstdSetupOutputBuffers186,4292
Result mvdstdOverrideOutputBuffers(void* cur_outdata0, void* cur_outdata1, void* new_outdata0, vmvdstdOverrideOutputBuffers202,4746
Result mvdstdInit(MVDSTD_Mode mode, MVDSTD_InputFormat input_type, MVDSTD_OutputFormat output_tymvdstdInit218,5186
void mvdstdExit(void)mvdstdExit289,7028
void mvdstdGenerateDefaultConfig(MVDSTD_Config*config, u32 input_width, u32 input_height, u32 oumvdstdGenerateDefaultConfig311,7426
Result mvdstdConvertImage(MVDSTD_Config* config)mvdstdConvertImage339,8463
Result mvdstdProcessVideoFrame(void* inbuf_vaddr, size_t size, u32 flag, MVDSTD_ProcessNALUnitOumvdstdProcessVideoFrame353,8738
Result mvdstdRenderVideoFrame(MVDSTD_Config* config, bool wait)mvdstdRenderVideoFrame367,9185

source/services/csnd.c,4115
vu32* csndSharedMem;csndSharedMem15,367
u32 csndSharedMemSize;csndSharedMemSize16,388
u32 csndChannels;csndChannels17,411
u32 csndOffsets[4];csndOffsets18,429
static Handle csndHandle;csndHandle20,450
static Handle csndMutex;csndMutex21,476
static Handle csndSharedMemBlock;csndSharedMemBlock22,501
static int csndRefCount;csndRefCount24,536
static u32 csndCmdBlockSize = 0x2000;csndCmdBlockSize25,561
static u32 csndCmdStartOff;csndCmdStartOff26,599
static u32 csndCmdCurOff;csndCmdCurOff27,627
static Result CSND_Initialize(Handle* mutex, Handle* sharedMem, u32 sharedMemSize, u32* offsets)CSND_Initialize29,654
static Result CSND_Shutdown()CSND_Shutdown46,1102
static Result CSND_ExecuteCommands(u32 offset)CSND_ExecuteCommands58,1335
static Result CSND_AcquireSoundChannels(u32* channelMask)CSND_AcquireSoundChannels71,1606
static Result CSND_ReleaseSoundChannels(void)CSND_ReleaseSoundChannels85,1895
Result CSND_AcquireCapUnit(u32* capUnit)CSND_AcquireCapUnit97,2144
Result CSND_ReleaseCapUnit(u32 capUnit)CSND_ReleaseCapUnit111,2412
Result CSND_FlushDataCache(const void* adr, u32 size)CSND_FlushDataCache124,2677
Result CSND_StoreDataCache(const void* adr, u32 size)CSND_StoreDataCache140,3041
Result CSND_InvalidateDataCache(const void* adr, u32 size)CSND_InvalidateDataCache156,3405
Result CSND_Reset(void)CSND_Reset172,3774
Result csndInit(void)csndInit184,4001
void csndExit(void)csndExit232,5512
u32* csndAddCmd(int cmdid)csndAddCmd252,5875
void csndWriteCmd(int cmdid, u8 *cmdparams)csndWriteCmd287,6494
Result csndExecCmds(bool waitDone)csndExecCmds292,6588
void CSND_SetPlayStateR(u32 channel, u32 value)CSND_SetPlayStateR312,7009
void CSND_SetPlayState(u32 channel, u32 value)CSND_SetPlayState320,7155
void CSND_SetEncoding(u32 channel, u32 value)CSND_SetEncoding328,7300
void CSND_SetBlock(u32 channel, int block, u32 physaddr, u32 size)CSND_SetBlock336,7444
void CSND_SetLooping(u32 channel, u32 value)CSND_SetLooping345,7650
void CSND_SetBit7(u32 channel, bool set)CSND_SetBit7353,7793
void CSND_SetInterp(u32 channel, bool interp)CSND_SetInterp361,7938
void CSND_SetDuty(u32 channel, CSND_DutyCycle duty)CSND_SetDuty369,8091
void CSND_SetTimer(u32 channel, u32 timer)CSND_SetTimer377,8240
void CSND_SetVol(u32 channel, u32 chnVolumes, u32 capVolumes)CSND_SetVol385,8381
void CSND_SetAdpcmState(u32 channel, int block, int sample, int index)CSND_SetAdpcmState394,8574
void CSND_SetAdpcmReload(u32 channel, bool reload)CSND_SetAdpcmReload403,8799
void CSND_SetChnRegs(u32 flags, u32 physaddr0, u32 physaddr1, u32 totalbytesize, u32 chnVolumes,CSND_SetChnRegs411,8957
void CSND_SetChnRegsPSG(u32 flags, u32 chnVolumes, u32 capVolumes, CSND_DutyCycle duty)CSND_SetChnRegsPSG423,9277
void CSND_SetChnRegsNoise(u32 flags, u32 chnVolumes, u32 capVolumes)CSND_SetChnRegsNoise433,9509
void CSND_CapEnable(u32 capUnit, bool enable)CSND_CapEnable442,9700
void CSND_CapSetRepeat(u32 capUnit, bool repeat)CSND_CapSetRepeat450,9846
void CSND_CapSetFormat(u32 capUnit, bool eightbit)CSND_CapSetFormat458,9995
void CSND_CapSetBit2(u32 capUnit, bool set)CSND_CapSetBit2466,10148
void CSND_CapSetTimer(u32 capUnit, u32 timer)CSND_CapSetTimer474,10289
void CSND_CapSetBuffer(u32 capUnit, u32 addr, u32 size)CSND_CapSetBuffer482,10435
void CSND_SetCapRegs(u32 capUnit, u32 flags, u32 addr, u32 size)CSND_SetCapRegs491,10603
Result CSND_SetDspFlags(bool waitDone)CSND_SetDspFlags501,10803
Result CSND_UpdateInfo(bool waitDone)CSND_UpdateInfo507,10899
Result csndPlaySound(int chn, u32 flags, u32 sampleRate, float vol, float pan, void* data0, voidcsndPlaySound513,10994
void csndGetDspFlags(u32* outSemFlags, u32* outIrqFlags)csndGetDspFlags557,12184
static inline u32 chnGetSharedMemIdx(u32 channel)chnGetSharedMemIdx565,12400
CSND_ChnInfo* csndGetChnInfo(u32 channel)csndGetChnInfo570,12516
CSND_CapInfo* csndGetCapInfo(u32 capUnit)csndGetCapInfo576,12681
Result csndGetState(u32 channel, CSND_ChnInfo* out)csndGetState581,12804
Result csndIsPlaying(u32 channel, u8* status)csndIsPlaying594,13097

source/services/ps.c,993
static Handle psHandle;psHandle11,213
static int psRefCount;psRefCount12,237
static Result _psInit(Handle handle)_psInit14,261
Result psInit(void)psInit24,531
Result psInitHandle(Handle handle)psInitHandle29,576
void psExit(void)psExit34,641
Handle psGetSessionHandle(void)psGetSessionHandle41,749
Result PS_SignRsaSha256(u8 *hash, psRSAContext *ctx, u8 *signature)PS_SignRsaSha25646,804
Result PS_VerifyRsaSha256(u8 *hash, psRSAContext *ctx, u8 *signature)PS_VerifyRsaSha25667,1318
Result PS_EncryptDecryptAes(u32 size, u8* in, u8* out, PS_AESAlgorithm aes_algo, PS_AESKeyType kPS_EncryptDecryptAes88,1834
Result PS_EncryptSignDecryptVerifyAesCcm(u8* in, u32 in_size, u8* out, u32 out_size, u32 data_lePS_EncryptSignDecryptVerifyAesCcm113,2466
Result PS_GetLocalFriendCodeSeed(u64* seed)PS_GetLocalFriendCodeSeed139,3243
Result PS_GetDeviceId(u32* device_id)PS_GetDeviceId153,3539
Result PS_GenerateRandomBytes(void* out, size_t len)PS_GenerateRandomBytes167,3806

source/services/news.c,1077
static Handle newsHandle;newsHandle11,215
static int newsRefCount;newsRefCount12,241
static bool useNewsS;useNewsS13,266
Result newsInit(void) {newsInit15,289
void newsExit(void) {newsExit25,588
Result NEWS_AddNotification(const u16* title, u32 titleLength, const u16* message, u32 messageLeNEWS_AddNotification30,687
Result NEWS_GetTotalNotifications(u32* num)NEWS_GetTotalNotifications68,2078
Result NEWS_SetNotificationHeader(u32 news_id, const NotificationHeader* header)NEWS_SetNotificationHeader81,2336
Result NEWS_GetNotificationHeader(u32 news_id, NotificationHeader* header)NEWS_GetNotificationHeader96,2771
Result NEWS_SetNotificationMessage(u32 news_id, const u16* message, u32 size)NEWS_SetNotificationMessage111,3200
Result NEWS_GetNotificationMessage(u32 news_id, u16* message, u32* size)NEWS_GetNotificationMessage126,3599
Result NEWS_SetNotificationImage(u32 news_id, const void* buffer, u32 size)NEWS_SetNotificationImage142,4072
Result NEWS_GetNotificationImage(u32 news_id, void* buffer, u32* size)NEWS_GetNotificationImage157,4469

source/services/frd.c,2840
static Handle frdHandle;frdHandle11,220
static int frdRefCount;frdRefCount12,245
static void frdConvertToUTF8(char* out, const u16* in, size_t max)frdConvertToUTF814,270
static void frdConvertToUTF16(u16* out, const char* in, size_t max)frdConvertToUTF1632,511
Result frdInit(void)frdInit50,761
void frdExit(void)frdExit64,1106
Handle *frdGetSessionHandle(void)frdGetSessionHandle70,1202
Result FRDU_HasLoggedIn(bool *state)FRDU_HasLoggedIn75,1261
Result FRDU_IsOnline(bool *state)FRDU_IsOnline89,1534
Result FRD_Login(Handle event)FRD_Login103,1804
Result FRD_Logout(void)FRD_Logout117,2083
Result FRD_GetMyFriendKey(FriendKey *key)FRD_GetMyFriendKey129,2314
Result FRD_GetMyPreference(bool *isPublicMode, bool *isShowGameName, bool *isShowPlayedGame)FRD_GetMyPreference143,2609
Result FRD_GetMyProfile(FriendProfile *profile)FRD_GetMyProfile159,3079
Result FRD_GetMyScreenName(char *name, size_t max_size)FRD_GetMyScreenName173,3390
Result FRD_GetMyMii(MiiData *mii)FRD_GetMyMii187,3707
Result FRD_GetMyPlayingGame(u64 *titleId)FRD_GetMyPlayingGame201,3992
Result FRD_GetMyFavoriteGame(u64 *titleId)FRD_GetMyFavoriteGame215,4297
Result FRD_GetMyComment(char *comment, size_t max_size)FRD_GetMyComment229,4603
Result FRD_GetFriendKeyList(FriendKey *friendKeyList, u32 *num, u32 offset, u32 size)FRD_GetFriendKeyList243,4923
Result FRD_GetFriendMii(MiiData *miiDataList, const FriendKey *friendKeyList, size_t size)FRD_GetFriendMii261,5343
Result FRD_GetFriendProfile(FriendProfile *profile, const FriendKey *friendKeyList, size_t size)FRD_GetFriendProfile278,5824
Result FRD_GetFriendPlayingGame(GameDescription *desc, const FriendKey *friendKeyList, size_t siFRD_GetFriendPlayingGame297,6319
Result FRD_GetFriendFavouriteGame(GameDescription *desc, const FriendKey *friendKeyList, u32 couFRD_GetFriendFavouriteGame314,6810
Result FRD_IsInFriendList(FriendKey *friendKeyList, bool *isFromList)FRD_IsInFriendList334,7305
Result FRD_UpdateGameModeDescription(const char *desc)FRD_UpdateGameModeDescription350,7740
Result FRD_AttachToEventNotification(Handle event)FRD_AttachToEventNotification368,8149
Result FRD_GetEventNotification(NotificationEvent *event, u32 count, u32 *recievedNotifCount)FRD_GetEventNotification382,8448
Result FRD_PrincipalIdToFriendCode(u32 principalId, u64 *friendCode)FRD_PrincipalIdToFriendCode401,8914
Result FRD_FriendCodeToPrincipalId(u64 friendCode, u32 *principalId)FRD_FriendCodeToPrincipalId416,9276
Result FRD_IsValidFriendCode(u64 friendCode, bool *isValid)FRD_IsValidFriendCode432,9664
Result FRD_SetClientSdkVersion(u32 sdkVer)FRD_SetClientSdkVersion448,10046
Result FRD_AddFriendOnline(Handle event, u32 principalId)FRD_AddFriendOnline462,10356
Result FRD_RemoveFriend(u32 principalId, u64 localFriendCode)FRD_RemoveFriend476,10690

source/services/mcuhwc.c,945
static Handle mcuHwcHandle;mcuHwcHandle9,185
static int mcuHwcRefCount;mcuHwcRefCount10,214
Result mcuHwcInit(void)mcuHwcInit12,244
void mcuHwcExit(void)mcuHwcExit20,463
Result MCUHWC_ReadRegister(u8 reg, void* data, u32 size)MCUHWC_ReadRegister26,574
Result MCUHWC_WriteRegister(u8 reg, const void *data, u32 size)MCUHWC_WriteRegister42,966
Result MCUHWC_GetBatteryVoltage(u8 *voltage)MCUHWC_GetBatteryVoltage58,1365
Result MCUHWC_GetBatteryLevel(u8 *level)MCUHWC_GetBatteryLevel72,1655
Result MCUHWC_SetPowerLedState(powerLedState state)MCUHWC_SetPowerLedState86,1939
Result MCUHWC_SetWifiLedState(bool state)MCUHWC_SetWifiLedState99,2231
Result MCUHWC_GetSoundSliderLevel(u8 *level)MCUHWC_GetSoundSliderLevel112,2513
Result MCUHWC_Get3dSliderLevel(u8 *level)MCUHWC_Get3dSliderLevel126,2801
Result MCUHWC_GetFwVerHigh(u8 *out)MCUHWC_GetFwVerHigh131,2896
Result MCUHWC_GetFwVerLow(u8 *out)MCUHWC_GetFwVerLow145,3175

source/services/fs.c,12061
#define FS_MAX_EXEMPT_ARCHIVE_HANDLES FS_MAX_EXEMPT_ARCHIVE_HANDLES12,239
static Handle fsuHandle;fsuHandle14,281
static int fsuRefCount;fsuRefCount15,306
static FS_Archive fsExemptArchives[FS_MAX_EXEMPT_ARCHIVE_HANDLES];fsExemptArchives17,331
static Handle fsSession(void)fsSession19,399
static Handle fsSessionForArchive(FS_Archive archive)fsSessionForArchive27,553
Result fsInit(void)fsInit38,756
void fsExit(void)fsExit55,1113
void fsUseSession(Handle session)fsUseSession61,1208
void fsEndUseSession(void)fsEndUseSession68,1346
void fsExemptFromSession(FS_Archive archive)fsExemptFromSession74,1434
void fsUnexemptFromSession(FS_Archive archive)fsUnexemptFromSession90,1751
FS_Path fsMakePath(FS_PathType type, const void* path)fsMakePath102,1950
Handle* fsGetSessionHandle(void)fsGetSessionHandle126,2344
Result FSUSER_Control(FS_Action action, void* input, u32 inputSize, void* output, u32 outputSizeFSUSER_Control131,2402
Result FSUSER_Initialize(Handle session)FSUSER_Initialize150,2937
Result FSUSER_OpenFile(Handle* out, FS_Archive archive, FS_Path path, u32 openFlags, u32 attribuFSUSER_OpenFile163,3215
Result FSUSER_OpenFileDirectly(Handle* out, FS_ArchiveID archiveId, FS_Path archivePath, FS_PathFSUSER_OpenFileDirectly186,3821
Result FSUSER_DeleteFile(FS_Archive archive, FS_Path path)FSUSER_DeleteFile212,4582
Result FSUSER_RenameFile(FS_Archive srcArchive, FS_Path srcPath, FS_Archive dstArchive, FS_Path FSUSER_RenameFile231,5069
Result FSUSER_DeleteDirectory(FS_Archive archive, FS_Path path)FSUSER_DeleteDirectory256,5837
Result FSUSER_DeleteDirectoryRecursively(FS_Archive archive, FS_Path path)FSUSER_DeleteDirectoryRecursively275,6329
Result FSUSER_CreateFile(FS_Archive archive, FS_Path path, u32 attributes, u64 fileSize)FSUSER_CreateFile294,6832
Result FSUSER_CreateDirectory(FS_Archive archive, FS_Path path, u32 attributes)FSUSER_CreateDirectory316,7441
Result FSUSER_RenameDirectory(FS_Archive srcArchive, FS_Path srcPath, FS_Archive dstArchive, FS_FSUSER_RenameDirectory336,7974
Result FSUSER_OpenDirectory(Handle* out, FS_Archive archive, FS_Path path)FSUSER_OpenDirectory361,8747
Result FSUSER_OpenArchive(FS_Archive* archive, FS_ArchiveID id, FS_Path path)FSUSER_OpenArchive381,9262
Result FSUSER_ControlArchive(FS_Archive archive, FS_ArchiveAction action, void* input, u32 inputFSUSER_ControlArchive402,9764
Result FSUSER_CloseArchive(FS_Archive archive)FSUSER_CloseArchive423,10414
Result FSUSER_GetFreeBytes(u64* freeBytes, FS_Archive archive)FSUSER_GetFreeBytes439,10771
Result FSUSER_GetCardType(FS_CardType* type)FSUSER_GetCardType455,11184
Result FSUSER_GetSdmcArchiveResource(FS_ArchiveResource* archiveResource)FSUSER_GetSdmcArchiveResource469,11469
Result FSUSER_GetNandArchiveResource(FS_ArchiveResource* archiveResource)FSUSER_GetNandArchiveResource483,11833
Result FSUSER_GetSdmcFatfsError(u32* error)FSUSER_GetSdmcFatfsError497,12197
Result FSUSER_IsSdmcDetected(bool *detected)FSUSER_IsSdmcDetected511,12476
Result FSUSER_IsSdmcWritable(bool *writable)FSUSER_IsSdmcWritable525,12769
Result FSUSER_GetSdmcCid(u8* out, u32 length)FSUSER_GetSdmcCid539,13062
Result FSUSER_GetNandCid(u8* out, u32 length)FSUSER_GetNandCid554,13408
Result FSUSER_GetSdmcSpeedInfo(u32 *speedInfo)FSUSER_GetSdmcSpeedInfo569,13754
Result FSUSER_GetNandSpeedInfo(u32 *speedInfo)FSUSER_GetNandSpeedInfo583,14044
Result FSUSER_GetSdmcLog(u8* out, u32 length)FSUSER_GetSdmcLog597,14334
Result FSUSER_GetNandLog(u8* out, u32 length)FSUSER_GetNandLog612,14680
Result FSUSER_ClearSdmcLog(void)FSUSER_ClearSdmcLog627,15026
Result FSUSER_ClearNandLog(void)FSUSER_ClearNandLog639,15262
Result FSUSER_CardSlotIsInserted(bool* inserted)FSUSER_CardSlotIsInserted651,15498
Result FSUSER_CardSlotPowerOn(bool* status)FSUSER_CardSlotPowerOn665,15795
Result FSUSER_CardSlotPowerOff(bool* status)FSUSER_CardSlotPowerOff679,16083
Result FSUSER_CardSlotGetCardIFPowerStatus(bool* status)FSUSER_CardSlotGetCardIFPowerStatus693,16372
Result FSUSER_CardNorDirectCommand(u8 commandId)FSUSER_CardNorDirectCommand707,16673
Result FSUSER_CardNorDirectCommandWithAddress(u8 commandId, u32 address)FSUSER_CardNorDirectCommandWithAddress720,16949
Result FSUSER_CardNorDirectRead(u8 commandId, u32 size, void* output)FSUSER_CardNorDirectRead734,17271
Result FSUSER_CardNorDirectReadWithAddress(u8 commandId, u32 address, u32 size, void* output)FSUSER_CardNorDirectReadWithAddress750,17678
Result FSUSER_CardNorDirectWrite(u8 commandId, u32 size, const void* input)FSUSER_CardNorDirectWrite767,18131
Result FSUSER_CardNorDirectWriteWithAddress(u8 commandId, u32 address, u32 size, const void* inpFSUSER_CardNorDirectWriteWithAddress783,18543
Result FSUSER_CardNorDirectRead_4xIO(u8 commandId, u32 address, u32 size, void* output)FSUSER_CardNorDirectRead_4xIO800,19001
Result FSUSER_CardNorDirectCpuWriteWithoutVerify(u32 address, u32 size, const void* input)FSUSER_CardNorDirectCpuWriteWithoutVerify817,19448
Result FSUSER_CardNorDirectSectorEraseWithoutVerify(u32 address)FSUSER_CardNorDirectSectorEraseWithoutVerify833,19873
Result FSUSER_GetProductInfo(FS_ProductInfo* info, u32 processId)FSUSER_GetProductInfo846,20163
Result FSUSER_GetProgramLaunchInfo(FS_ProgramInfo* info, u32 processId)FSUSER_GetProgramLaunchInfo861,20517
Result FSUSER_SetCardSpiBaudRate(FS_CardSpiBaudRate baudRate)FSUSER_SetCardSpiBaudRate876,20877
Result FSUSER_SetCardSpiBusMode(FS_CardSpiBusMode busMode)FSUSER_SetCardSpiBusMode889,21165
Result FSUSER_SendInitializeInfoTo9(void)FSUSER_SendInitializeInfoTo9902,21449
Result FSUSER_GetSpecialContentIndex(u16* index, FS_MediaType mediaType, u64 programId, FS_SpeciFSUSER_GetSpecialContentIndex914,21694
Result FSUSER_GetLegacyRomHeader(FS_MediaType mediaType, u64 programId, void* header)FSUSER_GetLegacyRomHeader932,22165
Result FSUSER_GetLegacyBannerData(FS_MediaType mediaType, u64 programId, void* banner)FSUSER_GetLegacyBannerData949,22624
Result FSUSER_CheckAuthorityToAccessExtSaveData(bool* access, FS_MediaType mediaType, u64 saveIdFSUSER_CheckAuthorityToAccessExtSaveData966,23085
Result FSUSER_QueryTotalQuotaSize(u64* quotaSize, u32 directories, u32 files, u32 fileSizeCount,FSUSER_QueryTotalQuotaSize984,23552
Result FSUSER_AbnegateAccessRight(u32 accessRight)FSUSER_AbnegateAccessRight1003,24101
Result FSUSER_DeleteSdmcRoot(void)FSUSER_DeleteSdmcRoot1016,24381
Result FSUSER_DeleteAllExtSaveDataOnNand(void)FSUSER_DeleteAllExtSaveDataOnNand1028,24619
Result FSUSER_InitializeCtrFileSystem(void)FSUSER_InitializeCtrFileSystem1041,24885
Result FSUSER_CreateSeed(void)FSUSER_CreateSeed1053,25132
Result FSUSER_GetFormatInfo(u32* totalSize, u32* directories, u32* files, bool* duplicateData, FFSUSER_GetFormatInfo1065,25366
Result FSUSER_GetLegacyRomHeader2(u32 headerSize, FS_MediaType mediaType, u64 programId, void* hFSUSER_GetLegacyRomHeader21087,26022
Result FSUSER_GetSdmcCtrRootPath(u8* out, u32 length)FSUSER_GetSdmcCtrRootPath1105,26528
Result FSUSER_GetArchiveResource(FS_ArchiveResource* archiveResource, FS_SystemMediaType mediaTyFSUSER_GetArchiveResource1120,26882
Result FSUSER_ExportIntegrityVerificationSeed(FS_IntegrityVerificationSeed* seed)FSUSER_ExportIntegrityVerificationSeed1135,27296
Result FSUSER_ImportIntegrityVerificationSeed(FS_IntegrityVerificationSeed* seed)FSUSER_ImportIntegrityVerificationSeed1149,27688
Result FSUSER_FormatSaveData(FS_ArchiveID archiveId, FS_Path path, u32 blocks, u32 directories, FSUSER_FormatSaveData1163,28080
Result FSUSER_GetLegacySubBannerData(u32 bannerSize, FS_MediaType mediaType, u64 programId, voidFSUSER_GetLegacySubBannerData1186,28755
Result FSUSER_UpdateSha256Context(const void* data, u32 inputSize, u8* hash)FSUSER_UpdateSha256Context1204,29264
Result FSUSER_ReadSpecialFile(u32* bytesRead, u64 fileOffset, u32 size, void* data)FSUSER_ReadSpecialFile1249,30249
Result FSUSER_GetSpecialFileSize(u64* fileSize)FSUSER_GetSpecialFileSize1269,30756
Result FSUSER_CreateExtSaveData(FS_ExtSaveDataInfo info, u32 directories, u32 files, u64 sizeLimFSUSER_CreateExtSaveData1284,31087
Result FSUSER_DeleteExtSaveData(FS_ExtSaveDataInfo info)FSUSER_DeleteExtSaveData1304,31688
Result FSUSER_ReadExtSaveDataIcon(u32* bytesRead, FS_ExtSaveDataInfo info, u32 smdhSize, u8* smdFSUSER_ReadExtSaveDataIcon1317,32004
Result FSUSER_GetExtDataBlockSize(u64* totalBlocks, u64* freeBlocks, u32* blockSize, FS_ExtSaveDFSUSER_GetExtDataBlockSize1335,32504
Result FSUSER_EnumerateExtSaveData(u32* idsWritten, u32 idsSize, FS_MediaType mediaType, u32 idSFSUSER_EnumerateExtSaveData1352,33049
Result FSUSER_CreateSystemSaveData(FS_SystemSaveDataInfo info, u32 totalSize, u32 blockSize, u32FSUSER_CreateSystemSaveData1372,33582
Result FSUSER_DeleteSystemSaveData(FS_SystemSaveDataInfo info)FSUSER_DeleteSystemSaveData1392,34203
Result FSUSER_StartDeviceMoveAsSource(FS_DeviceMoveContext* context)FSUSER_StartDeviceMoveAsSource1405,34528
Result FSUSER_StartDeviceMoveAsDestination(FS_DeviceMoveContext context, bool clear)FSUSER_StartDeviceMoveAsDestination1419,34873
Result FSUSER_SetArchivePriority(FS_Archive archive, u32 priority)FSUSER_SetArchivePriority1433,35242
Result FSUSER_GetArchivePriority(u32* priority, FS_Archive archive)FSUSER_GetArchivePriority1448,35616
Result FSUSER_SetCtrCardLatencyParameter(u64 latency, bool emulateEndurance)FSUSER_SetCtrCardLatencyParameter1464,36006
Result FSUSER_SwitchCleanupInvalidSaveData(bool enable)FSUSER_SwitchCleanupInvalidSaveData1479,36381
Result FSUSER_EnumerateSystemSaveData(u32* idsWritten, u32 idsSize, u32* ids)FSUSER_EnumerateSystemSaveData1492,36661
Result FSUSER_InitializeWithSdkVersion(Handle session, u32 version)FSUSER_InitializeWithSdkVersion1509,37083
Result FSUSER_SetPriority(u32 priority)FSUSER_SetPriority1523,37410
Result FSUSER_GetPriority(u32* priority)FSUSER_GetPriority1536,37676
Result FSUSER_SetSaveDataSecureValue(u64 value, FS_SecureValueSlot slot, u32 titleUniqueId, u8 tFSUSER_SetSaveDataSecureValue1550,37958
Result FSUSER_GetSaveDataSecureValue(bool* exists, u64* value, FS_SecureValueSlot slot, u32 titlFSUSER_GetSaveDataSecureValue1567,38408
Result FSUSER_ControlSecureSave(FS_SecureSaveAction action, void* input, u32 inputSize, void* ouFSUSER_ControlSecureSave1585,38911
Result FSUSER_GetMediaType(FS_MediaType* mediaType)FSUSER_GetMediaType1604,39466
Result FSFILE_Control(Handle handle, FS_FileAction action, void* input, u32 inputSize, void* outFSFILE_Control1618,39768
Result FSFILE_OpenSubFile(Handle handle, Handle* subFile, u64 offset, u64 size)FSFILE_OpenSubFile1637,40317
Result FSFILE_Read(Handle handle, u32* bytesRead, u64 offset, void* buffer, u32 size)FSFILE_Read1655,40751
Result FSFILE_Write(Handle handle, u32* bytesWritten, u64 offset, const void* buffer, u32 size, FSFILE_Write1674,41233
Result FSFILE_GetSize(Handle handle, u64* size)FSFILE_GetSize1694,41762
Result FSFILE_SetSize(Handle handle, u64 size)FSFILE_SetSize1708,42064
Result FSFILE_GetAttributes(Handle handle, u32* attributes)FSFILE_GetAttributes1722,42367
Result FSFILE_SetAttributes(Handle handle, u32 attributes)FSFILE_SetAttributes1736,42667
Result FSFILE_Close(Handle handle)FSFILE_Close1749,42949
Result FSFILE_Flush(Handle handle)FSFILE_Flush1764,43247
Result FSFILE_SetPriority(Handle handle, u32 priority)FSFILE_SetPriority1776,43480
Result FSFILE_GetPriority(Handle handle, u32* priority)FSFILE_GetPriority1789,43756
Result FSFILE_OpenLinkFile(Handle handle, Handle* linkFile)FSFILE_OpenLinkFile1803,44048
Result FSDIR_Control(Handle handle, FS_DirectoryAction action, void* input, u32 inputSize, void*FSDIR_Control1817,44344
Result FSDIR_Read(Handle handle, u32* entriesRead, u32 entryCount, FS_DirectoryEntry* entries)FSDIR_Read1836,44897
Result FSDIR_Close(Handle handle)FSDIR_Close1853,45371
Result FSDIR_SetPriority(Handle handle, u32 priority)FSDIR_SetPriority1868,45668
Result FSDIR_GetPriority(Handle handle, u32* priority)FSDIR_GetPriority1881,45943

source/services/cfgu.c,2378
static Handle cfguHandle;cfguHandle10,195
static int cfguRefCount;cfguRefCount11,221
Result cfguInit(void)cfguInit13,247
void cfguExit(void)cfguExit28,647
Result CFGU_SecureInfoGetRegion(u8* region)CFGU_SecureInfoGetRegion34,746
Result CFGU_GenHashConsoleUnique(u32 appIDSalt, u64* hash)CFGU_GenHashConsoleUnique48,1029
Result CFGU_GetRegionCanadaUSA(u8* value)CFGU_GetRegionCanadaUSA64,1375
Result CFGU_GetSystemModel(u8* model)CFGU_GetSystemModel78,1655
Result CFGU_GetModelNintendo2DS(u8* value)CFGU_GetModelNintendo2DS92,1931
Result CFGU_GetCountryCodeString(u16 code, u16* string)CFGU_GetCountryCodeString106,2212
Result CFGU_GetCountryCodeID(u16 string, u16* code)CFGU_GetCountryCodeID121,2534
Result CFGU_IsNFCSupported(bool* isSupported)CFGU_IsNFCSupported136,2852
Result CFGU_GetConfigInfoBlk2(u32 size, u32 blkID, void* outData)CFGU_GetConfigInfoBlk2152,3231
Result CFG_GetConfigInfoBlk4(u32 size, u32 blkID, void* outData)CFG_GetConfigInfoBlk4168,3617
Result CFG_GetConfigInfoBlk8(u32 size, u32 blkID, void* outData)CFG_GetConfigInfoBlk8184,4006
Result CFG_SetConfigInfoBlk4(u32 size, u32 blkID, const void* inData)CFG_SetConfigInfoBlk4200,4395
Result CFG_SetConfigInfoBlk8(u32 size, u32 blkID, const void* inData)CFG_SetConfigInfoBlk8216,4788
Result CFG_UpdateConfigSavegame(void)CFG_UpdateConfigSavegame232,5181
Result CFGU_GetSystemLanguage(u8* language)CFGU_GetSystemLanguage244,5428
Result CFGI_RestoreLocalFriendCodeSeed(void)CFGI_RestoreLocalFriendCodeSeed249,5531
Result CFGI_RestoreSecureInfo(void)CFGI_RestoreSecureInfo261,5787
Result CFGI_DeleteConfigSavefile(void)CFGI_DeleteConfigSavefile273,6032
Result CFGI_FormatConfig(void)CFGI_FormatConfig285,6280
Result CFGI_ClearParentalControls(void)CFGI_ClearParentalControls297,6520
Result CFGI_VerifySigLocalFriendCodeSeed(void)CFGI_VerifySigLocalFriendCodeSeed309,6769
Result CFGI_VerifySigSecureInfo(void)CFGI_VerifySigSecureInfo321,7025
Result CFGI_SecureInfoGetSerialNumber(u8 *serial)CFGI_SecureInfoGetSerialNumber333,7272
Result CFGI_GetLocalFriendCodeSeedData(u8 *data)CFGI_GetLocalFriendCodeSeedData348,7624
Result CFGI_GetLocalFriendCodeSeed(u64* seed)CFGI_GetLocalFriendCodeSeed363,7977
Result CFGI_GetSecureInfoData(u8 *data)CFGI_GetSecureInfoData377,8281
Result CFGI_GetSecureInfoSignature(u8 *data)CFGI_GetSecureInfoSignature392,8623

source/services/pmapp.c,1469
static Handle pmAppHandle;pmAppHandle10,196
static int pmAppRefcount;pmAppRefcount11,223
Result pmAppInit(void)pmAppInit13,250
void pmAppExit(void)pmAppExit22,461
Handle *pmAppGetSessionHandle(void)pmAppGetSessionHandle28,563
Result PMAPP_LaunchTitle(const FS_ProgramInfo *programInfo, u32 launchFlags)PMAPP_LaunchTitle33,626
Result PMAPP_LaunchFIRMSetParams(u32 firmTidLow, u32 size, const void* in)PMAPP_LaunchFIRMSetParams47,995
Result PMAPP_TerminateCurrentApplication(s64 timeout)PMAPP_TerminateCurrentApplication63,1394
Result PMAPP_TerminateTitle(u64 titleId, s64 timeout)PMAPP_TerminateTitle77,1718
Result PMAPP_TerminateProcess(u32 pid, s64 timeout)PMAPP_TerminateProcess93,2104
Result PMAPP_PrepareForReboot(s64 timeout)PMAPP_PrepareForReboot108,2444
Result PMAPP_GetFIRMLaunchParams(void *out, u32 size)PMAPP_GetFIRMLaunchParams124,2811
Result PMAPP_GetTitleExheaderFlags(ExHeader_Arm11CoreInfo* outCoreInfo, ExHeader_SystemInfoFlagsPMAPP_GetTitleExheaderFlags139,3165
Result PMAPP_SetFIRMLaunchParams(u32 size, const void* in)PMAPP_SetFIRMLaunchParams155,3710
Result PMAPP_SetAppResourceLimit(s64 cpuTime)PMAPP_SetAppResourceLimit170,4068
Result PMAPP_GetAppResourceLimit(s64 *outCpuTime)PMAPP_GetAppResourceLimit187,4428
Result PMAPP_UnregisterProcess(u64 tid)PMAPP_UnregisterProcess205,4832
Result PMAPP_LaunchTitleUpdate(const FS_ProgramInfo *programInfo, const FS_ProgramInfo *programIPMAPP_LaunchTitleUpdate219,5134

source/services/pxidev.c,433
static Handle pxiDevHandle;pxiDevHandle10,197
static int pxiDevRefCount;pxiDevRefCount11,225
Result pxiDevInit(void)pxiDevInit13,253
void pxiDevExit(void)pxiDevExit25,472
Result PXIDEV_SPIMultiWriteRead(PXIDEV_SPIBuffer* header, PXIDEV_SPIBuffer* writeBuffer1, PXIDEVPXIDEV_SPIMultiWriteRead31,577
Result PXIDEV_SPIWriteRead(u32* bytesRead, u64 initialWaitOperation, PXIDEV_SPIBuffer* writeBuffPXIDEV_SPIWriteRead75,2598

source/services/ir.c,1214
static Handle iruHandle;iruHandle11,213
static Handle iruSharedMemHandle;iruSharedMemHandle12,238
static u32 *iruSharedMem;iruSharedMem13,272
static u32 iruSharedMemSize;iruSharedMemSize14,298
static int iruRefCount;iruRefCount15,327
Result iruInit(u32 *sharedmem_addr, u32 sharedmem_size)iruInit17,352
void iruExit(void)iruExit46,952
Handle iruGetServHandle(void)iruGetServHandle58,1144
Result iruSendData(u8 *buf, u32 size, bool wait)iruSendData63,1198
Result iruRecvData(u8 *buf, u32 size, u8 flag, u32 *transfercount, bool wait)iruRecvData75,1395
Result IRU_Initialize(void)IRU_Initialize95,1738
Result IRU_Shutdown(void)IRU_Shutdown108,1982
Result IRU_StartSendTransfer(u8 *buf, u32 size)IRU_StartSendTransfer121,2224
Result IRU_WaitSendTransfer(void)IRU_WaitSendTransfer137,2579
Result IRU_StartRecvTransfer(u32 size, u8 flag)IRU_StartRecvTransfer150,2829
Result IRU_WaitRecvTransfer(u32 *transfercount)IRU_WaitRecvTransfer168,3239
Result IRU_SetBitRate(u8 value)IRU_SetBitRate183,3533
Result IRU_GetBitRate(u8 *out)IRU_GetBitRate197,3806
Result IRU_SetIRLEDState(u32 value)IRU_SetIRLEDState212,4084
Result IRU_GetIRLEDRecvState(u32 *out)IRU_GetIRLEDRecvState226,4356

source/services/hid.c,2473
Handle hidHandle;hidHandle17,382
Handle hidMemHandle;hidMemHandle18,400
Handle hidEvents[5];hidEvents20,422
vu32* hidSharedMem;hidSharedMem22,444
static u32 kOld, kHeld, kDown, kUp, kRepeat;kOld24,465
static u32 kOld, kHeld, kDown, kUp, kRepeat;kHeld24,465
static u32 kOld, kHeld, kDown, kUp, kRepeat;kDown24,465
static u32 kOld, kHeld, kDown, kUp, kRepeat;kUp24,465
static u32 kOld, kHeld, kDown, kUp, kRepeat;kRepeat24,465
static u32 kDelay = 30, kInterval = 15, kCount = 30;kDelay25,510
static u32 kDelay = 30, kInterval = 15, kCount = 30;kInterval25,510
static u32 kDelay = 30, kInterval = 15, kCount = 30;kCount25,510
static touchPosition tPos;tPos26,563
static circlePosition cPos;cPos27,590
static accelVector aVec;aVec28,618
static angularRate gRate;gRate29,643
static int hidRefCount;hidRefCount31,670
static bool usingIrrst;usingIrrst33,695
bool __attribute__((weak)) hidShouldUseIrrst(void)hidShouldUseIrrst35,720
Result hidInit(void)hidInit41,838
void hidExit(void)hidExit85,1902
void hidSetRepeatParameters(u32 delay, u32 interval)hidSetRepeatParameters108,2370
void hidWaitForEvent(HID_Event id, bool nextEvent)hidWaitForEvent116,2500
Result hidWaitForAnyEvent(bool nextEvents, Handle cancelEvent, s64 timeout)hidWaitForAnyEvent127,2732
u32 hidCheckSectionUpdateTime(vu32 *sharedmem_section, u32 id)hidCheckSectionUpdateTime157,3454
void hidScanInput(void)hidScanInput172,3710
u32 hidKeysHeld(void)hidKeysHeld237,4998
u32 hidKeysDown(void)hidKeysDown242,5040
u32 hidKeysDownRepeat(void)hidKeysDownRepeat247,5082
u32 hidKeysUp(void)hidKeysUp254,5162
void hidTouchRead(touchPosition* pos)hidTouchRead259,5200
void hidCircleRead(circlePosition* pos)hidCircleRead264,5266
void hidAccelRead(accelVector* vector)hidAccelRead269,5334
void hidGyroRead(angularRate* rate)hidGyroRead274,5407
Result HIDUSER_GetHandles(Handle* outMemHandle, Handle *eventpad0, Handle *eventpad1, Handle *evHIDUSER_GetHandles279,5474
Result HIDUSER_EnableAccelerometer(void)HIDUSER_EnableAccelerometer298,6043
Result HIDUSER_DisableAccelerometer(void)HIDUSER_DisableAccelerometer309,6273
Result HIDUSER_EnableGyroscope(void)HIDUSER_EnableGyroscope320,6504
Result HIDUSER_DisableGyroscope(void)HIDUSER_DisableGyroscope331,6730
Result HIDUSER_GetGyroscopeRawToDpsCoefficient(float *coeff)HIDUSER_GetGyroscopeRawToDpsCoefficient342,6957
Result HIDUSER_GetSoundVolume(u8 *volume)HIDUSER_GetSoundVolume355,7239

source/services/gspgpu.c,3794
#define GSP_EVENT_STACK_SIZE GSP_EVENT_STACK_SIZE13,277
static Handle gspGpuHandle;gspGpuHandle15,314
static int gspRefCount;gspRefCount16,342
static Handle gspSharedMemHandle;gspSharedMemHandle18,367
static void* gspSharedMem;gspSharedMem19,401
static u8 gspThreadId;gspThreadId20,428
static bool gspGpuRight;gspGpuRight22,452
static Handle gspEvent;gspEvent24,478
static Thread gspEventThread;gspEventThread25,502
static volatile bool gspRunEvents;gspRunEvents26,532
static s32 gspLastEvent;gspLastEvent28,568
static LightEvent gspEvents[GSPGPU_EVENT_MAX];gspEvents29,593
static ThreadFunc gspEventCb[GSPGPU_EVENT_MAX];gspEventCb30,640
static void* gspEventCbData[GSPGPU_EVENT_MAX];gspEventCbData31,688
static bool gspEventCbOneShot[GSPGPU_EVENT_MAX];gspEventCbOneShot32,735
static inline void gspWriteGxReg(u32 offset, u32 data)gspWriteGxReg36,829
static inline void gspWriteGxRegMasked(u32 offset, u32 data, u32 mask)gspWriteGxRegMasked41,939
static void gspHardwareInit(void)gspHardwareInit47,1165
Result gspInit(void)gspInit156,4583
void gspExit(void)gspExit202,5813
bool gspHasGpuRight(void)gspHasGpuRight224,6342
void gspPresentBuffer(unsigned screen, unsigned swap, const void* fb_a, const void* fb_b, u32 stgspPresentBuffer229,6394
	{__anond884797f010a247,7001
		s32 header;header248,7004
		struct { u8 swap, update; };__anond884797f0208249,7018
		struct { u8 swap, update; };swap249,7018
		struct { u8 swap, update; };update249,7018
void gspSetEventCallback(GSPGPU_Event id, ThreadFunc cb, void* data, bool oneShot)gspSetEventCallback260,7178
void gspWaitForEvent(GSPGPU_Event id, bool nextEvent)gspWaitForEvent269,7385
GSPGPU_Event gspWaitForAnyEvent(void)gspWaitForAnyEvent280,7618
static int popInterrupt(void)popInterrupt300,7936
		union {__anond884797f030a306,8064
			struct {__anond884797f0408307,8074
				u8 cur;cur308,8086
				u8 count;count309,8098
				u8 err;err310,8112
				u8 unused;unused311,8124
			u32 as_u32;as_u32313,8145
__attribute__((weak)) void gxCmdQueueInterrupt(GSPGPU_Event irq)gxCmdQueueInterrupt338,8728
void gspEventThreadMain(void *arg)gspEventThreadMain342,8798
Result gspSubmitGxCommand(const u32 gxCommand[0x8])gspSubmitGxCommand382,9868
Result GSPGPU_WriteHWRegs(u32 regAddr, const u32* data, u8 size)GSPGPU_WriteHWRegs413,10730
Result GSPGPU_WriteHWRegsWithMask(u32 regAddr, const u32* data, u8 datasize, const u32* maskdataGSPGPU_WriteHWRegsWithMask430,11122
Result GSPGPU_ReadHWRegs(u32 regAddr, u32* data, u8 size)GSPGPU_ReadHWRegs449,11645
Result GSPGPU_SetBufferSwap(u32 screenid, const GSPGPU_FramebufferInfo*framebufinfo)GSPGPU_SetBufferSwap466,12038
Result GSPGPU_FlushDataCache(const void* adr, u32 size)GSPGPU_FlushDataCache480,12408
Result GSPGPU_InvalidateDataCache(const void* adr, u32 size)GSPGPU_InvalidateDataCache495,12761
Result GSPGPU_SetLcdForceBlack(u8 flags)GSPGPU_SetLcdForceBlack511,13132
Result GSPGPU_TriggerCmdReqQueue(void)GSPGPU_TriggerCmdReqQueue523,13381
Result GSPGPU_RegisterInterruptRelayQueue(Handle eventHandle, u32 flags, Handle* outMemHandle, uGSPGPU_RegisterInterruptRelayQueue534,13610
Result GSPGPU_UnregisterInterruptRelayQueue(void)GSPGPU_UnregisterInterruptRelayQueue551,14075
Result GSPGPU_AcquireRight(u8 flags)GSPGPU_AcquireRight562,14317
Result GSPGPU_ReleaseRight(void)GSPGPU_ReleaseRight579,14707
Result GSPGPU_ImportDisplayCaptureInfo(GSPGPU_CaptureInfo* captureinfo)GSPGPU_ImportDisplayCaptureInfo593,15008
Result GSPGPU_SaveVramSysArea(void)GSPGPU_SaveVramSysArea608,15347
Result GSPGPU_RestoreVramSysArea(void)GSPGPU_RestoreVramSysArea619,15575
Result GSPGPU_ResetGpuCore(void)GSPGPU_ResetGpuCore630,15806
Result GSPGPU_SetLedForceOff(bool disable)GSPGPU_SetLedForceOff641,16033

source/services/cfgnor.c,535
Handle cfgnorHandle;cfgnorHandle9,164
Result cfgnorInit(u8 value)cfgnorInit11,186
void cfgnorExit(void)cfgnorExit19,403
Result cfgnorDumpFlash(u32 *buf, u32 size)cfgnorDumpFlash29,532
Result cfgnorWriteFlash(u32 *buf, u32 size)cfgnorWriteFlash46,822
Result CFGNOR_Initialize(u8 value)CFGNOR_Initialize63,1107
Result CFGNOR_Shutdown(void)CFGNOR_Shutdown76,1366
Result CFGNOR_ReadData(u32 offset, u32 *buf, u32 size)CFGNOR_ReadData88,1594
Result CFGNOR_WriteData(u32 offset, u32 *buf, u32 size)CFGNOR_WriteData104,1960

source/services/soc/soc_select.c,110
int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeoselect7,106

source/services/soc/soc_setsockopt.c,105
int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen)setsockopt6,89

source/services/soc/soc_gethostbyaddr.c,365
#define MAX_HOSTENT_RESULTS MAX_HOSTENT_RESULTS4,44
static struct hostent SOC_hostent;SOC_hostent5,75
static char           *SOC_hostent_results[MAX_HOSTENT_RESULTS+1];SOC_hostent_results6,110
static char           *SOC_hostent_alias = NULL;SOC_hostent_alias7,177
struct hostent* gethostbyaddr(const void *addr, socklen_t len, int type)gethostbyaddr9,227

source/services/soc/soc_hstrerror.c,282
{__anon5d5ab48c01085,64
	int        err;err6,66
	const char *str;str7,83
} error_strings[] =error_strings8,101
static const size_t num_error_strings = sizeof(error_strings)/sizeof(error_strings[0]);num_error_strings16,411
const char* hstrerror(int err) {hstrerror18,500

source/services/soc/soc_init.c,466
soc_devoptab =soc_devoptab12,421
static Result SOCU_Initialize(Handle memhandle, u32 memsize)SOCU_Initialize41,1065
static Result SOCU_Shutdown(void)SOCU_Shutdown61,1479
Result socInit(u32* context_addr, u32 context_size)socInit77,1744
Result socExit(void)socExit121,2580
soc_open(struct _reent *r,soc_open142,2849
soc_close(struct _reent *r,soc_close153,3050
soc_write(struct _reent *r,soc_write184,3561
soc_read(struct _reent *r,soc_read194,3778

source/services/soc/soc_recv.c,69
ssize_t recv(int sockfd, void *buf, size_t len, int flags)recv4,49

source/services/soc/soc_shutdownsockets.c,57
int SOCU_ShutdownSockets(void)SOCU_ShutdownSockets5,70

source/services/soc/soc_herror.c,41
void herror(const char *s) {herror5,63

source/services/soc/soc_fcntl.c,251
#define O_NONBLOCK_3DS O_NONBLOCK_3DS7,104
#define ALL_3DS ALL_3DS9,132
#define ALL_FLAGS ALL_FLAGS10,167
static int from_3ds(int flags)from_3ds12,199
static int to_3ds(int flags)to_3ds23,401
int fcntl(int sockfd, int cmd, ...)fcntl34,601

source/services/soc/soc_getnetworkopt.c,114
int SOCU_GetNetworkOpt(int level, NetworkOpt optname, void * optval, socklen_t * optlen)SOCU_GetNetworkOpt6,100

source/services/soc/soc_closesocket.c,45
int closesocket(int sockfd)closesocket6,88

source/services/soc/soc_getpeername.c,88
int getpeername(int sockfd, struct sockaddr *addr, socklen_t *addrlen)getpeername6,89

source/services/soc/soc_connect.c,85
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen)connect6,89

source/services/soc/soc_sockatmark.c,43
int sockatmark(int sockfd)sockatmark6,89

source/services/soc/soc_listen.c,56
int listen(int sockfd, int max_connections)listen6,89

source/services/soc/soc_gethostbyname.c,341
#define MAX_HOSTENT_RESULTS MAX_HOSTENT_RESULTS5,65
static struct hostent SOC_hostent;SOC_hostent6,96
static char           *SOC_hostent_results[MAX_HOSTENT_RESULTS+1];SOC_hostent_results7,131
static char           *SOC_hostent_alias = NULL;SOC_hostent_alias8,198
struct hostent* gethostbyname(const char *name)gethostbyname10,248

source/services/soc/soc_gethostname.c,62
int gethostname(char *name, size_t namelen)gethostname8,357

source/services/soc/soc_ioctl.c,52
int ioctl(int sockfd, int request, ...)ioctl7,106

source/services/soc/soc_getaddrinfo.c,944
#define DEFAULT_NUM_ADDRINFO DEFAULT_NUM_ADDRINFO8,132
typedef struct addrinfo_3ds_t addrinfo_3ds_t;addrinfo_3ds_t10,164
struct addrinfo_3ds_taddrinfo_3ds_t11,210
	s32                     ai_flags;ai_flags13,234
	s32                     ai_family;ai_family14,269
	s32                     ai_socktype;ai_socktype15,305
	s32                     ai_protocol;ai_protocol16,343
	u32                     ai_addrlen;ai_addrlen17,381
	char                    ai_canonname[256];ai_canonname18,418
	struct sockaddr_storage ai_addr;ai_addr19,462
void freeaddrinfo(struct addrinfo *ai)freeaddrinfo22,500
static struct addrinfo * buffer2addrinfo(addrinfo_3ds_t * entry)buffer2addrinfo33,654
static int getaddrinfo_detail(const char *node, const char *service, const struct addrinfo *hintgetaddrinfo_detail62,1623
int getaddrinfo(const char *node, const char *service, const struct addrinfo *hints, struct addrgetaddrinfo138,3415

source/services/soc/soc_bind.c,79
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)bind6,89

source/services/soc/soc_inet_ntoa.c,100
static char buffer[INET_ADDRSTRLEN];buffer5,72
char* inet_ntoa(struct in_addr in)inet_ntoa7,110

source/services/soc/soc_send.c,75
ssize_t send(int sockfd, const void *buf, size_t len, int flags)send4,49

source/services/soc/soc_inet_aton.c,66
int inet_aton(const char *cp, struct in_addr *inp)inet_aton6,87

source/services/soc/soc_accept.c,78
int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen)accept6,89

source/services/soc/soc_inet_addr.c,51
in_addr_t inet_addr(const char *cp)inet_addr4,48

source/services/soc/soc_addglobalsocket.c,63
int SOCU_AddGlobalSocket(int sockfd)SOCU_AddGlobalSocket5,70

source/services/soc/soc_inet_pton.c,169
static int inet_pton4(const char *restrict src, void *restrict dst)inet_pton47,88
int inet_pton(int af, const char *restrict src, void *restrict dst)inet_pton17,298

source/services/soc/soc_getnameinfo.c,114
int getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, socklen_t hostlen, char getnameinfo6,89

source/services/soc/soc_common.h,75
#define SYNC_ERROR SYNC_ERROR12,200
soc_get_fd(int fd)soc_get_fd18,301

source/services/soc/soc_recvfrom.c,467
ssize_t socuipc_cmd7(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, sosocuipc_cmd76,89
ssize_t socuipc_cmd8(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, sosocuipc_cmd864,1370
ssize_t soc_recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, sosoc_recvfrom124,2742
ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklerecvfrom131,3012

source/services/soc/soc_socket.c,60
int socket(int domain, int type, int protocol)socket8,140

source/services/soc/soc_inet_ntop.c,217
static const char *inet_ntop4(const void *restrict src, char *restrict dst, socklen_t size)inet_ntop46,68
const char *inet_ntop(int af, const void *restrict src, char *restrict dst, socklen_t size)inet_ntop19,338

source/services/soc/soc_gai_strerror.c,54
const char *gai_strerror(int ecode)gai_strerror3,20

source/services/soc/soc_poll.c,66
int poll(struct pollfd *fds, nfds_t nfds, int timeout)poll8,122

source/services/soc/soc_common.c,312
Handle	SOCU_handle = 0;SOCU_handle5,71
Handle	socMemhandle = 0;socMemhandle6,95
int h_errno = 0;h_errno7,120
static u8 _net_error_code_map[] = {_net_error_code_map10,194
#define NET_UNKNOWN_ERROR_OFFSET	NET_UNKNOWN_ERROR_OFFSET90,1188
s32 _net_convert_error(s32 sock_retval)_net_convert_error93,1324

source/services/soc/soc_shutdown.c,58
int shutdown(int sockfd, int shutdown_type)shutdown6,89

source/services/soc/soc_getsockname.c,88
int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen)getsockname6,89

source/services/soc/soc_getipinfo.c,112
int SOCU_GetIPInfo(struct in_addr *ip, struct in_addr *netmask, struct in_addr *broadcast)SOCU_GetIPInfo6,100

source/services/soc/soc_gethostid.c,36
long gethostid(void)gethostid5,65

source/services/soc/soc_getsockopt.c,100
int getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen)getsockopt6,89

source/services/soc/soc_closesockets.c,51
int SOCU_CloseSockets(void)SOCU_CloseSockets5,70

source/services/soc/soc_sendto.c,463
ssize_t socuipc_cmd9(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *socuipc_cmd96,89
ssize_t socuipc_cmda(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *socuipc_cmda60,1224
ssize_t soc_sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *desoc_sendto114,2354
ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_asendto121,2636

source/services/y2r.c,3975
Handle y2rHandle;y2rHandle11,214
static int y2rRefCount;y2rRefCount12,232
Result y2rInit(void)y2rInit14,257
void y2rExit(void)y2rExit30,575
Result Y2RU_SetInputFormat(Y2RU_InputFormat format)Y2RU_SetInputFormat37,695
Result Y2RU_GetInputFormat(Y2RU_InputFormat* format)Y2RU_GetInputFormat48,964
Result Y2RU_SetOutputFormat(Y2RU_OutputFormat format)Y2RU_SetOutputFormat59,1242
Result Y2RU_GetOutputFormat(Y2RU_OutputFormat* format)Y2RU_GetOutputFormat70,1513
Result Y2RU_SetRotation(Y2RU_Rotation rotation)Y2RU_SetRotation81,1793
Result Y2RU_GetRotation(Y2RU_Rotation* rotation)Y2RU_GetRotation92,2060
Result Y2RU_SetBlockAlignment(Y2RU_BlockAlignment alignment)Y2RU_SetBlockAlignment103,2336
Result Y2RU_GetBlockAlignment(Y2RU_BlockAlignment* alignment)Y2RU_GetBlockAlignment114,2617
Result Y2RU_SetSpacialDithering(bool enable)Y2RU_SetSpacialDithering125,2907
Result Y2RU_GetSpacialDithering(bool* enabled)Y2RU_GetSpacialDithering136,3169
Result Y2RU_SetTemporalDithering(bool enable)Y2RU_SetTemporalDithering147,3442
Result Y2RU_GetTemporalDithering(bool* enabled)Y2RU_GetTemporalDithering158,3705
Result Y2RU_SetTransferEndInterrupt(bool should_interrupt)Y2RU_SetTransferEndInterrupt169,3979
Result Y2RU_GetTransferEndInterrupt(bool* should_interrupt)Y2RU_GetTransferEndInterrupt180,4265
Result Y2RU_GetTransferEndEvent(Handle* end_event)Y2RU_GetTransferEndEvent191,4560
Result Y2RU_SetSendingY(const void* src_buf, u32 image_size, s16 transfer_unit, s16 transfer_gapY2RU_SetSendingY209,4910
Result Y2RU_SetSendingU(const void* src_buf, u32 image_size, s16 transfer_unit, s16 transfer_gapY2RU_SetSendingU225,5386
Result Y2RU_SetSendingV(const void* src_buf, u32 image_size, s16 transfer_unit, s16 transfer_gapY2RU_SetSendingV241,5862
Result Y2RU_SetSendingYUYV(const void* src_buf, u32 image_size, s16 transfer_unit, s16 transfer_Y2RU_SetSendingYUYV257,6338
Result Y2RU_IsDoneSendingYUYV(bool* is_done)Y2RU_IsDoneSendingYUYV273,6817
Result Y2RU_IsDoneSendingY(bool* is_done)Y2RU_IsDoneSendingY284,7090
Result Y2RU_IsDoneSendingU(bool* is_done)Y2RU_IsDoneSendingU295,7360
Result Y2RU_IsDoneSendingV(bool* is_done)Y2RU_IsDoneSendingV306,7630
Result Y2RU_SetReceiving(void* dst_buf, u32 image_size, s16 transfer_unit, s16 transfer_gap)Y2RU_SetReceiving317,7900
Result Y2RU_IsDoneReceiving(bool* is_done)Y2RU_IsDoneReceiving333,8371
Result Y2RU_SetInputLineWidth(u16 line_width)Y2RU_SetInputLineWidth344,8642
Result Y2RU_GetInputLineWidth(u16* line_width)Y2RU_GetInputLineWidth355,8911
Result Y2RU_SetInputLines(u16 num_lines)Y2RU_SetInputLines366,9191
Result Y2RU_GetInputLines(u16* num_lines)Y2RU_GetInputLines377,9454
Result Y2RU_SetCoefficients(const Y2RU_ColorCoefficients* coefficients)Y2RU_SetCoefficients388,9728
Result Y2RU_GetCoefficients(Y2RU_ColorCoefficients* coefficients)Y2RU_GetCoefficients399,10065
Result Y2RU_SetStandardCoefficient(Y2RU_StandardCoefficient coefficient)Y2RU_SetStandardCoefficient410,10395
Result Y2RU_GetStandardCoefficient(Y2RU_ColorCoefficients* coefficients, Y2RU_StandardCoefficienY2RU_GetStandardCoefficient421,10692
Result Y2RU_SetAlpha(u16 alpha)Y2RU_SetAlpha433,11097
Result Y2RU_GetAlpha(u16* alpha)Y2RU_GetAlpha444,11347
Result Y2RU_SetDitheringWeightParams(const Y2RU_DitheringWeightParams* params)Y2RU_SetDitheringWeightParams456,11609
Result Y2RU_GetDitheringWeightParams(Y2RU_DitheringWeightParams* params)Y2RU_GetDitheringWeightParams467,11951
Result Y2RU_StartConversion(void)Y2RU_StartConversion478,12284
Result Y2RU_StopConversion(void)Y2RU_StopConversion488,12516
Result Y2RU_IsBusyConversion(bool* is_busy)Y2RU_IsBusyConversion498,12747
Result Y2RU_SetConversionParams(const Y2RU_ConversionParams* params)Y2RU_SetConversionParams509,13019
Result Y2RU_PingProcess(u8* ping)Y2RU_PingProcess520,13346
Result Y2RU_DriverInitialize(void)Y2RU_DriverInitialize531,13602
Result Y2RU_DriverFinalize(void)Y2RU_DriverFinalize541,13835

source/services/ptmu.c,578
static Handle ptmuHandle;ptmuHandle10,195
static int ptmuRefCount;ptmuRefCount11,221
Result ptmuInit(void)ptmuInit13,247
void ptmuExit(void)ptmuExit21,447
Result PTMU_GetShellState(u8 *out)PTMU_GetShellState27,546
Result PTMU_GetBatteryLevel(u8 *out)PTMU_GetBatteryLevel41,815
Result PTMU_GetBatteryChargeState(u8 *out)PTMU_GetBatteryChargeState55,1086
Result PTMU_GetPedometerState(u8 *out)PTMU_GetPedometerState69,1363
Result PTMU_GetTotalStepCount(u32 *steps)PTMU_GetTotalStepCount83,1636
Result PTMU_GetAdapterState(bool *out)PTMU_GetAdapterState97,1903

source/services/loader.c,584
static Handle loaderHandle;loaderHandle9,174
static int loaderRefCount;loaderRefCount10,202
Result loaderInit(void)loaderInit12,230
void loaderExit(void)loaderExit21,445
Result LOADER_LoadProcess(Handle* process, u64 programHandle)LOADER_LoadProcess27,550
Result LOADER_RegisterProgram(u64* programHandle, const FS_ProgramInfo *programInfo, const FS_PrLOADER_RegisterProgram43,918
Result LOADER_UnregisterProgram(u64 programHandle)LOADER_UnregisterProgram59,1429
Result LOADER_GetProgramInfo(ExHeader_Info* exheaderInfo, u64 programHandle)LOADER_GetProgramInfo73,1762

source/services/mic.c,1416
static Handle micHandle;micHandle10,194
static int micRefCount;micRefCount11,219
static u8* micSharedMem;micSharedMem13,244
static u32 micSharedMemSize;micSharedMemSize14,269
static Handle micSharedMemHandle;micSharedMemHandle15,298
Result micInit(u8* buffer, u32 bufferSize)micInit17,333
void micExit(void)micExit41,938
u32 micGetSampleDataSize(void)micGetSampleDataSize63,1266
u32 micGetLastSampleOffset(void)micGetLastSampleOffset68,1332
Result MICU_MapSharedMem(u32 size, Handle handle)MICU_MapSharedMem74,1453
Result MICU_UnmapSharedMem(void)MICU_UnmapSharedMem87,1779
Result MICU_StartSampling(MICU_Encoding encoding, MICU_SampleRate sampleRate, u32 offset, u32 siMICU_StartSampling97,2008
Result MICU_AdjustSampling(MICU_SampleRate sampleRate)MICU_AdjustSampling112,2422
Result MICU_StopSampling(void)MICU_StopSampling123,2698
Result MICU_IsSampling(bool* sampling)MICU_IsSampling133,2925
Result MICU_GetEventHandle(Handle* handle)MICU_GetEventHandle144,3205
Result MICU_SetGain(u8 gain)MICU_SetGain155,3478
Result MICU_GetGain(u8* gain)MICU_GetGain166,3722
Result MICU_SetPower(bool power)MICU_SetPower177,3985
Result MICU_GetPower(bool* power)MICU_GetPower188,4234
Result MICU_SetClamp(bool clamp)MICU_SetClamp199,4503
Result MICU_GetClamp(bool* clamp)MICU_GetClamp210,4752
Result MICU_SetAllowShellClosed(bool allowShellClosed)MICU_SetAllowShellClosed221,5021

source/services/ptmsysm.c,1166
static Handle ptmSysmHandle;ptmSysmHandle10,198
static int ptmSysmRefCount;ptmSysmRefCount11,227
Result ptmSysmInit(void)ptmSysmInit13,256
void ptmSysmExit(void)ptmSysmExit21,471
Result PTMSYSM_RequestSleep(void)PTMSYSM_RequestSleep27,579
Result PTMSYSM_ReplyToSleepQuery(bool deny)PTMSYSM_ReplyToSleepQuery38,822
Result PTMSYSM_NotifySleepPreparationComplete(s32 ackValue)PTMSYSM_NotifySleepPreparationComplete50,1136
Result PTMSYSM_SetWakeEvents(const PtmSleepConfig *sleepConfig)PTMSYSM_SetWakeEvents62,1470
Result PTMSYSM_GetWakeReason(PtmSleepConfig *outSleepConfig)PTMSYSM_GetWakeReason74,1838
Result PTMSYSM_Awaken(void)PTMSYSM_Awaken85,2168
Result PTMSYSM_CheckNew3DS(void)PTMSYSM_CheckNew3DS96,2405
Result PTMSYSM_ConfigureNew3DSCPU(u8 value)PTMSYSM_ConfigureNew3DSCPU107,2645
Result PTMSYSM_ShutdownAsync(u64 timeout)PTMSYSM_ShutdownAsync120,2918
Result PTMSYSM_RebootAsync(u64 timeout)PTMSYSM_RebootAsync134,3262
Result PTMSYSM_InvalidateSystemTime(void)PTMSYSM_InvalidateSystemTime147,3588
Result PTMSYSM_GetRtcTime(s64 *outMsY2k)PTMSYSM_GetRtcTime158,3839
Result PTMSYSM_SetRtcTime(s64 msY2k)PTMSYSM_SetRtcTime169,4122

source/services/fsreg.c,798
static Handle fsRegHandle;fsRegHandle10,197
static int fsRegRefCount;fsRegRefCount11,224
Result fsRegInit(void)fsRegInit13,251
void fsRegExit(void)fsRegExit25,469
Handle *fsRegGetSessionHandle(void)fsRegGetSessionHandle31,571
Result FSREG_Register(u32 pid, u64 programHandle, const FS_ProgramInfo *programInfo, const ExHeaFSREG_Register36,634
Result FSREG_Unregister(u32 pid)FSREG_Unregister53,1191
Result FSREG_GetProgramInfo(ExHeader_Info *exheaderInfos, u32 maxNumEntries, u64 programHandle)FSREG_GetProgramInfo66,1447
Result FSREG_LoadProgram(u64 *programHandle, const FS_ProgramInfo *programInfo)FSREG_LoadProgram87,2128
Result FSREG_UnloadProgram(u64 programHandle)FSREG_UnloadProgram101,2525
Result FSREG_CheckHostLoadId(u64 programHandle)FSREG_CheckHostLoadId115,2850

source/services/qtm.c,525
Handle qtmHandle;qtmHandle11,214
static int qtmRefCount;qtmRefCount12,232
Result qtmInit(void)qtmInit14,257
void qtmExit(void)qtmExit27,600
bool qtmCheckInitialized(void)qtmCheckInitialized33,696
bool qtmCheckHeadFullyDetected(QTM_HeadTrackingInfo *info)qtmCheckHeadFullyDetected38,755
Result qtmConvertCoordToScreen(QTM_HeadTrackingInfoCoord *coord, float *screen_width, float *scrqtmConvertCoordToScreen46,932
Result QTM_GetHeadTrackingInfo(u64 val, QTM_HeadTrackingInfo* out)QTM_GetHeadTrackingInfo65,1454

source/services/sslc.c,4754
Handle __sslc_servhandle;__sslc_servhandle14,264
static int __sslc_refcount;__sslc_refcount15,290
Result sslcInit(Handle session_handle)sslcInit19,360
void sslcExit(void)sslcExit34,733
static Result sslcipc_Initialize(void)sslcipc_Initialize42,867
static Result sslcipc_CreateContext(sslcContext *context, int sockfd, u32 input_opt, const char sslcipc_CreateContext55,1138
static Result sslcipc_CreateCertChain(u32 type, u32 *contexthandle)sslcipc_CreateCertChain76,1677
static Result sslcipc_DestroyCertChain(u32 type, u32 contexthandle)sslcipc_DestroyCertChain91,2014
static Result sslcipc_CertChainAddCert(u32 type, u32 contexthandle, const u8 *cert, u32 certsizesslcipc_CertChainAddCert104,2315
static Result sslcipc_CertChainAddDefaultCert(u32 type, u32 contexthandle, u8 certID, u32 *cert_sslcipc_CertChainAddDefaultCert123,2855
static Result sslcipc_CertChainRemoveCert(u32 type, u32 contexthandle, u32 cert_contexthandle)sslcipc_CertChainRemoveCert140,3307
Result sslcOpenClientCertContext(const u8 *cert, u32 certsize, const u8 *key, u32 keysize, u32 *sslcOpenClientCertContext154,3666
Result sslcOpenDefaultClientCertContext(SSLC_DefaultClientCert certID, u32 *ClientCert_contexthasslcOpenDefaultClientCertContext175,4244
Result sslcCloseClientCertContext(u32 ClientCert_contexthandle)sslcCloseClientCertContext191,4634
Result sslcSeedRNG(void)sslcSeedRNG204,4931
Result sslcGenerateRandomData(u8 *buf, u32 size)sslcGenerateRandomData216,5154
static Result sslcipc_InitializeConnectionSession(sslcContext *context)sslcipc_InitializeConnectionSession231,5487
static Result sslcipc_StartConnection(sslcContext *context)sslcipc_StartConnection245,5827
static Result sslcipc_StartConnectionGetOut(sslcContext *context, int *internal_retval, u32 *outsslcipc_StartConnectionGetOut258,6119
static Result sslcipc_DataTransfer(sslcContext *context, const void *buf, size_t len, u32 type)sslcipc_DataTransfer278,6568
static Result sslcipc_ContextSetValue(sslcContext *context, u32 type, u32 value)sslcipc_ContextSetValue300,7132
Result sslcContextGetProtocolCipher(sslcContext *context, char *outprotocols, u32 outprotocols_msslcContextGetProtocolCipher316,7496
Result sslcContextGetState(sslcContext *context, u32 *out)sslcContextGetState336,8129
static Result sslcipc_DestroyContext(sslcContext *context)sslcipc_DestroyContext352,8472
static Result sslcipc_ContextInitSharedmem(sslcContext *context, u32 size)sslcipc_ContextInitSharedmem365,8761
Result sslcAddCert(sslcContext *context, const u8 *buf, u32 size)sslcAddCert381,9161
Result sslcCreateRootCertChain(u32 *RootCertChain_contexthandle)sslcCreateRootCertChain398,9557
Result sslcDestroyRootCertChain(u32 RootCertChain_contexthandle)sslcDestroyRootCertChain403,9692
Result sslcAddTrustedRootCA(u32 RootCertChain_contexthandle, const u8 *cert, u32 certsize, u32 *sslcAddTrustedRootCA408,9828
Result sslcRootCertChainAddDefaultCert(u32 RootCertChain_contexthandle, SSLC_DefaultRootCert cersslcRootCertChainAddDefaultCert413,10051
Result sslcRootCertChainRemoveCert(u32 RootCertChain_contexthandle, u32 cert_contexthandle)sslcRootCertChainRemoveCert418,10283
Result sslcCreate8CertChain(u32 *PinnedCertChain_contexthandle)sslcCreate8CertChain423,10469
Result sslcDestroy8CertChain(u32 PinnedCertChain_contexthandle)sslcDestroy8CertChain428,10605
Result sslc8CertChainAddCert(u32 PinnedCertChain_contexthandle, const u8 *cert, u32 certsize, u3sslc8CertChainAddCert433,10742
Result sslc8CertChainAddDefaultCert(u32 PinnedCertChain_contexthandle, u8 certID, u32 *cert_contsslc8CertChainAddDefaultCert438,10970
Result sslc8CertChainRemoveCert(u32 PinnedCertChain_contexthandle, u32 cert_contexthandle)sslc8CertChainRemoveCert443,11185
Result sslcCreateContext(sslcContext *context, int sockfd, u32 input_opt, const char *hostname)sslcCreateContext448,11372
Result sslcDestroyContext(sslcContext *context)sslcDestroyContext481,12095
Result sslcStartConnection(sslcContext *context, int *internal_retval, u32 *out)sslcStartConnection495,12373
Result sslcRead(sslcContext *context, void *buf, size_t len, bool peek)sslcRead501,12597
Result sslcWrite(sslcContext *context, const void *buf, size_t len)sslcWrite510,12765
Result sslcContextSetRootCertChain(sslcContext *context, u32 handle)sslcContextSetRootCertChain515,12890
Result sslcContextSetClientCert(sslcContext *context, u32 handle)sslcContextSetClientCert520,13017
Result sslcContextSetHandle8(sslcContext *context, u32 handle)sslcContextSetHandle8525,13141
Result sslcContextClearOpt(sslcContext *context, u32 bitmask)sslcContextClearOpt530,13262
Result sslcContextInitSharedmem(sslcContext *context, u8 *buf, u32 size)sslcContextInitSharedmem535,13383

source/services/dsp.c,2436
static Handle dspHandle;dspHandle9,174
static int dspRefCount;dspRefCount10,199
static dspHookCookie dspFirstHook;dspFirstHook12,224
static bool dspComponentLoaded, dspSleeping;dspComponentLoaded13,259
static bool dspComponentLoaded, dspSleeping;dspSleeping13,259
static const void* dspSavedCompBin;dspSavedCompBin15,305
static u32 dspSavedCompSize;dspSavedCompSize16,341
static u16 dspSavedCompProgMask, dspSavedCompDataMask;dspSavedCompProgMask17,370
static u16 dspSavedCompProgMask, dspSavedCompDataMask;dspSavedCompDataMask17,370
static void dspCallHook(DSP_HookType hookType)dspCallHook19,426
Result dspInit(void)dspInit26,578
void dspExit(void)dspExit51,1026
bool dspIsComponentLoaded(void)dspIsComponentLoaded58,1146
void dspHook(dspHookCookie* cookie, dspHookFn callback)dspHook63,1211
void dspUnhook(dspHookCookie* cookie)dspUnhook73,1422
bool aptDspSleep(void)aptDspSleep86,1631
void aptDspWakeup(void)aptDspWakeup97,1807
void aptDspCancel(void)aptDspCancel110,2109
Result DSP_GetHeadphoneStatus(bool* is_inserted)DSP_GetHeadphoneStatus118,2200
Result DSP_FlushDataCache(const void* address, u32 size)DSP_FlushDataCache128,2468
Result DSP_InvalidateDataCache(const void* address, u32 size)DSP_InvalidateDataCache141,2829
Result DSP_SetSemaphore(u16 value)DSP_SetSemaphore154,3195
Result DSP_SetSemaphoreMask(u16 mask)DSP_SetSemaphoreMask164,3434
Result DSP_GetSemaphoreHandle(Handle* semaphore)DSP_GetSemaphoreHandle174,3676
Result DSP_LoadComponent(const void* component, u32 size, u16 prog_mask, u16 data_mask, bool* isDSP_LoadComponent184,3935
Result DSP_UnloadComponent(void)DSP_UnloadComponent211,4681
Result DSP_RegisterInterruptEvents(Handle handle, u32 interrupt, u32 channel)DSP_RegisterInterruptEvents225,4968
Result DSP_ReadPipeIfPossible(u32 channel, u32 peer, void* buffer, u16 length, u16* length_read)DSP_ReadPipeIfPossible238,5338
Result DSP_WriteProcessPipe(u32 channel, const void* buffer, u32 length)DSP_WriteProcessPipe267,5984
Result DSP_ConvertProcessAddressFromDspDram(u32 dsp_address, u32* arm_address)DSP_ConvertProcessAddressFromDspDram280,6356
Result DSP_RecvData(u16 regNo, u16* value)DSP_RecvData291,6672
Result DSP_RecvDataIsReady(u16 regNo, bool* is_ready)DSP_RecvDataIsReady302,6949
Result DSP_SendData(u16 regNo, u16 value)DSP_SendData315,7316
Result DSP_SendDataIsEmpty(u16 regNo, bool* is_empty)DSP_SendDataIsEmpty326,7582

source/services/srvpm.c,704
#define IS_PRE_7X IS_PRE_7X11,216
static Handle srvPmHandle;srvPmHandle13,282
static int srvPmRefCount;srvPmRefCount14,309
Result srvPmInit(void)srvPmInit16,336
void srvPmExit(void)srvPmExit37,728
Handle *srvPmGetSessionHandle(void)srvPmGetSessionHandle45,914
static Result srvPmSendCommand(u32* cmdbuf)srvPmSendCommand50,977
Result SRVPM_PublishToProcess(u32 notificationId, Handle process)SRVPM_PublishToProcess60,1173
Result SRVPM_PublishToAll(u32 notificationId)SRVPM_PublishToAll72,1461
Result SRVPM_RegisterProcess(u32 pid, u32 count, const char (*serviceAccessControlList)[8])SRVPM_RegisterProcess82,1667
Result SRVPM_UnregisterProcess(u32 pid)SRVPM_UnregisterProcess95,2021

source/services/irrst.c,911
Handle irrstHandle;irrstHandle16,307
Handle irrstMemHandle;irrstMemHandle17,327
Handle irrstEvent;irrstEvent18,350
vu32* irrstSharedMem;irrstSharedMem20,370
static u32 kHeld;kHeld22,393
static circlePosition csPos;csPos23,411
static int irrstRefCount;irrstRefCount24,440
Result irrstInit(void)irrstInit26,467
void irrstExit(void)irrstExit67,1365
void irrstWaitForEvent(bool nextEvent)irrstWaitForEvent88,1825
u32 irrstCheckSectionUpdateTime(vu32 *sharedmem_section, u32 id)irrstCheckSectionUpdateTime95,1998
void irrstScanInput(void)irrstScanInput110,2256
u32 irrstKeysHeld(void)irrstKeysHeld127,2601
void irrstCstickRead(circlePosition* pos)irrstCstickRead133,2675
Result IRRST_GetHandles(Handle* outMemHandle, Handle* outEventHandle)IRRST_GetHandles138,2746
Result IRRST_Initialize(u32 unk1, u8 unk2)IRRST_Initialize152,3094
Result IRRST_Shutdown(void)IRRST_Shutdown165,3360

source/services/httpc.c,4792
Handle __httpc_servhandle;__httpc_servhandle13,267
static int __httpc_refcount;__httpc_refcount14,294
u32 *__httpc_sharedmem_addr;__httpc_sharedmem_addr16,324
static u32 __httpc_sharedmem_size;__httpc_sharedmem_size17,353
static Handle __httpc_sharedmem_handle;__httpc_sharedmem_handle18,388
Result httpcInit(u32 sharedmem_size)httpcInit29,918
void httpcExit(void)httpcExit71,2037
Result httpcOpenContext(httpcContext *context, HTTPC_RequestMethod method, const char* url, u32 httpcOpenContext90,2397
Result httpcCloseContext(httpcContext *context)httpcCloseContext122,3313
Result httpcCancelConnection(httpcContext *context)httpcCancelConnection132,3502
Result httpcDownloadData(httpcContext *context, u8* buffer, u32 size, u32 *downloadedsize)httpcDownloadData145,3783
static Result HTTPC_Initialize(Handle handle, u32 sharedmem_size, Handle sharedmem_handle)HTTPC_Initialize175,4443
static Result HTTPC_Finalize(Handle handle)HTTPC_Finalize191,4918
static Result HTTPC_CreateContext(Handle handle, HTTPC_RequestMethod method, const char* url, HaHTTPC_CreateContext203,5149
static Result HTTPC_InitializeConnectionSession(Handle handle, Handle contextHandle)HTTPC_InitializeConnectionSession222,5616
static Result HTTPC_SetProxyDefault(Handle handle, Handle contextHandle)HTTPC_SetProxyDefault236,5948
static Result HTTPC_CloseContext(Handle handle, Handle contextHandle)HTTPC_CloseContext249,6232
Result httpcAddRequestHeaderField(httpcContext *context, const char* name, const char* value)httpcAddRequestHeaderField262,6513
Result httpcAddPostDataAscii(httpcContext *context, const char* name, const char* value)httpcAddPostDataAscii284,7088
Result httpcAddPostDataBinary(httpcContext *context, const char* name, const u8* value, u32 len)httpcAddPostDataBinary306,7658
Result httpcAddPostDataRaw(httpcContext *context, const u32* data, u32 len)httpcAddPostDataRaw327,8194
Result httpcBeginRequest(httpcContext *context)httpcBeginRequest345,8597
Result httpcReceiveData(httpcContext *context, u8* buffer, u32 size)httpcReceiveData358,8875
Result httpcReceiveDataTimeout(httpcContext *context, u8* buffer, u32 size, u64 timeout)httpcReceiveDataTimeout374,9262
Result httpcGetRequestState(httpcContext *context, HTTPC_RequestStatus* out)httpcGetRequestState392,9743
Result httpcGetDownloadSizeState(httpcContext *context, u32* downloadedsize, u32* contentsize)httpcGetDownloadSizeState407,10070
Result httpcGetResponseHeader(httpcContext *context, const char* name, char* value, u32 valuebufhttpcGetResponseHeader422,10485
Result httpcGetResponseStatusCode(httpcContext *context, u32* out)httpcGetResponseStatusCode443,11056
Result httpcGetResponseStatusCodeTimeout(httpcContext *context, u32* out, u64 timeout)httpcGetResponseStatusCodeTimeout459,11376
Result httpcAddTrustedRootCA(httpcContext *context, const u8 *cert, u32 certsize)httpcAddTrustedRootCA476,11789
Result httpcAddDefaultCert(httpcContext *context, SSLC_DefaultRootCert certID)httpcAddDefaultCert492,12198
Result httpcSelectRootCertChain(httpcContext *context, u32 RootCertChain_contexthandle)httpcSelectRootCertChain506,12528
Result httpcSetClientCert(httpcContext *context, const u8 *cert, u32 certsize, const u8 *privk, httpcSetClientCert520,12888
Result httpcSetClientCertDefault(httpcContext *context, SSLC_DefaultClientCert certID)httpcSetClientCertDefault539,13427
Result httpcSetClientCertContext(httpcContext *context, u32 ClientCert_contexthandle)httpcSetClientCertContext553,13765
Result httpcSetSSLOpt(httpcContext *context, u32 options)httpcSetSSLOpt567,14120
Result httpcSetSSLClearOpt(httpcContext *context, u32 options)httpcSetSSLClearOpt581,14430
Result httpcCreateRootCertChain(u32 *RootCertChain_contexthandle)httpcCreateRootCertChain595,14745
Result httpcDestroyRootCertChain(u32 RootCertChain_contexthandle)httpcDestroyRootCertChain610,15117
Result httpcRootCertChainAddCert(u32 RootCertChain_contexthandle, const u8 *cert, u32 certsize, httpcRootCertChainAddCert623,15422
Result httpcRootCertChainAddDefaultCert(u32 RootCertChain_contexthandle, SSLC_DefaultRootCert cehttpcRootCertChainAddDefaultCert642,15966
Result httpcRootCertChainRemoveCert(u32 RootCertChain_contexthandle, u32 cert_contexthandle)httpcRootCertChainRemoveCert659,16440
Result httpcOpenClientCertContext(const u8 *cert, u32 certsize, const u8 *privk, u32 privk_size,httpcOpenClientCertContext673,16803
Result httpcOpenDefaultClientCertContext(SSLC_DefaultClientCert certID, u32 *ClientCert_contexthhttpcOpenDefaultClientCertContext694,17426
Result httpcCloseClientCertContext(u32 ClientCert_contexthandle)httpcCloseClientCertContext710,17848
Result httpcSetKeepAlive(httpcContext *context, HTTPC_KeepAlive option)httpcSetKeepAlive723,18149

source/services/ndm.c,1365
Handle ndmuHandle;ndmuHandle13,254
static int ndmuRefCount;ndmuRefCount14,273
Result ndmuInit(void)ndmuInit16,299
void ndmuExit(void)ndmuExit28,510
Result NDMU_EnterExclusiveState(ndmExclusiveState state)NDMU_EnterExclusiveState36,627
Result NDMU_LeaveExclusiveState(void)NDMU_LeaveExclusiveState50,935
Result NDMU_GetExclusiveState(ndmExclusiveState *state)NDMU_GetExclusiveState63,1206
Result NDMU_LockState(void)NDMU_LockState77,1481
Result NDMU_UnlockState(void)NDMU_UnlockState90,1742
Result NDMU_SuspendDaemons(ndmDaemonMask mask)NDMU_SuspendDaemons103,2005
Result NDMU_ResumeDaemons(ndmDaemonMask mask)NDMU_ResumeDaemons116,2266
Result NDMU_SuspendScheduler(u32 flag)NDMU_SuspendScheduler129,2526
Result NDMU_ResumeScheduler(void)NDMU_ResumeScheduler142,2779
Result NDMU_GetCurrentState(ndmState *state)NDMU_GetCurrentState154,3010
Result NDMU_QueryStatus(ndmDaemonStatus *status)NDMU_QueryStatus168,3274
Result NDMU_SetScanInterval(u32 interval)NDMU_SetScanInterval182,3543
Result NDMU_GetScanInterval(u32 *interval)NDMU_GetScanInterval195,3804
Result NDMU_GetRetryInterval(u32 *interval)NDMU_GetRetryInterval209,4071
Result NDMU_ResetDaemons(void)NDMU_ResetDaemons223,4339
Result NDMU_GetDefaultDaemons(ndmDaemonMask *mask)NDMU_GetDefaultDaemons235,4569
Result NDMU_ClearMacFilter(void)NDMU_ClearMacFilter249,4840

source/services/ampxi.c,439
static Handle ampxiHandle;ampxiHandle11,225
static int ampxiRefCount;ampxiRefCount12,252
Result ampxiInit(Handle servhandle)ampxiInit14,279
void ampxiExit(void)ampxiExit30,570
Result AMPXI_WriteTWLSavedata(u64 titleid, u8 *buffer, u32 size, u32 image_filepos, u8 section_tAMPXI_WriteTWLSavedata36,672
Result AMPXI_InstallTitlesFinish(FS_MediaType mediaType, u8 db, u32 titlecount, u64 *tidlist)AMPXI_InstallTitlesFinish57,1243

source/services/nwmext.c,262
Handle nwmExtHandle;nwmExtHandle9,177
static int nwmExtRefCount;nwmExtRefCount10,198
Result nwmExtInit(void)nwmExtInit12,226
void nwmExtExit(void)nwmExtExit21,445
Result NWMEXT_ControlWirelessEnabled(bool enableWifi)NWMEXT_ControlWirelessEnabled27,550

source/gpu/gxqueue.c,829
#define MAX_PARALLEL_CMDS MAX_PARALLEL_CMDS9,175
static gxCmdQueue_s* curQueue;curQueue11,204
static bool isActive, isRunning, shouldStop;isActive12,235
static bool isActive, isRunning, shouldStop;isRunning12,235
static bool isActive, isRunning, shouldStop;shouldStop12,235
static LightLock queueLock = 1;queueLock13,280
static void gxCmdQueueDoCommands(void)gxCmdQueueDoCommands15,313
void gxCmdQueueInterrupt(GSPGPU_Event irq)gxCmdQueueInterrupt27,632
void gxCmdQueueClear(gxCmdQueue_s* queue)gxCmdQueueClear53,1199
void gxCmdQueueAdd(gxCmdQueue_s* queue, const gxCmdEntry_s* entry)gxCmdQueueAdd62,1400
void gxCmdQueueRun(gxCmdQueue_s* queue)gxCmdQueueRun77,1823
void gxCmdQueueStop(gxCmdQueue_s* queue)gxCmdQueueStop93,2114
bool gxCmdQueueWait(gxCmdQueue_s* queue, s64 timeout)gxCmdQueueWait107,2334

source/gpu/gpu.c,804
u32* gpuCmdBuf;gpuCmdBuf13,201
u32 gpuCmdBufSize;gpuCmdBufSize14,217
u32 gpuCmdBufOffset;gpuCmdBufOffset15,236
void GPUCMD_AddRawCommands(const u32* cmd, u32 size)GPUCMD_AddRawCommands17,258
static void GPUCMD_AddInternal(u32 header, const u32* param, u32 paramlength)GPUCMD_AddInternal25,418
void GPUCMD_Add(u32 header, const u32* param, u32 paramlength)GPUCMD_Add47,1027
void GPUCMD_Split(u32** addr, u32* size)GPUCMD_Split61,1357
static inline u32 floatrawbits(float f)floatrawbits75,1717
	union { float f; u32 i; } s;__anon9a5801fd010a77,1759
	union { float f; u32 i; } s;f77,1759
	union { float f; u32 i; } s;i77,1759
u32 f32tof16(float f)f32tof1686,1889
u32 f32tof20(float f)f32tof20117,2437
u32 f32tof24(float f)f32tof24148,2985
u32 f32tof31(float f)f32tof31179,3532

source/gpu/gx.c,930
static gxCmdQueue_s* boundQueue;boundQueue12,203
__attribute__((weak)) void gxCmdQueueAdd(gxCmdQueue_s* queue, const gxCmdEntry_s* entry)gxCmdQueueAdd15,305
void GX_BindQueue(gxCmdQueue_s* queue)GX_BindQueue19,399
static Result submitGxCommand(u32 gxCommand[0x8])submitGxCommand24,464
Result GX_RequestDma(u32* src, u32* dst, u32 length)GX_RequestDma35,661
Result GX_ProcessCommandList(u32* buf0a, u32 buf0s, u8 flags)GX_ProcessCommandList47,996
Result GX_MemoryFill(u32* buf0a, u32 buf0v, u32* buf0e, u16 control0, u32* buf1a, u32 buf1v, u32GX_MemoryFill60,1446
Result GX_DisplayTransfer(u32* inadr, u32 indim, u32* outadr, u32 outdim, u32 flags)GX_DisplayTransfer76,2045
Result GX_TextureCopy(u32* inadr, u32 indim, u32* outadr, u32 outdim, u32 size, u32 flags)GX_TextureCopy90,2387
Result GX_FlushCacheRegions(u32* buf0a, u32 buf0s, u32* buf1a, u32 buf1s, u32* buf2a, u32 buf2s)GX_FlushCacheRegions105,2742

source/gpu/shbin.c,281
DVLB_s* DVLB_ParseFile(u32* shbinData, u32 shbinSize)DVLB_ParseFile12,191
void DVLB_Free(DVLB_s* dvlb)DVLB_Free78,1871
s8 DVLE_GetUniformRegister(DVLE_s* dvle, const char* name)DVLE_GetUniformRegister86,2026
void DVLE_GenerateOutmap(DVLE_s* dvle)DVLE_GenerateOutmap99,2328

source/gpu/shaderProgram.c,1684
Result shaderInstanceInit(shaderInstance_s* si, DVLE_s* dvle)shaderInstanceInit12,399
Result shaderInstanceFree(shaderInstance_s* si)shaderInstanceFree85,2044
Result shaderInstanceSetBool(shaderInstance_s* si, int id, bool value)shaderInstanceSetBool95,2191
Result shaderInstanceGetBool(shaderInstance_s* si, int id, bool* value)shaderInstanceGetBool107,2426
s8 shaderInstanceGetUniformLocation(shaderInstance_s* si, const char* name)shaderInstanceGetUniformLocation118,2624
Result shaderProgramInit(shaderProgram_s* sp)shaderProgramInit125,2774
Result shaderProgramFree(shaderProgram_s* sp)shaderProgramFree135,2911
Result shaderProgramSetVsh(shaderProgram_s* sp, DVLE_s* dvle)shaderProgramSetVsh145,3074
Result shaderProgramSetGsh(shaderProgram_s* sp, DVLE_s* dvle, u8 stride)shaderProgramSetGsh158,3430
Result shaderProgramSetGshInputPermutation(shaderProgram_s* sp, u64 permutation)shaderProgramSetGshInputPermutation175,3942
static inline void shaderProgramUploadDvle(const DVLE_s* dvle)shaderProgramUploadDvle184,4197
static inline void shaderProgramMergeOutmaps(u32* outmapData, const u32* vshOutmap, const u32* gshaderProgramMergeOutmaps193,4616
Result shaderProgramConfigure(shaderProgram_s* sp, bool sendVshCode, bool sendGshCode)shaderProgramConfigure237,5589
Result shaderProgramUse(shaderProgram_s* sp)shaderProgramUse332,9196
void GPU_SetShaderOutmap(const u32 outmapData[8])GPU_SetShaderOutmap353,10091
void GPU_SendShaderCode(GPU_SHADER_TYPE type, u32* data, u16 offset, u16 length)GPU_SendShaderCode359,10286
void GPU_SendOperandDescriptors(GPU_SHADER_TYPE type, u32* data, u16 offset, u16 length)GPU_SendOperandDescriptors373,10726

source/font.c,519
CFNT_s* g_sharedFont;g_sharedFont9,170
static u32 sharedFontAddr;sharedFontAddr10,192
Result fontEnsureMapped(void)fontEnsureMapped12,220
void fontFixPointers(CFNT_s* font)fontFixPointers31,688
int fontGlyphIndexFromCodePoint(CFNT_s* font, u32 codePoint)fontGlyphIndexFromCodePoint45,1270
charWidthInfo_s* fontGetCharWidthInfo(CFNT_s* font, int glyphIndex)fontGetCharWidthInfo92,2281
void fontCalcGlyphPos(fontGlyphPos_s* out, CFNT_s* font, int glyphIndex, u32 flags, float scaleXfontCalcGlyphPos110,2722

source/synchronization.c,2723
static Handle arbiter;arbiter7,122
Result __sync_init(void)__sync_init9,146
void __sync_fini(void)__sync_fini14,219
Result syncArbitrateAddress(s32* addr, ArbitrationType type, s32 value)syncArbitrateAddress20,288
Result syncArbitrateAddressWithTimeout(s32* addr, ArbitrationType type, s32 value, s64 timeout_nsyncArbitrateAddressWithTimeout25,436
void LightLock_Init(LightLock* lock)LightLock_Init30,614
void LightLock_Lock(LightLock* lock)LightLock_Lock37,704
int LightLock_TryLock(LightLock* lock)LightLock_TryLock85,1958
void LightLock_Unlock(LightLock* lock)LightLock_Unlock103,2245
void RecursiveLock_Init(RecursiveLock* lock)RecursiveLock_Init117,2467
void RecursiveLock_Lock(RecursiveLock* lock)RecursiveLock_Lock124,2590
int RecursiveLock_TryLock(RecursiveLock* lock)RecursiveLock_TryLock135,2793
void RecursiveLock_Unlock(RecursiveLock* lock)RecursiveLock_Unlock148,3051
static inline void CondVar_BeginWait(CondVar* cv, LightLock* lock)CondVar_BeginWait157,3189
static inline bool CondVar_EndWait(CondVar* cv, s32 num_threads)CondVar_EndWait166,3352
void CondVar_Init(CondVar* cv)CondVar_Init188,3693
void CondVar_Wait(CondVar* cv, LightLock* lock)CondVar_Wait193,3739
int CondVar_WaitTimeout(CondVar* cv, LightLock* lock, s64 timeout_ns)CondVar_WaitTimeout200,3906
void CondVar_WakeUp(CondVar* cv, s32 num_threads)CondVar_WakeUp216,4274
{__anon170b69e80103227,4481
	CLEARED_STICKY = -2,CLEARED_STICKY228,4483
	CLEARED_ONESHOT = -1,CLEARED_ONESHOT229,4505
	SIGNALED_ONESHOT = 0,SIGNALED_ONESHOT230,4528
	SIGNALED_STICKY = 1SIGNALED_STICKY231,4551
static inline void LightEvent_SetState(LightEvent* event, int state)LightEvent_SetState234,4576
static inline int LightEvent_TryReset(LightEvent* event)LightEvent_TryReset241,4720
void LightEvent_Init(LightEvent* event, ResetType reset_type)LightEvent_Init256,4937
void LightEvent_Clear(LightEvent* event)LightEvent_Clear262,5127
void LightEvent_Pulse(LightEvent* event)LightEvent_Pulse277,5447
void LightEvent_Signal(LightEvent* event)LightEvent_Signal287,5731
int LightEvent_TryWait(LightEvent* event)LightEvent_TryWait303,6166
void LightEvent_Wait(LightEvent* event)LightEvent_Wait310,6299
int LightEvent_WaitTimeout(LightEvent* event, s64 timeout_ns)LightEvent_WaitTimeout330,6776
void LightSemaphore_Init(LightSemaphore* semaphore, s16 initial_count, s16 max_count)LightSemaphore_Init358,7472
void LightSemaphore_Acquire(LightSemaphore* semaphore, s32 count)LightSemaphore_Acquire365,7679
int LightSemaphore_TryAcquire(LightSemaphore* semaphore, s32 count)LightSemaphore_TryAcquire394,8402
void LightSemaphore_Release(LightSemaphore* semaphore, s32 count)LightSemaphore_Release411,8718

source/gdbhio_dev.c,2191
static int g_gdbHioStdinFd = -1, g_gdbHioStdoutFd = -1, g_gdbHioStderrFd = -1;g_gdbHioStdinFd10,141
static int g_gdbHioStdinFd = -1, g_gdbHioStdoutFd = -1, g_gdbHioStderrFd = -1;g_gdbHioStdoutFd10,141
static int g_gdbHioStdinFd = -1, g_gdbHioStdoutFd = -1, g_gdbHioStderrFd = -1;g_gdbHioStderrFd10,141
static int _gdbHioGetFd(int fd)_gdbHioGetFd12,221
static inline int _gdbHioGetFdFromPtr(void *fdptr)_gdbHioGetFdFromPtr27,488
static inline const char *_gdbHioSkipMountpoint(const char *pathname)_gdbHioSkipMountpoint32,567
static int _gdbHioDevOpen(struct _reent *r, void *fdptr, const char *pathname, int flags, int mo_gdbHioDevOpen37,714
static int _gdbHioDevClose(struct _reent *r, void *fdptr)_gdbHioDevClose51,999
static ssize_t _gdbHioDevRead(struct _reent *r, void *fdptr, char *buf, size_t count)_gdbHioDevRead68,1325
static ssize_t _gdbHioDevWrite(struct _reent *r, void *fdptr, const char *buf, size_t count)_gdbHioDevWrite74,1500
static off_t _gdbHioDevLseek(struct _reent *r, void *fdptr, off_t offset, int flag)_gdbHioDevLseek80,1683
static int _gdbHioDevRename(struct _reent *r, const char *oldpath, const char *newpath)_gdbHioDevRename86,1845
static int _gdbHioDevUnlink(struct _reent *r, const char *pathname)_gdbHioDevUnlink92,2034
static int _gdbHioDevStat(struct _reent *r, const char *pathname, struct stat *st)_gdbHioDevStat98,2172
static int _gdbHioDevFstat(struct _reent *r, void *fdptr, struct stat *st)_gdbHioDevFstat104,2327
static int _gdbHioDevImportFd(int gdbFd)_gdbHioDevImportFd110,2470
static const devoptab_t g_gdbHioDevoptab = {g_gdbHioDevoptab127,2705
int gdbHioDevGettimeofday(struct timeval *tv, void *tz)gdbHioDevGettimeofday156,3447
int gdbHioDevIsatty(int fd)gdbHioDevIsatty161,3544
int gdbHioDevSystem(const char *command)gdbHioDevSystem166,3617
int gdbHioDevInit(void)gdbHioDevInit171,3694
void gdbHioDevExit(void)gdbHioDevExit184,3865
int gdbHioDevGetStdin(void)gdbHioDevGetStdin192,3998
int gdbHioDevGetStdout(void)gdbHioDevGetStdout200,4144
int gdbHioDevGetStderr(void)gdbHioDevGetStderr208,4295
int gdbHioDevRedirectStdStreams(bool in, bool out, bool err)gdbHioDevRedirectStdStreams216,4446

source/path_buf.h,0

source/ndsp/ndsp-internal.h,2556
{__anon244c97de010817,363
	u32 paddr, sampleCount;paddr18,365
	u32 paddr, sampleCount;sampleCount18,365
	ndspAdpcmData adpcmData;adpcmData19,390
	u8 hasAdpcmData, looping;hasAdpcmData20,416
	u8 hasAdpcmData, looping;looping20,416
	u16 seqId, padding;seqId21,443
	u16 seqId, padding;padding21,443
} DspChnBuf;DspChnBuf22,464
{__anon244c97de020825,493
	u32 flags;flags26,495
	float mix[12];mix27,507
	float rate;rate28,523
	u8 rim[2];rim29,536
	u16 iirFilterType;iirFilterType30,548
	u16 iirFilter_mono[2];iirFilter_mono31,568
	u16 iirFilter_biquad[5];iirFilter_biquad32,592
	u16 activeBuffers;activeBuffers33,618
	DspChnBuf buffers[4];buffers34,638
	u32 _pad0;_pad035,661
	u16 playStatus, syncCount;playStatus36,673
	u16 playStatus, syncCount;syncCount36,673
	u32 unknown;unknown37,701
	u32 _pad1;_pad138,715
	u32 paddr, sampleCount;paddr40,728
	u32 paddr, sampleCount;sampleCount40,728
	u16 cntFlags;cntFlags41,753
	ndspAdpcmData adpcmData;adpcmData42,768
	u16 moreFlags;moreFlags43,794
	u16 seqId;seqId44,810
} DspChnStruct;DspChnStruct45,822
{__anon244c97de030848,854
	u16 flags, syncCount;flags49,856
	u16 flags, syncCount;syncCount49,856
	u32 samplePos;samplePos50,879
	u16 curSeqId, lastSeqId;curSeqId51,895
	u16 curSeqId, lastSeqId;lastSeqId51,895
} DspChnStatus;DspChnStatus52,921
{__anon244c97de040855,953
	u32 flags;flags56,955
	float masterVol;masterVol57,967
	float auxReturnVol[2];auxReturnVol58,985
	u16 outBufCount;outBufCount59,1009
	u16 _pad0[2];_pad060,1027
	u16 outputMode;outputMode61,1042
	u16 clippingMode;clippingMode62,1059
	u16 headsetConnected;headsetConnected63,1078
	u16 surroundDepth;surroundDepth64,1101
	u16 surroundSpeakerPos;surroundSpeakerPos65,1121
	u16 _pad1;_pad166,1146
	u16 rearRatio;rearRatio67,1158
	u16 auxFrontBypass[2];auxFrontBypass68,1174
	u16 auxBusEnable[2];auxBusEnable69,1198
	u16 dspDelayEffect[2][10];dspDelayEffect70,1220
	u16 dspReverbEffect[2][26];dspReverbEffect71,1248
	u16 syncMode;syncMode72,1277
	u16 _pad2;_pad273,1292
	u32 unknown;unknown74,1304
} DspMasterStatus;DspMasterStatus75,1318
static inline u32 ndspiRotateVal(u32 x)ndspiRotateVal77,1338
static inline DspChnStruct* ndspiGetChnStruct(int id)ndspiGetChnStruct82,1414
static inline DspChnStatus* ndspiGetChnStatus(int id)ndspiGetChnStatus88,1557
static inline u16* ndspiGetChnAdpcmCoefs(int id)ndspiGetChnAdpcmCoefs94,1699
static inline DspMasterStatus* ndspiGetMasterStatus(void)ndspiGetMasterStatus100,1821

source/ndsp/ndsp.c,5287
#define NDSP_THREAD_STACK_SIZE NDSP_THREAD_STACK_SIZE7,133
u16 ndspFrameId, ndspBufferCurId, ndspBufferId;ndspFrameId9,172
u16 ndspFrameId, ndspBufferCurId, ndspBufferId;ndspBufferCurId9,172
u16 ndspFrameId, ndspBufferCurId, ndspBufferId;ndspBufferId9,172
void* ndspVars[16][2];ndspVars10,220
static bool bDspReady, bEnteringSleep, bSleeping, bCancelReceived;bDspReady12,244
static bool bDspReady, bEnteringSleep, bSleeping, bCancelReceived;bEnteringSleep12,244
static bool bDspReady, bEnteringSleep, bSleeping, bCancelReceived;bSleeping12,244
static bool bDspReady, bEnteringSleep, bSleeping, bCancelReceived;bCancelReceived12,244
static u32 droppedFrames, frameCount;droppedFrames13,311
static u32 droppedFrames, frameCount;frameCount13,311
static const void* componentBin;componentBin15,350
static u32 componentSize;componentSize16,383
static u16 componentProgMask, componentDataMask;componentProgMask17,409
static u16 componentProgMask, componentDataMask;componentDataMask17,409
static bool componentFree;componentFree18,458
static dspHookCookie ndspHookCookie;ndspHookCookie20,486
static Handle irqEvent, dspSem;irqEvent22,524
static Handle irqEvent, dspSem;dspSem22,524
static LightEvent sleepEvent;sleepEvent23,556
static LightLock ndspMutex;ndspMutex24,586
static u8 dspVar5Backup[0x1080];dspVar5Backup26,615
static volatile bool ndspThreadRun;ndspThreadRun28,649
static Thread ndspThread;ndspThread29,685
static inline bool ndspWaitForIrq(u64 timeout_ns)ndspWaitForIrq31,712
static inline void ndspSetCounter(int a, int counter)ndspSetCounter58,1616
static inline int ndspGetCounter(int a)ndspGetCounter63,1710
{__anon3cb39f4f010369,1792
	MFLAG_MASTERVOL    = BIT(0),MFLAG_MASTERVOL70,1794
	MFLAG_OUTPUTMODE   = BIT(1),MFLAG_OUTPUTMODE71,1824
	MFLAG_CLIPPINGMODE = BIT(2),MFLAG_CLIPPINGMODE72,1854
	MFLAG_OUTPUTCOUNT  = BIT(3),MFLAG_OUTPUTCOUNT73,1884
	MFLAG_SYNCMODE     = BIT(4),MFLAG_SYNCMODE74,1914
	MFLAG_SURR_DEPTH   = BIT(5),MFLAG_SURR_DEPTH75,1944
	MFLAG_SURR_POS     = BIT(6),MFLAG_SURR_POS76,1974
	MFLAG_SURR_RRATIO  = BIT(7),MFLAG_SURR_RRATIO77,2004
#define MFLAG_AUX_ENABLE(MFLAG_AUX_ENABLE79,2035
#define MFLAG_AUX_BYPASS(MFLAG_AUX_BYPASS80,2074
#define MFLAG_AUX_VOLUME(MFLAG_AUX_VOLUME81,2114
{__anon3cb39f4f020885,2172
	LightLock lock;lock86,2174
	u32 flags;flags87,2191
	float masterVol;masterVol88,2203
	u16 outputMode, clippingMode, outputCount, syncMode;outputMode89,2221
	u16 outputMode, clippingMode, outputCount, syncMode;clippingMode89,2221
	u16 outputMode, clippingMode, outputCount, syncMode;outputCount89,2221
	u16 outputMode, clippingMode, outputCount, syncMode;syncMode89,2221
	ndspWaveBuf* capture;capture90,2275
	ndspCallback callback;callback91,2298
	void* callbackData;callbackData92,2322
	{__anon3cb39f4f030895,2352
		u16 depth, pos, rearRatio;depth96,2355
		u16 depth, pos, rearRatio;pos96,2355
		u16 depth, pos, rearRatio;rearRatio96,2355
	} surround;surround97,2384
	{__anon3cb39f4f0408100,2406
		u16 enable, frontBypass;enable101,2409
		u16 enable, frontBypass;frontBypass101,2409
		float volume;volume102,2436
		ndspAuxCallback callback;callback103,2452
		void* callbackData;callbackData104,2480
	} aux[2];aux105,2502
} ndspMaster;ndspMaster106,2513
static void ndspDirtyMaster(void)ndspDirtyMaster108,2528
static void ndspInitMaster(void)ndspInitMaster113,2591
static void ndspUpdateMaster(void)ndspUpdateMaster137,3227
static void ndspUpdateCapture(s16* samples, u32 count)ndspUpdateCapture223,4822
static Result ndspInitialize(bool resume)ndspInitialize233,5078
static void ndspFinalize(bool suspend)ndspFinalize301,6436
static void ndspHookCallback(DSP_HookType hook)ndspHookCallback336,7066
static void ndspSync(void)ndspSync379,7770
static void ndspThreadMain(void* arg)ndspThreadMain427,9009
void ndspUseComponent(const void* binary, u32 size, u16 progMask, u16 dataMask)ndspUseComponent453,9509
static bool ndspFindAndLoadComponent(void)ndspFindAndLoadComponent462,9727
static int ndspRefCount = 0;ndspRefCount523,11192
Result ndspInit(void)ndspInit525,11222
void ndspExit(void)ndspExit574,12296
u32 ndspGetDroppedFrames(void)ndspGetDroppedFrames597,12664
u32 ndspGetFrameCount(void)ndspGetFrameCount602,12723
void ndspSetMasterVol(float volume)ndspSetMasterVol607,12776
void ndspSetOutputMode(ndspOutputMode mode)ndspSetOutputMode615,12959
void ndspSetClippingMode(ndspClippingMode mode)ndspSetClippingMode623,13150
void ndspSetOutputCount(int count)ndspSetOutputCount631,13349
void ndspSetCapture(ndspWaveBuf* capture)ndspSetCapture639,13534
void ndspSetCallback(ndspCallback callback, void* data)ndspSetCallback644,13612
void ndspSurroundSetDepth(u16 depth)ndspSurroundSetDepth650,13739
void ndspSurroundSetPos(ndspSpeakerPos pos)ndspSurroundSetPos658,13928
void ndspSurroundSetRearRatio(u16 ratio)ndspSurroundSetRearRatio666,14118
void ndspAuxSetEnable(int id, bool enable)ndspAuxSetEnable674,14316
void ndspAuxSetFrontBypass(int id, bool bypass)ndspAuxSetFrontBypass682,14524
void ndspAuxSetVolume(int id, float volume)ndspAuxSetVolume690,14742
void ndspAuxSetCallback(int id, ndspAuxCallback callback, void* data)ndspAuxSetCallback698,14943

source/ndsp/ndsp-filter.c,836
#define Fs Fs6,99
bool ndspChnIirMonoSetParamsLowPassFilter(int id, float f0)ndspChnIirMonoSetParamsLowPassFilter8,128
bool ndspChnIirMonoSetParamsHighPassFilter(int id, float f0)ndspChnIirMonoSetParamsHighPassFilter19,383
bool ndspChnIirBiquadSetParamsLowPassFilter(int id, float f0, float Q)ndspChnIirBiquadSetParamsLowPassFilter30,649
bool ndspChnIirBiquadSetParamsHighPassFilter(int id, float f0, float Q)ndspChnIirBiquadSetParamsHighPassFilter45,1099
bool ndspChnIirBiquadSetParamsBandPassFilter(int id, float f0, float Q)ndspChnIirBiquadSetParamsBandPassFilter60,1550
bool ndspChnIirBiquadSetParamsNotchFilter(int id, float f0, float Q)ndspChnIirBiquadSetParamsNotchFilter75,1937
bool ndspChnIirBiquadSetParamsPeakingEqualizer(int id, float f0, float Q, float gain)ndspChnIirBiquadSetParamsPeakingEqualizer90,2337

source/ndsp/ndsp-channel.c,2982
{__anona6659e5501035,63
	CFLAG_INITPARAMS    = BIT(0),CFLAG_INITPARAMS6,65
	CFLAG_SYNCCOUNT     = BIT(1),CFLAG_SYNCCOUNT7,96
	CFLAG_PLAYSTATUS    = BIT(2),CFLAG_PLAYSTATUS8,127
	CFLAG_INTERPTYPE    = BIT(3),CFLAG_INTERPTYPE9,158
	CFLAG_IIRFILTERTYPE = BIT(4),CFLAG_IIRFILTERTYPE10,189
	CFLAG_RATE          = BIT(5),CFLAG_RATE11,220
	CFLAG_MIX           = BIT(6),CFLAG_MIX12,251
	CFLAG_ADPCMCOEFS    = BIT(7),CFLAG_ADPCMCOEFS13,282
	CFLAG_IIRMONO       = BIT(8),CFLAG_IIRMONO14,313
	CFLAG_IIRBIQUAD     = BIT(9),CFLAG_IIRBIQUAD15,344
{__anona6659e55020819,394
	u32 flags;flags20,396
	LightLock lock;lock22,409
	u16 syncCount, waveBufSeqPos;syncCount23,426
	u16 syncCount, waveBufSeqPos;waveBufSeqPos23,426
	u32 samplePos;samplePos24,457
	ndspWaveBuf* waveBuf;waveBuf26,474
	u16 wavBufCount, wavBufIdNext;wavBufCount27,497
	u16 wavBufCount, wavBufIdNext;wavBufIdNext27,497
	bool playing, paused;playing29,530
	bool playing, paused;paused29,530
	u8 interpType;interpType30,553
	u8 iirFilterType;iirFilterType32,570
	s16 iirMono[2];iirMono33,589
	s16 iirBiquad[5];iirBiquad34,606
	u16 format;format36,626
	u16 wavBufSeq;wavBufSeq37,639
	float rate;rate39,656
	float mix[12];mix40,669
	u16 adpcmCoefs[16];adpcmCoefs42,686
} ndspChnSt;ndspChnSt44,708
static ndspChnSt ndspChn[24];ndspChn46,722
void ndspChnReset(int id)ndspChnReset48,753
void ndspChnInitParams(int id)ndspChnInitParams75,1358
bool ndspChnIsPlaying(int id)ndspChnIsPlaying83,1519
u32 ndspChnGetSamplePos(int id)ndspChnGetSamplePos88,1583
u16 ndspChnGetWaveBufSeq(int id)ndspChnGetWaveBufSeq93,1651
void ndspChnSetFormat(int id, u16 format)ndspChnSetFormat98,1724
bool ndspChnIsPaused(int id)ndspChnIsPaused103,1801
void ndspChnSetPaused(int id, bool paused)ndspChnSetPaused108,1863
void ndspChnSetInterp(int id, ndspInterpType type)ndspChnSetInterp117,2059
void ndspChnSetRate(int id, float rate)ndspChnSetRate126,2265
void ndspChnSetMix(int id, float mix[12])ndspChnSetMix135,2467
void ndspChnSetAdpcmCoefs(int id, u16 coefs[16])ndspChnSetAdpcmCoefs144,2682
void ndspChnWaveBufClear(int id)ndspChnWaveBufClear153,2927
void ndspChnWaveBufAdd(int id, ndspWaveBuf* buf)ndspChnWaveBufAdd172,3350
void ndspChnIirMonoSetEnable(int id, bool enable)ndspChnIirMonoSetEnable203,3983
void ndspChnIirBiquadSetEnable(int id, bool enable)ndspChnIirBiquadSetEnable214,4256
static s16 iirParamClamp(float param, float scale_factor, bool* success)iirParamClamp225,4531
bool ndspChnIirMonoSetParamsCustomFilter(int id, float a0, float a1, float b0)ndspChnIirMonoSetParamsCustomFilter242,4832
bool ndspChnIirBiquadSetParamsCustomFilter(int id, float a0, float a1, float a2, float b0, floatndspChnIirBiquadSetParamsCustomFilter262,5336
void ndspiInitChn(void)ndspiInitChn285,6076
void ndspiDirtyChn(void)ndspiDirtyChn297,6258
void ndspiUpdateChn(void)ndspiUpdateChn304,6364
void ndspiReadChnState(void)ndspiReadChnState461,10088

source/os-versionbin.c,546
#define TID_HIGH TID_HIGH12,240
static const u32 __NVer_tidlow_regionarray[7] =__NVer_tidlow_regionarray14,280
static const u32 __CVer_tidlow_regionarray[7] =__CVer_tidlow_regionarray25,469
static Result osReadVersionBin(u64 tid, OS_VersionBin *versionbin)osReadVersionBin36,658
Result osGetSystemVersionData(OS_VersionBin *nver_versionbin, OS_VersionBin *cver_versionbin)osGetSystemVersionData56,1177
Result osGetSystemVersionDataString(OS_VersionBin *nver_versionbin, OS_VersionBin *cver_versionbosGetSystemVersionDataString76,1752

source/path_buf.c,154
char     __thread __ctru_dev_path_buf[PATH_MAX+1];__ctru_dev_path_buf3,23
uint16_t __thread __ctru_dev_utf16_buf[PATH_MAX+1];__ctru_dev_utf16_buf4,74

source/errf.c,678
static Handle errfHandle;errfHandle11,208
static int errfRefCount;errfRefCount12,234
Result errfInit(void)errfInit14,260
void errfExit(void)errfExit28,480
Handle* errfGetSessionHandle(void)errfGetSessionHandle35,581
Result ERRF_Throw(const ERRF_FatalErrInfo* error)ERRF_Throw40,642
static inline void getCommonErrorData(ERRF_FatalErrInfo* error, Result failure)getCommonErrorData54,954
Result ERRF_ThrowResult(Result failure)ERRF_ThrowResult60,1120
Result ERRF_ThrowResultWithMessage(Result failure, const char* message)ERRF_ThrowResultWithMessage83,1560
void ERRF_ExceptionHandler(ERRF_ExceptionInfo* excep, CpuRegisters* regs)ERRF_ExceptionHandler110,2120

source/system/appExit.c,60
void __attribute__((weak)) __appExit(void)__appExit11,227

source/system/ctru_init.c,142
void (*__system_retAddr)(void);__system_retAddr9,136
void __attribute__((weak)) __libctru_init(void (*retAddr)(void))__libctru_init16,295

source/system/initArgv.c,156
int __system_argc;__system_argc7,99
char** __system_argv;__system_argv8,118
void __attribute__((weak)) __system_initArgv(void)__system_initArgv13,200

source/system/appInit.c,60
void __attribute__((weak)) __appInit(void)__appInit11,227

source/system/readtp.s,83
BEGIN_ASM_FUNC __aeabi_read_tpBEGIN_ASM_FUNC5,31
END_ASM_FUNCEND_ASM_FUNC9,142

source/system/stack_adjust.s,241
BEGIN_ASM_FUNC initSystem, weakBEGIN_ASM_FUNC3,25
END_ASM_FUNCEND_ASM_FUNC26,358
BEGIN_ASM_FUNC __ctru_exit, weakBEGIN_ASM_FUNC28,372
END_ASM_FUNCEND_ASM_FUNC35,496
__stacksize__:__stacksize__39,556
saved_stack:saved_stack45,665

source/system/ctru_exit.c,98
void __attribute__((weak)) __attribute__((noreturn)) __libctru_exit(int rc)__libctru_exit15,284

source/system/allocateHeaps.c,451
#define HEAP_SPLIT_SIZE_CAP HEAP_SPLIT_SIZE_CAP7,123
#define LINEAR_HEAP_SIZE_CAP LINEAR_HEAP_SIZE_CAP8,171
u32 __ctru_heap;__ctru_heap13,279
u32 __ctru_linear_heap;__ctru_linear_heap14,296
__attribute__((weak)) u32 __ctru_heap_size        = 0;__ctru_heap_size16,321
__attribute__((weak)) u32 __ctru_linear_heap_size = 0;__ctru_linear_heap_size17,376
void __attribute__((weak)) __system_allocateHeaps(void) {__system_allocateHeaps19,432

source/system/syscalls.c,241
static struct _reent* __libctru_get_reent()__libctru_get_reent20,439
static int __libctru_nanosleep(const struct timespec *req, struct timespec *rem)__libctru_nanosleep31,625
void __system_initSyscalls(void)__system_initSyscalls37,783

debug/soc_gethostname.d,0

debug/soc_gai_strerror.d,0

debug/readtp.d,0

debug/decode_utf16.d,0

debug/soc_fcntl.d,0

debug/rbtree_size.d,0

debug/shaderProgram.d,0

debug/rbtree_find.d,0

debug/linear.d,0

debug/rbtree_minmax.d,0

debug/syscalls.d,0

debug/soc_ioctl.d,0

debug/ac.d,0

debug/ns.d,0

debug/boss.d,0

debug/font.d,0

debug/soc_gethostid.d,0

debug/utf8_to_utf16.d,0

debug/soc_shutdownsockets.d,0

debug/sslc.d,0

debug/utf16_to_utf8.d,0

debug/csnd.d,0

debug/soc_gethostbyaddr.d,0

debug/gfx.d,0

debug/gdbhio.d,0

debug/ctru_exit.d,0

debug/romfs_dev.d,0

debug/encode_utf8.d,0

debug/appExit.d,0

debug/mappable.d,0

debug/soc_getaddrinfo.d,0

debug/fspxi.d,0

debug/apt.d,0

debug/news.d,0

debug/env.d,0

debug/soc_sendto.d,0

debug/cam.d,0

debug/cfgu.d,0

debug/y2r.d,0

debug/soc_inet_ntop.d,0

debug/miiselector.d,0

debug/gx.d,0

debug/svc.d,0

debug/mic.d,0

debug/gdbhio_dev.d,0

debug/console.d,0

debug/os-versionbin.d,0

debug/soc_init.d,0

debug/soc_getnetworkopt.d,0

debug/soc_select.d,0

debug/encode_utf16.d,0

debug/soc_socket.d,0

debug/thread.d,0

debug/pxipm.d,0

debug/mcuhwc.d,0

debug/ptmsysm.d,0

debug/am.d,0

debug/nwmext.d,0

debug/ir.d,0

debug/srv.d,0

debug/soc_getsockname.d,0

debug/frd.d,0

debug/dsp.d,0

debug/utf32_to_utf8.d,0

debug/utf32_to_utf16.d,0

debug/soc_recv.d,0

debug/httpc.d,0

debug/soc_common.d,0

debug/utf8_to_utf32.d,0

debug/mem_pool.d,0

debug/os.d,0

debug/ps.d,0

debug/soc_sockatmark.d,0

debug/soc_gethostbyname.d,0

debug/shbin.d,0

debug/vram.d,0

debug/soc_getnameinfo.d,0

debug/gpu.d,0

debug/ndsp-channel.d,0

debug/cfgnor.d,0

debug/soc_closesocket.d,0

debug/swkbd.d,0

debug/ctru_init.d,0

debug/soc_inet_ntoa.d,0

debug/gxqueue.d,0

debug/decompress.d,0

debug/soc_bind.d,0

debug/qtm.d,0

debug/soc_inet_addr.d,0

debug/rbtree_init.d,0

debug/errf.d,0

debug/ampxi.d,0

debug/mvd.d,0

debug/soc_addglobalsocket.d,0

debug/pmapp.d,0

debug/gspgpu.d,0

debug/ndsp.d,0

debug/soc_poll.d,0

debug/ptmu.d,0

debug/appInit.d,0

debug/synchronization.d,0

debug/hid.d,0

debug/rbtree_clear.d,0

debug/rbtree_remove.d,0

debug/initArgv.d,0

debug/rbtree_rotate.d,0

debug/soc_hstrerror.d,0

debug/soc_listen.d,0

debug/fs.d,0

debug/soc_getsockopt.d,0

debug/utf16_to_utf32.d,0

debug/soc_setsockopt.d,0

debug/rbtree_empty.d,0

debug/nim.d,0

debug/pmdbg.d,0

debug/srvpm.d,0

debug/stack_adjust.d,0

debug/pxidev.d,0

debug/soc_send.d,0

debug/soc_shutdown.d,0

debug/soc_inet_pton.d,0

debug/gsplcd.d,0

debug/fsreg.d,0

debug/loader.d,0

debug/path_buf.d,0

debug/allocateHeaps.d,0

debug/uds.d,0

debug/archive_dev.d,0

debug/soc_connect.d,0

debug/soc_closesockets.d,0

debug/soc_inet_aton.d,0

debug/soc_herror.d,0

debug/soc_getpeername.d,0

debug/decode_utf8.d,0

debug/ndm.d,0

debug/soc_recvfrom.d,0

debug/default_font_bin.h,157
static constexpr size_t default_font_bin_size=2048;default_font_bin_size9,221
static const size_t default_font_bin_size=2048;default_font_bin_size11,279

debug/irrst.d,0

debug/rbtree_iterator.d,0

debug/soc_accept.d,0

debug/soc_getipinfo.d,0

debug/rbtree_insert.d,0

debug/ndsp-filter.d,0

debug/nfc.d,0

debug/error.d,0

release/soc_gethostname.d,0

release/soc_gai_strerror.d,0

release/readtp.d,0

release/decode_utf16.d,0

release/soc_fcntl.d,0

release/rbtree_size.d,0

release/shaderProgram.d,0

release/rbtree_find.d,0

release/linear.d,0

release/rbtree_minmax.d,0

release/syscalls.d,0

release/soc_ioctl.d,0

release/ac.d,0

release/ns.d,0

release/boss.d,0

release/font.d,0

release/soc_gethostid.d,0

release/utf8_to_utf16.d,0

release/soc_shutdownsockets.d,0

release/sslc.d,0

release/utf16_to_utf8.d,0

release/csnd.d,0

release/soc_gethostbyaddr.d,0

release/gfx.d,0

release/gdbhio.d,0

release/ctru_exit.d,0

release/romfs_dev.d,0

release/encode_utf8.d,0

release/appExit.d,0

release/mappable.d,0

release/soc_getaddrinfo.d,0

release/fspxi.d,0

release/apt.d,0

release/news.d,0

release/env.d,0

release/soc_sendto.d,0

release/cam.d,0

release/cfgu.d,0

release/y2r.d,0

release/soc_inet_ntop.d,0

release/miiselector.d,0

release/gx.d,0

release/svc.d,0

release/mic.d,0

release/gdbhio_dev.d,0

release/console.d,0

release/os-versionbin.d,0

release/soc_init.d,0

release/soc_getnetworkopt.d,0

release/soc_select.d,0

release/encode_utf16.d,0

release/soc_socket.d,0

release/thread.d,0

release/pxipm.d,0

release/mcuhwc.d,0

release/ptmsysm.d,0

release/am.d,0

release/nwmext.d,0

release/ir.d,0

release/srv.d,0

release/soc_getsockname.d,0

release/frd.d,0

release/dsp.d,0

release/utf32_to_utf8.d,0

release/utf32_to_utf16.d,0

release/soc_recv.d,0

release/httpc.d,0

release/soc_common.d,0

release/utf8_to_utf32.d,0

release/mem_pool.d,0

release/os.d,0

release/ps.d,0

release/soc_sockatmark.d,0

release/soc_gethostbyname.d,0

release/shbin.d,0

release/vram.d,0

release/soc_getnameinfo.d,0

release/gpu.d,0

release/ndsp-channel.d,0

release/cfgnor.d,0

release/soc_closesocket.d,0

release/swkbd.d,0

release/ctru_init.d,0

release/soc_inet_ntoa.d,0

release/gxqueue.d,0

release/decompress.d,0

release/soc_bind.d,0

release/qtm.d,0

release/soc_inet_addr.d,0

release/rbtree_init.d,0

release/errf.d,0

release/ampxi.d,0

release/mvd.d,0

release/soc_addglobalsocket.d,0

release/pmapp.d,0

release/gspgpu.d,0

release/ndsp.d,0

release/soc_poll.d,0

release/ptmu.d,0

release/appInit.d,0

release/synchronization.d,0

release/hid.d,0

release/rbtree_clear.d,0

release/rbtree_remove.d,0

release/initArgv.d,0

release/rbtree_rotate.d,0

release/soc_hstrerror.d,0

release/soc_listen.d,0

release/fs.d,0

release/soc_getsockopt.d,0

release/utf16_to_utf32.d,0

release/soc_setsockopt.d,0

release/rbtree_empty.d,0

release/nim.d,0

release/pmdbg.d,0

release/srvpm.d,0

release/stack_adjust.d,0

release/pxidev.d,0

release/soc_send.d,0

release/soc_shutdown.d,0

release/soc_inet_pton.d,0

release/gsplcd.d,0

release/fsreg.d,0

release/loader.d,0

release/path_buf.d,0

release/allocateHeaps.d,0

release/uds.d,0

release/archive_dev.d,0

release/soc_connect.d,0

release/soc_closesockets.d,0

release/soc_inet_aton.d,0

release/soc_herror.d,0

release/soc_getpeername.d,0

release/decode_utf8.d,0

release/ndm.d,0

release/soc_recvfrom.d,0

release/default_font_bin.h,157
static constexpr size_t default_font_bin_size=2048;default_font_bin_size9,221
static const size_t default_font_bin_size=2048;default_font_bin_size11,279

release/irrst.d,0

release/rbtree_iterator.d,0

release/soc_accept.d,0

release/soc_getipinfo.d,0

release/rbtree_insert.d,0

release/ndsp-filter.d,0

release/nfc.d,0

release/error.d,0

Makefile,2144
export LIBCTRU_MAJOR	:= 2LIBCTRU_MAJOR11,337
export LIBCTRU_MINOR	:= 0LIBCTRU_MINOR12,363
export LIBCTRU_PATCH	:= 1LIBCTRU_PATCH13,389
VERSION	:=	$(LIBCTRU_MAJOR).$(LIBCTRU_MINOR).$(LIBCTRU_PATCH)VERSION16,417
TARGET		:=	ctruTARGET25,933
SOURCES		:=	source \SOURCES27,966
DATA		:=	dataDATA39,1199
INCLUDES	:=	includeINCLUDES40,1213
ARCH	:=	-march=armv6k -mtune=mpcore -mfloat-abi=hard -mtp=softARCH45,1430
CFLAGS	:=	-g -Wall -Werror -mword-relocations \CFLAGS47,1494
CXXFLAGS	:= $(CFLAGS) -fno-rtti -fno-exceptions -std=gnu++11CXXFLAGS55,1658
ASFLAGS	:=	-g $(ARCH) $(INCLUDE)ASFLAGS57,1720
LIBDIRS	:=LIBDIRS63,2020
export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \VPATH72,2439
CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))CFILES75,2544
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))CPPFILES76,2614
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))SFILES77,2687
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))BINFILES78,2757
	export LD	:=	$(CC)LD85,3158
	export LD	:=	$(CXX)LD89,3349
export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES))OFILES_BIN94,3543
export OFILES_SRC	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)OFILES_SRC95,3592
export HFILES_BIN	:=	$(addsuffix .h,$(subst .,_,$(BINFILES)))HFILES_BIN97,3666
export OFILES	:=	$(OFILES_BIN) $(OFILES_SRC)OFILES99,3729
export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \INCLUDE101,3775
all: lib/libctru.a lib/libctrud.aall108,3999
dist-bin: alldist-bin110,4034
dist-src:dist-src113,4129
dist: dist-src dist-bindist116,4250
install: dist-bininstall118,4275
lib:lib122,4419
release:release125,4452
debug:debug128,4489
lib/libctru.a : lib release $(SOURCES) $(INCLUDES)lib/libctru.a131,4524
lib/libctrud.a : lib debug $(SOURCES) $(INCLUDES)lib/libctrud.a138,4763
clean:clean146,5056
DEPENDS	:=	$(OFILES:.o=.d)DEPENDS153,5202
$(OUTPUT)	:	$(OFILES)$(OUTPUT)158,5411
$(OFILES_SRC) : $(HFILES_BIN)$(OFILES_SRC)160,5434
%.bin.o	%_bin.h :	%.bin%.bin.o163,5548
%.bin.o	%_bin.h :	%.bin%_bin.h163,5548
